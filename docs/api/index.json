[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "ourthings/.external-ecmascript.js",
    "static": true,
    "longname": "ourthings/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "ourthings/Define.js",
    "content": "/** @module Define */\r\n\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Our define class, contains all magic dnumber defines\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * // DEFINE = new Define();\r\n *\r\n */\r\nexport default class Define {\r\n\tconstructor() {\r\n\t\t/**\r\n\t\t * Queue state of operations\r\n\t\t */\r\n\t\tthis.STATUS_LOADING = 0;\r\n\t\tthis.STATUS_LOADED = 1;\r\n\t\tthis.STATUS_RUNNING = 2;\r\n\t\tthis.STATUS_ERROR = 3;\r\n\r\n\t\t/**\r\n\t\t * Render modes\r\n\t\t */\r\n\t\tthis.RENDER_INSERT = \"insert\";\r\n\t\tthis.RENDER_APPEND = \"append\";\r\n\t\tthis.RENDER_REPLACE = \"replace\";\r\n\r\n\r\n\t\t/**\r\n\t\t *  Command types\r\n\t\t */\r\n\r\n\t\tthis.COMMAND_INSTANT = \"Instant\";\r\n\t\tthis.COMMAND_EVENT = \"Event\";\r\n\t\tthis.COMMAND_SUB = \"Sub\";\r\n\r\n\t\t/**\r\n\t\t *  Queue states\r\n\t\t */\r\n\t\tthis.QUEUE_ADDED = 0;\r\n\t\tthis.QUEUE_RUNNING = 1;\r\n\t\tthis.QUEUE_FINISHED = 2;\r\n\t\tthis.QUEUE_ERROR = 3;\r\n\r\n\t\t/**\r\n\t\t * Queueable Finished states\r\n\t\t */\r\n\r\n\t\tthis.FIN_OK = 0;\r\n\t\tthis.FIN_WARNING = 1;\r\n\t\tthis.FIN_ERROR = 2;\r\n\r\n\t\tthis.MEMORY_GARBAGE=\"Garbage\";\r\n\t\tthis.MEMORY_SESSION=\"Session\";\r\n\t\tthis.MEMORY_PERMANENT=\"Permanent\";\r\n\r\n\r\n\t\t/**\r\n\t\t *  Keycodes\r\n\t\t */\r\n\r\n\t\tthis.KEY_RETURN=13;\r\n\r\n\t}\r\n}",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Define.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Define",
    "memberof": "ourthings/Define.js",
    "static": true,
    "longname": "ourthings/Define.js~Define",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Define.js",
    "importStyle": "Define",
    "description": "",
    "examples": [
      "// DEFINE = new Define();"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\nOur define class, contains all magic dnumber defines"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ourthings/Define.js~Define",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Define.js~Define#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "STATUS_LOADING",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#STATUS_LOADING",
    "access": "public",
    "description": "Queue state of operations",
    "lineNumber": 20,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "STATUS_LOADED",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#STATUS_LOADED",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "STATUS_RUNNING",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#STATUS_RUNNING",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "STATUS_ERROR",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#STATUS_ERROR",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "RENDER_INSERT",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#RENDER_INSERT",
    "access": "public",
    "description": "Render modes",
    "lineNumber": 28,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "RENDER_APPEND",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#RENDER_APPEND",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "RENDER_REPLACE",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#RENDER_REPLACE",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "COMMAND_INSTANT",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#COMMAND_INSTANT",
    "access": "public",
    "description": " Command types",
    "lineNumber": 37,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "COMMAND_EVENT",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#COMMAND_EVENT",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "COMMAND_SUB",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#COMMAND_SUB",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "QUEUE_ADDED",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#QUEUE_ADDED",
    "access": "public",
    "description": " Queue states",
    "lineNumber": 44,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "QUEUE_RUNNING",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#QUEUE_RUNNING",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "QUEUE_FINISHED",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#QUEUE_FINISHED",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "QUEUE_ERROR",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#QUEUE_ERROR",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "FIN_OK",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#FIN_OK",
    "access": "public",
    "description": "Queueable Finished states",
    "lineNumber": 53,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "FIN_WARNING",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#FIN_WARNING",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "FIN_ERROR",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#FIN_ERROR",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "MEMORY_GARBAGE",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#MEMORY_GARBAGE",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "MEMORY_SESSION",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#MEMORY_SESSION",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "MEMORY_PERMANENT",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#MEMORY_PERMANENT",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "KEY_RETURN",
    "memberof": "ourthings/Define.js~Define",
    "static": false,
    "longname": "ourthings/Define.js~Define#KEY_RETURN",
    "access": "public",
    "description": " Keycodes",
    "lineNumber": 66,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "ourthings/index.js",
    "content": "/**\r\n * @module ourthings\r\n */\r\n\r\nexport {default as Queue} from './Queue';\r\nexport {default as Queueable} from './Queueable';\r\n",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "ourthings/main.js",
    "content": "import Queue from './Queue';\r\n\r\n/**\r\n *  Import all the queueables we want to use here. Make sure to add an entry to to new queue to map the commands\r\n *\r\n */\r\nimport Internals from './Queueable/Internals';\r\nimport Templates from './Queueable/Templates';\r\nimport Elements from './Queueable/Elements';\r\nimport Api from './Queueable/Api';\r\nimport Openlayers from './Queueable/Openlayers';\r\nimport Browser from './Queueable/Browser';\r\nimport W3Menu from './Queueable/W3Menu';\r\nimport Mapbox from \"./Queueable/Mapbox\";\r\nimport Markdown from \"./Queueable/Markdown\";\r\n\r\n/*\r\n * Start the queue engine\r\n */\r\nlet queue;\r\n/*\r\n * Wait until the dom is loaded (IE11 will not have the dom in place before it starts running scripts\r\n */\r\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\r\n\tqueue = new Queue({\r\n\t\t\"internals\": Internals,\r\n\t\t\"templates\": Templates,\r\n\t\t\"elements\": Elements,\r\n\t\t\"api\": Api,\r\n\t\t\"openlayers\": Openlayers,\r\n\t\t\"browser\": Browser,\r\n\t\t\"w3menu\": W3Menu,\r\n\t\t\"mapbox\" : Mapbox,\r\n\t\t\"markdown\": Markdown\r\n\t});\r\n\twindow.queue = queue;\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/main.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "ourthings/Memory.js",
    "content": "/** @module Memory */\r\n\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Memory manager class\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * // memory = new Memory();\r\n *\r\n */\r\nexport default class Memory {\r\n\t/**\r\n\t * Add new memory element\r\n\t * @param pid\r\n\t * @param mode\r\n\t * @param origin\r\n\t * @param value\r\n\t */\r\n\tconstructor(pid,mode,origin,value) {\r\n\t\tthis.pid=pid;\r\n\t\tthis.mode= mode;\r\n\t\tthis.origin=origin;\r\n\t\tthis.value=value;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current value of the memory item (same as memory.name.value)\r\n\t * @return {*}\r\n\t */\r\n\tget() {\r\n\t\treturn this.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Toggle the value based on an array list of values\r\n\t * @param {array} values\r\n\t * @return {*}\r\n\t */\r\n\ttoggle(values) {\r\n\t\tlet currentValue=this.value;\r\n\t\tlet len=values.length;\r\n\t\tlet pos=values.indexOf(this.value);\r\n\t\tpos++;\r\n\t\tif(pos>=len)\r\n\t\t\tpos=0;\r\n\t\tthis.value=values[pos];\r\n\t\treturn currentValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Return an encoded version of the memory for storage in a coookie\r\n\t * @returns {string}\r\n\t * @private\r\n\t */\r\n\t_store() {\r\n\t\treturn window.btoa(JSON.stringify({\r\n\t\t\tpid: this.pid,\r\n\t\t\tmode: this.mode,\r\n\t\t\torigin: this.origin,\r\n\t\t\tvalue: this.value\r\n\t\t}));\r\n\t}\r\n};",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Memory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "class",
    "name": "Memory",
    "memberof": "ourthings/Memory.js",
    "static": true,
    "longname": "ourthings/Memory.js~Memory",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Memory.js",
    "importStyle": "Memory",
    "description": "",
    "examples": [
      "// memory = new Memory();"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\nMemory manager class"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 76,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ourthings/Memory.js~Memory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Memory.js~Memory#constructor",
    "access": "public",
    "description": "Add new memory element",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "origin",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "pid",
    "memberof": "ourthings/Memory.js~Memory",
    "static": false,
    "longname": "ourthings/Memory.js~Memory#pid",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "mode",
    "memberof": "ourthings/Memory.js~Memory",
    "static": false,
    "longname": "ourthings/Memory.js~Memory#mode",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "origin",
    "memberof": "ourthings/Memory.js~Memory",
    "static": false,
    "longname": "ourthings/Memory.js~Memory#origin",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "value",
    "memberof": "ourthings/Memory.js~Memory",
    "static": false,
    "longname": "ourthings/Memory.js~Memory#value",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "get",
    "memberof": "ourthings/Memory.js~Memory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Memory.js~Memory#get",
    "access": "public",
    "description": "Get the current value of the memory item (same as memory.name.value)",
    "lineNumber": 34,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "toggle",
    "memberof": "ourthings/Memory.js~Memory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Memory.js~Memory#toggle",
    "access": "public",
    "description": "Toggle the value based on an array list of values",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "_store",
    "memberof": "ourthings/Memory.js~Memory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Memory.js~Memory#_store",
    "access": "private",
    "description": "Return an encoded version of the memory for storage in a coookie",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "ourthings/Queue.js",
    "content": "/** @module ourthings/Queue */\r\nimport Define from './Define.js';\r\nimport * as consoleBadge from 'console-badge';\r\nimport Memory from \"./Memory\";\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * The main queue class\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * let queue = new Queue();\r\n */\r\nclass Queue {\r\n\r\n\t/**\r\n\t * Class constructor\r\n\t */\r\n\tconstructor(queueablesList) {\r\n\r\n\t\tlet self = this;\r\n\r\n\t\t/*\r\n\t\t * Create our DEFINE object for\r\n\t\t * @type {Define}\r\n\t\t */\r\n\t\tself.DEFINE = new Define();\r\n\t\t/*\r\n\t\t * Our Queue array\r\n\t\t *\r\n\t\t * @type {Array}\r\n\t\t */\r\n\t\tself.queue = {};\r\n\r\n\t\t/*\r\n\t\t * Our events (queues) which can be called by name\r\n\t\t */\r\n\t\tself.prepare = {};\r\n\r\n\r\n\t\t/*\r\n\t\t * Queueable items object\r\n\t\t */\r\n\t\tself.queueables = {};\r\n\t\t/*\r\n\t\t * Templates to be loaded\r\n\t\t * @type {Array}\r\n\t\t */\r\n\t\tself.templates = [];\r\n\r\n\t\t/*\r\n\t\t * Register lists\r\n\t\t */\r\n\t\tself.registers = [];\r\n\r\n\t\t/*\r\n\t\t * Create a fragment for big dom inserts\r\n\t\t * @type {DocumentFragment}\r\n\t\t */\r\n\t\tself.fragment = document.createDocumentFragment();\r\n\r\n\t\t/*\r\n\t\t * Se our status\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tself.status = self.DEFINE.STATUS_LOADING;\r\n\r\n\t\t/*\r\n\t\t * Our queue process ID\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tself.pid = 0;\r\n\t\tself.runningPid = -1;\r\n\r\n\t\t/*\r\n\t\t * Our unique bind ids\r\n\t\t */\r\n\t\tself.ucid = 0;\r\n\r\n\t\t/*\r\n\t\t * When processing out loops this keeps a track\r\n\t\t */\r\n\t\tself.activeLoops = [];\r\n\r\n\t\t/*\r\n\t\t * Default time for process to be executed after\r\n\t\t * TODO Platform test / tune\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tself.defaultTimer = 10;\r\n\r\n\t\tself.developerMode = false;\r\n\r\n\r\n\t\tconsole.clear();\r\n\t\tconsoleBadge.log({\r\n\t\t\tmode: 'shields.io',\r\n\t\t\tleftText: 'ourthings framework',\r\n\t\t\trightText: 'https://github.com/nautoguide/ourthings 🚀',\r\n\t\t\trightBgColor: '#ffc107',\r\n\t\t\trightTextColor: '#1a1a1a'\r\n\t\t});\r\n\t\t/*\r\n\t\t * Listener for our chrome-plugin\r\n\t\t */\r\n\t\tdocument.addEventListener('ourthings_site', function (e) {\r\n\t\t\tswitch (e.detail.function) {\r\n\t\t\t\tcase 'ping':\r\n\t\t\t\t\tdocument.dispatchEvent(new CustomEvent('ourthings_extension', {\r\n\t\t\t\t\t\tdetail: {\"function\": \"pong\"}\r\n\t\t\t\t\t}));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'menu':\r\n\t\t\t\t\tself.menu();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tself.browserClasses();\r\n\r\n\t\t/*\r\n\t\t * Run init against all our queueables\r\n\t\t *\r\n\t\t * This basically passes the queue object (self) though but also for any queueables that require it\r\n\t\t * starts any promise functions that will result in them becoming active\r\n\t\t */\r\n\t\tfor (let i in queueablesList) {\r\n\t\t\tself.checkQueueable(i, queueablesList[i]);\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Initialise the memory\r\n\t\t */\r\n\t\twindow.memory = {};\r\n\r\n\t\t/*\r\n\t\t * Load any perm cookies\r\n\t\t */\r\n\t\tself._loadMemoryPerms();\r\n\t\tif (window.memory.developer && window.memory.developer.value === true)\r\n\t\t\tself.developerMode = true;\r\n\t\t/*\r\n\t\t * Load any url params into memoery\r\n\t\t */\r\n\r\n\t\tself.setMemory(\"urlParams\", self.urlToJson(), \"Session\");\r\n\r\n\t\t/*\r\n\t\t * Load the templates.json\r\n\t\t *\r\n\t\t * This can now be specified by data-templates on the script include\r\n\t\t */\r\n\t\tlet templateInclude = \"templates.json\";\r\n\r\n\t\tlet attr = self.getElement(\"script[data-templates]\", false);\r\n\t\tif (attr && attr.getAttribute(\"data-templates\")) {\r\n\t\t\ttemplateInclude = attr.getAttribute(\"data-templates\");\r\n\t\t}\r\n\r\n\t\tfetch(templateInclude, {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t})\r\n\t\t\t.then(response => self.handleFetchErrors(response))\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(function (response) {\r\n\t\t\t\t/**\r\n\t\t\t\t * Convert the response to json and start the loader\r\n\t\t\t\t */\r\n\t\t\t\tself.templates = response;\r\n\t\t\t\tself.templateLoader();\r\n\t\t\t})\r\n\t\t\t.catch(function (error) {\r\n\t\t\t\tself.reportError(error, 'Warning this error is probably fatal as I have no templates to load');\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Error Handler for fetch calls\r\n\t * @param response {object} - Fetch response object\r\n\t * @returns {Object}\r\n\t */\r\n\thandleFetchErrors(response) {\r\n\t\tlet self = this;\r\n\t\tif (!response.ok) {\r\n\t\t\tself.status = self.DEFINE.STATUS_ERROR;\r\n\t\t\tthrow Error(response.statusText);\r\n\t\t}\r\n\t\treturn response;\r\n\t}\r\n\r\n\tcheckQueueable(name, obj) {\r\n\t\tlet self = this;\r\n\t\tif (self.queueables[name] === undefined) {\r\n\t\t\tself.queueables[name] = new obj();\r\n\t\t\tself.queueables[name].init(self);\r\n\t\t\tconsoleBadge.log({\r\n\t\t\t\tmode: 'shields.io',\r\n\t\t\t\tleftText: 'Booting',\r\n\t\t\t\trightText: name,\r\n\t\t\t\trightBgColor: '#ffc107',\r\n\t\t\t\trightTextColor: '#1a1a1a'\r\n\t\t\t});\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Helper function to upcase first letter of string\r\n\t * @param string\r\n\t * @return {string}\r\n\t */\r\n\tcapitalizeFirstLetter(string) {\r\n\t\treturn string.charAt(0).toUpperCase() + string.slice(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Loads templates from the template stack. Recursively calls self until stack is empty\r\n\t * @returns {void}\r\n\t */\r\n\ttemplateLoader() {\r\n\t\tlet self = this;\r\n\r\n\t\t/*\r\n\t\t * Version check as we changed the format\r\n\t\t */\r\n\t\tif (this.templates.version < 1.0) {\r\n\t\t\tself.reportError(\"Template file has no version, expecting >=1.0\", \"Warning this error is probably fatal as I have no templates to load\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t/*\r\n\t\t *  Are there any templates to load?\r\n\t\t *\r\n\t\t *  If not then we dump the fragment into the dom\r\n\t\t */\r\n\t\tif (this.templates.templates.length === 0) {\r\n\t\t\tdocument.head.appendChild(self.fragment);\r\n\t\t\t// Clean up the fragment\r\n\t\t\tself.fragment = document.createDocumentFragment();\r\n\t\t\t/*\r\n\t\t\t * Set our status and then process the init template\r\n\t\t\t */\r\n\t\t\tself.status = self.DEFINE.STATUS_LOADED;\r\n\t\t\t/*\r\n\t\t\t * Detach the init template loader from this stack chain\r\n\t\t\t *\r\n\t\t\t * We do this because a fail in a subsequent template will register as an error in the fetch catch method\r\n\t\t\t * which is misleading\r\n\t\t\t */\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tself.templateProcessor(\"#init\", false);\r\n\t\t\t}, 100);\r\n\r\n\t\t\tself.status = self.DEFINE.STATUS_RUNNING;\r\n\t\t\tconsoleBadge.log({\r\n\t\t\t\tmode: 'shields.io',\r\n\t\t\t\tleftText: 'Online',\r\n\t\t\t\trightText: 'queue.show(); # To debug the queue',\r\n\t\t\t\trightBgColor: '#ffc107',\r\n\t\t\t\trightTextColor: '#1a1a1a'\r\n\t\t\t});\r\n\t\t\tif (self.developerMode === true) {\r\n\t\t\t\tconsoleBadge.log({\r\n\t\t\t\t\tmode: 'shields.io',\r\n\t\t\t\t\tleftText: 'DEVELOPER MODE',\r\n\t\t\t\t\trightText: 'Enabled',\r\n\t\t\t\t\trightBgColor: '#ffc107',\r\n\t\t\t\t\trightTextColor: '#1a1a1a'\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t    * Pop the template off the stack\r\n\t    */\r\n\t\tlet template = this.templates.templates.pop();\r\n\t\tif (typeof template === \"string\") {\r\n\t\t\ttemplate = {\"url\": template, \"type\": \"text/html\"}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Is there a cache?\r\n\t\t */\r\n\t\tif (this.templates.cache && self.developerMode !== true) {\r\n\t\t\ttemplate = this.templates.cache;\r\n\t\t\tthis.templates.templates = [];\r\n\t\t}\r\n\r\n\t\tfetch(template.url, {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': template.type\r\n\t\t\t},\r\n\t\t\tmode: 'cors',\r\n\t\t\tcredentials: 'same-origin'\r\n\t\t})\r\n\t\t\t.then(response => self.handleFetchErrors(response))\r\n\t\t\t.then(response => response.text())\r\n\t\t\t.then(function (response) {\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * Get the template we were sent and add it to the fragment for insertion into the dom\r\n\t\t\t\t *\r\n\t\t\t\t * We wrap it in meta tag, this helps improve render speed but still stuck with an innerHTML\r\n\t\t\t\t * as we don't know the content\r\n\t\t\t\t *\r\n\t\t\t\t */\r\n\t\t\t\tlet text = response;\r\n\t\t\t\t/*\r\n\t\t\t\t * Remove any html comments as they will slow down processing later on\r\n\t\t\t\t */\r\n\t\t\t\ttext = text.replace(/<!--([\\s\\S]*?)-->/g, '');\r\n\r\n\t\t\t\tlet meta = document.createElement('meta');\r\n\t\t\t\tmeta.setAttribute(\"name\", \"generator\");\r\n\t\t\t\tmeta.setAttribute(\"content\", template.url);\r\n\t\t\t\tif (template.type === 'text/css')\r\n\t\t\t\t\tmeta.innerHTML = `<style>${text}</style>`;\r\n\t\t\t\telse\r\n\t\t\t\t\tmeta.innerHTML = text;\r\n\t\t\t\tself.fragment.appendChild(meta);\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t *  Call our self again to process any more templates\r\n\t\t\t\t */\r\n\t\t\t\tself.templateLoader();\r\n\t\t\t})\r\n\t\t\t.catch(function (error) {\r\n\t\t\t\tconsole.error('Error:', error);\r\n\t\t\t\tconsole.info(\"Warning this error is probably fatal as a template specified in templates.json has failed to load or wont process\");\r\n\t\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Template processor\r\n\t * Takes a template, process it and places into the dom\r\n\t * @param templateId {string} - ID of the template\r\n\t * @param targetId {string|false} - Place in the dom the put the result. In the event of false we process without dom\r\n\t * @return {boolean|string} - success status\r\n\t */\r\n\ttemplateProcessor(templateId, targetId, mode) {\r\n\t\tlet self = this;\r\n\t\tlet commands = [];\r\n\t\tmode = mode || self.DEFINE.RENDER_INSERT;\r\n\r\n\t\tlet templateDom = self.getElement(templateId);\r\n\t\tif (!templateDom) {\r\n\t\t\tself.reportError('No valid template', 'I have no valid template, check the templateId [' + templateId + ']');\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tlet targetDom = undefined;\r\n\t\tlet templateHTML = templateDom.innerHTML;\r\n\t\t/*\r\n\t\t * Pass all out tags {{ }} First\r\n\t\t *\r\n\t\t * TODO we need to split this so only loop etc is done first, then pass to templateParse then parse\r\n\t\t * out {{eval}} when the command queues are gone to prevent executing too early\r\n\t\t */\r\n\t\tlet parsedTemplate = self.templateVars(templateHTML);\r\n\t\t/*\r\n\t\t * now pass to the templateParse to build our commands\r\n\t\t */\r\n\t\tparsedTemplate = self.templateParse(parsedTemplate, commands);\r\n\r\n\t\tif (targetId === \"return\")\r\n\t\t\treturn parsedTemplate;\r\n\r\n\r\n\t\tif (targetId !== false) {\r\n\t\t\ttargetDom = self.getElement(targetId);\r\n\t\t\tif (!targetDom) {\r\n\t\t\t\tself.reportError('No valid target', 'I have no valid target to render the template [' + templateId + '] to, check the targetId [' + targetId + ']');\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tself.renderToDom(targetDom, parsedTemplate, mode);\r\n\t\t}\r\n\r\n\t\tself.commandsBind(commands);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Process the template looking for {{}} instances\r\n\t * @param template\r\n\t * @return {*}\r\n\t */\r\n\ttemplateVars(template) {\r\n\t\tlet match;\r\n\t\tlet self = this;\r\n\t\t/*\r\n\t\t * Fix any multi level loop references\r\n\t\t */\r\n\r\n\t\tfor (let i in self.activeLoops) {\r\n\t\t\tlet loopRegex = new RegExp(\"#loop\" + i, \"g\");\r\n\t\t\tlet incrementRegex = new RegExp(\"#increment\" + i, \"g\");\r\n\t\t\ttemplate = template.replace(loopRegex, memory['for' + i].value.index);\r\n\t\t\ttemplate = template.replace(incrementRegex, memory['for' + i].value.increment);\r\n\t\t}\r\n\r\n\r\n\t\t/*\r\n\t\t * Look for {{#for}} loops and execute them\r\n\t\t */\r\n\t\tconst forRegex = /{{#([0-9]{0,1})for (.*?)}}([\\s\\S]*?){{\\/for}}/;\r\n\t\twhile (match = forRegex.exec(template)) {\r\n\t\t\tlet subTemplate = '';\r\n\t\t\tmatch[1] = match[1] || 0;\r\n\t\t\tself.activeLoops.push(match[1]);\r\n\t\t\t/*\r\n\t\t\t * loop through making sub templates as we go\r\n\t\t\t *\r\n\t\t\t * NOTE: you will notice that all index methods use 0 at the end. This is to allow\r\n\t\t\t * for the future when we implement for loops in for loops.\r\n\t\t\t */\r\n\t\t\tlet increment = 0;\r\n\t\t\tfor (let i in eval(match[2])) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Set a memory 'for0' containing the index. This is an object as in the future it\r\n\t\t\t\t * may be expanded to contain other info.\r\n\t\t\t\t */\r\n\t\t\t\tthis.setMemory(\"for\" + match[1], {\"index\": i, \"increment\": increment}, \"session\");\r\n\t\t\t\t/*\r\n\t\t\t\t * This is the quick way to reference in the index using #loop[n]\r\n\t\t\t\t */\r\n\t\t\t\tlet loopRegex = new RegExp(\"#loop\" + match[1], \"g\");\r\n\t\t\t\tlet incrementMatch = match[3].replace(loopRegex, i);\r\n\t\t\t\t/*\r\n\t\t\t\t * Process the template\r\n\t\t\t\t */\r\n\t\t\t\tsubTemplate += self.templateVars(incrementMatch, i);\r\n\t\t\t\tincrement++;\r\n\t\t\t}\r\n\t\t\ttemplate = template.replace(match[0], subTemplate);\r\n\t\t\tself.activeLoops.shift();\r\n\t\t}\r\n\t\t/*\r\n\t \t * Process {{#if}}\r\n\t \t*/\r\n\t\tconst ifRegex = /{{#if (.*?)}}([\\s\\S]*?){{\\/if}}/;\r\n\t\twhile (match = ifRegex.exec(template)) {\r\n\t\t\tconst elseRegex = /{{#if .*?}}([\\s\\S]*?){{else}}([\\s\\S]*?){{\\/if}}/g;\r\n\t\t\tlet ifResult = match[2];\r\n\t\t\tlet elseResult = '';\r\n\t\t\tlet elseMatch = elseRegex.exec(match[0]);\r\n\t\t\tif (elseMatch) {\r\n\t\t\t\tifResult = elseMatch[1];\r\n\t\t\t\telseResult = elseMatch[2];\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tif (eval(match[1]))\r\n\t\t\t\t\ttemplate = template.replace(match[0], self.templateVars(ifResult));\r\n\t\t\t\telse\r\n\t\t\t\t\ttemplate = template.replace(match[0], self.templateVars(elseResult));\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsoleBadge.log({\r\n\t\t\t\t\tmode: 'shields.io',\r\n\t\t\t\t\tleftText: 'Failed to eval',\r\n\t\t\t\t\trightText: match[1],\r\n\t\t\t\t\trightBgColor: '#ff4d4d',\r\n\t\t\t\t\trightTextColor: '#1a1a1a'\r\n\t\t\t\t});\r\n\t\t\t\ttemplate = template.replace(match[0], '');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Look for any includes to directly inject templates\r\n\t\t */\r\n\t\tconst includeRegex = /{{#include (.*?)}}/;\r\n\t\twhile (match = includeRegex.exec(template)) {\r\n\t\t\ttemplate = template.replace(match[0], self.templateVars(self.getElement(eval(match[1])).innerHTML));\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Process any other {{}} tags but not if they have {{!}} as those are done on command exec time\r\n\t\t */\r\n\t\tconst commandRegex = /{{([^!|~](.|\\n)*?)}}/;\r\n\t\twhile (match = commandRegex.exec(template)) {\r\n\t\t\tif (match[1][0] === '^')\r\n\t\t\t\ttemplate = template.replace('\"' + match[0] + '\"', self.varsParser(match[1].substring(1, match[1].length)));\r\n\t\t\telse\r\n\t\t\t\ttemplate = template.replace(match[0], self.varsParser(match[1]));\r\n\t\t}\r\n\t\treturn template;\r\n\t}\r\n\r\n\t/**\r\n\t * Process a json object and replace {{!}} tags + # tags\r\n\t * @param json\r\n\t * @return {any}\r\n\t */\r\n\tjsonVars(json) {\r\n\t\tlet self = this;\r\n\t\tjson = JSON.stringify(json);\r\n\t\tlet match;\r\n\r\n\t\t/*\r\n\t\t * Specials #pid\r\n\t\t */\r\n\r\n\t\tconst pidRegex = /\\#pid/;\r\n\t\twhile (match = pidRegex.exec(json)) {\r\n\t\t\tjson = json.replace(match[0], self.runningPid);\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Specials #stack\r\n\t\t */\r\n\r\n\t\tconst stackRegex = /\\#stack/;\r\n\t\twhile (match = stackRegex.exec(json)) {\r\n\t\t\tjson = json.replace(match[0], `queue.queue[${self.runningPid}].stack`);\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * {{!}} tags\r\n\t\t */\r\n\r\n\t\tconst commandRegex = /{{(![\\^]{0,1})(.*?)}}/;\r\n\t\twhile (match = commandRegex.exec(json)) {\r\n\t\t\tif (match[1] === '!^')\r\n\t\t\t\tjson = json.replace('\"' + match[0] + '\"', self.varsParser(match[2]));\r\n\t\t\telse\r\n\t\t\t\tjson = json.replace(match[0], self.varsParser(match[2]));\r\n\t\t}\r\n\t\tlet jsonReturn = {};\r\n\t\ttry {\r\n\t\t\tjsonReturn = JSON.parse(json);\r\n\t\t} catch (e) {\r\n\t\t\tself.reportError(\"Can not parse JSON [\" + json + \"]\", \"This error is probably fatal, check your templates\");\r\n\r\n\t\t}\r\n\t\treturn jsonReturn;\r\n\t}\r\n\r\n\t/**\r\n\t * parse a var string\r\n\t *\r\n\t * TODO This is massively insecure. If as user can input {{}} into a form and have it displayed\r\n\t * to other users they can take over. We either clean all input as you would with <script> etc tags or we\r\n\t * manually write a parser.\r\n\t *\r\n\t * @param parseString\r\n\t * @return {any}\r\n\t */\r\n\tvarsParser(parseString) {\r\n\t\tlet ret = undefined;\r\n\t\ttry {\r\n\t\t\tret = eval(parseString);\r\n\t\t} catch (e) {\r\n\t\t\tconsoleBadge.log({\r\n\t\t\t\tmode: 'shields.io',\r\n\t\t\t\tleftText: 'Cant resolve',\r\n\t\t\t\trightText: parseString,\r\n\t\t\t\trightBgColor: '#ff4d4d',\r\n\t\t\t\trightTextColor: '#1a1a1a'\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\r\n\t/**\r\n\t * Takes a template and runs any template commands contained in it to create a HTML template\r\n\t * ready to be put into the dom\r\n\t *\r\n\t * @param template {string}\r\n\t * @return {string}\r\n\t */\r\n\ttemplateParse(template, commands) {\r\n\t\tlet commandRegex = /[@\\-]([a-zA-Z0-9]*?\\.[a-zA-Z0-9]*?\\((.|\\n)*?(\\);))/;\r\n\t\tlet match = undefined;\r\n\t\tlet parentCommand;\r\n\t\tlet isParent;\r\n\t\tlet self = this;\r\n\t\t/*\r\n\t\t *  Locate all the commands in the template and generate an array of command objects that\r\n\t\t *  are linked by a reference into the template\r\n\t\t */\r\n\t\twhile (match = commandRegex.exec(template)) {\r\n\t\t\tisParent = match[0][0] === '@';\r\n\t\t\t/*\r\n\t\t\t * Generate this command object from the extracted string\r\n\t\t\t */\r\n\t\t\tlet command = self.commandParse(match[1], isParent);\r\n\r\n\t\t\t/*\r\n\t\t\t *  In the case of an instant or sub run we don't need to leave anything in the DOM so nuke\r\n\t\t\t */\r\n\t\t\tif (command.options.queueRun === self.DEFINE.COMMAND_INSTANT || command.options.queueRun === self.DEFINE.COMMAND_SUB || command.options.queuePrepare) {\r\n\t\t\t\ttemplate = template.replace(match[0], \"\");\r\n\t\t\t} else {\r\n\t\t\t\ttemplate = template.replace(match[0], \"data-queueable=\\\"CMD\" + command.ucid + \"\\\"\");\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t *  Is this a @parent or a -child?\r\n\t\t\t */\r\n\t\t\tif (isParent) {\r\n\t\t\t\t// Set the parent point to current position\r\n\t\t\t\tparentCommand = commands.length;\r\n\r\n\t\t\t\tcommands.push(command);\r\n\t\t\t} else {\r\n\t\t\t\t// If the parent has just been created it won't have child structure\r\n\t\t\t\tif (commands[parentCommand].commands === undefined) {\r\n\t\t\t\t\tcommands[parentCommand].commands = [];\r\n\t\t\t\t}\r\n\t\t\t\t// Put the command in the parents\r\n\t\t\t\tcommands[parentCommand].commands.push(command);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Add the instants to the active queue\r\n\t\tself.commandsQueue(commands);\r\n\t\treturn template;\r\n\t}\r\n\r\n\t/**\r\n\t * Bind the events to the dom based on the command Object\r\n\t * @param commandObj\r\n\t */\r\n\tcommandsBind(commandObj) {\r\n\t\tlet self = this;\r\n\t\tfor (let command in commandObj) {\r\n\t\t\t/*\r\n\t\t\t * Bind queue elements will not me marked to run instantly so we pick those\r\n\t\t\t */\r\n\t\t\tif (commandObj[command].options.queueRun !== self.DEFINE.COMMAND_INSTANT) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Find its dom entry using the selector we added\r\n\t\t\t\t */\r\n\t\t\t\tlet element;\r\n\t\t\t\tif (commandObj[command].options.queueBindTarget)\r\n\t\t\t\t\telement = self.getElement(commandObj[command].options.queueBindTarget);\r\n\t\t\t\telse\r\n\t\t\t\t\telement = self.getElement(\"[data-queueable=CMD\" + commandObj[command].ucid + \"]\", false);\r\n\t\t\t\tif (element !== false) {\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * Add the event. We flip it over to an instant event now because we want\r\n\t\t\t\t\t * it triggered.\r\n\t\t\t\t\t *\r\n\t\t\t\t\t * The user may have specified an event and if so it will be a comma separated list\r\n\t\t\t\t\t */\r\n\t\t\t\t\tlet event = commandObj[command].options.queueEvent || \"click\";\r\n\t\t\t\t\tlet events = event.split(\",\");\r\n\r\n\t\t\t\t\tfor (let e in events) {\r\n\t\t\t\t\t\tif (events[e] === 'keydown') {\r\n\t\t\t\t\t\t\telement.addEventListener(events[e], function (e) {\r\n\t\t\t\t\t\t\t\tlet codes = [self.DEFINE.KEY_RETURN];\r\n\t\t\t\t\t\t\t\tif (commandObj[command].options.queueEventCodes)\r\n\t\t\t\t\t\t\t\t\tcodes = commandObj[command].options.queueEventCodes;\r\n\t\t\t\t\t\t\t\tif (codes.indexOf(e.keyCode) !== -1) {\r\n\t\t\t\t\t\t\t\t\tcommandObj[command].options.queueRun = self.DEFINE.COMMAND_INSTANT;\r\n\t\t\t\t\t\t\t\t\tself.commandsQueue.apply(self, [[commandObj[command]]]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\telement.addEventListener(events[e], function (e) {\r\n\t\t\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tcommandObj[command].options.queueRun = self.DEFINE.COMMAND_INSTANT;\r\n\t\t\t\t\t\t\t\tself.commandsQueue.apply(self, [[commandObj[command]]]);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Take the commands array with command objects in it and add them to the queue *if* they are\r\n\t * marked as instant. IE ready to execute\r\n\t *\r\n\t * @param commandObj\r\n\t */\r\n\tcommandsQueue(commandObj) {\r\n\t\tlet self = this;\r\n\t\tfor (let command in commandObj) {\r\n\t\t\t/*\r\n\t\t\t * Init the stack\r\n\t\t\t */\r\n\t\t\tcommandObj[command].stack = {};\r\n\t\t\t/*\r\n\t\t\t * DEFINE.COMMAND_INSTANT, basically a queue item we need to get running\r\n\t\t\t */\r\n\t\t\tif (commandObj[command].options.queueRun === self.DEFINE.COMMAND_INSTANT) {\r\n\t\t\t\tself.queue[self.pid] = self.deepCopy(commandObj[command]);\r\n\t\t\t\tself.pid++;\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t * Is the a prepare queue that will be triggered at some later stage\r\n\t\t\t */\r\n\t\t\tif (commandObj[command].options.queuePrepare !== undefined) {\r\n\t\t\t\tself.prepare[commandObj[command].options.queuePrepare] = self.deepCopy(commandObj[command]);\r\n\t\t\t\tif (commandObj[command].options.queueRun == self.DEFINE.COMMAND_INSTANT) {\r\n\t\t\t\t\tconsoleBadge.log({\r\n\t\t\t\t\t\tmode: 'shields.io',\r\n\t\t\t\t\t\tleftText: 'Running Prepared Queue',\r\n\t\t\t\t\t\trightText: commandObj[command].options.queuePrepare,\r\n\t\t\t\t\t\trightBgColor: '#aeff79',\r\n\t\t\t\t\t\trightTextColor: '#1a1a1a'\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsoleBadge.log({\r\n\t\t\t\t\t\tmode: 'shields.io',\r\n\t\t\t\t\t\tleftText: 'Added Prepared Queue',\r\n\t\t\t\t\t\trightText: commandObj[command].options.queuePrepare,\r\n\t\t\t\t\t\trightBgColor: '#ffef6c',\r\n\t\t\t\t\t\trightTextColor: '#1a1a1a'\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\t/*\r\n\t\t *  Trigger a queue process\r\n\t\t */\r\n\t\tself.queueProcess();\r\n\t}\r\n\r\n\t/**\r\n\t * Execute a queue that is loaded into prepare\r\n\t *\r\n\t * @param prepareName {string} Name of the prepared queue\r\n\t * @param json {object}\r\n\t * @param silentFail {boolean}\r\n\t */\r\n\texecute(prepareName, json, silentFail) {\r\n\t\tlet self = this;\r\n\t\tif (self.prepare[prepareName] !== undefined) {\r\n\t\t\t/*\r\n\t\t\t * Take a copy of the prepared command as we need to alter it\r\n\t\t\t * and possibly pass new params then add it to the queue\r\n\t\t\t */\r\n\t\t\tlet dereferenceCommand = self.deepCopy(self.prepare[prepareName]);\r\n\t\t\tdereferenceCommand.options.queueRun = self.DEFINE.COMMAND_INSTANT;\r\n\t\t\tif (json !== undefined)\r\n\t\t\t\tdereferenceCommand.json = Object.assign(dereferenceCommand.json, json);\r\n\t\t\tself.commandsQueue.apply(self, [[dereferenceCommand]]);\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tif (silentFail !== true)\r\n\t\t\t\tself.reportError(\"Can not execute prepare [\" + prepareName + \"]\", \"The prepared queue you requested does not exist\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Force a queue processing\r\n\t *\r\n\t * This launches the actual objects using a timeout\r\n\t *\r\n\t * @param sync {boolean} - Send true to force sync mode (Really only for test mode)\r\n\t */\r\n\tqueueProcess(sync) {\r\n\t\tlet self = this;\r\n\t\t/*\r\n\t\t *  TODO Only implementing basic queue here for testing. Concepts of active componets etc need importing\r\n\t\t *  for moho\r\n\t\t */\r\n\t\tfor (let item in self.queue) {\r\n\t\t\t/*\r\n\t\t\t *  Look for items that are QUEUE_ADDED as they need processing\r\n\t\t\t *\r\n\t\t\t */\r\n\t\t\tif (self.queue[item].state === self.DEFINE.QUEUE_ADDED) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Does this queueable exist?\r\n\t\t\t\t */\r\n\t\t\t\tif (self.queueables[self.queue[item].queueable]) {\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * Check if we have any registers that need setting\r\n\t\t\t\t\t */\r\n\r\n\t\t\t\t\tif (!self.queue[item].options.queueRegister || (self.queue[item].options.queueRegister && self.registers.indexOf(self.queue[item].options.queueRegister) !== -1)) {\r\n\r\n\t\t\t\t\t\t/*\r\n                         * Is it online? If not we fail silently as it may come online later\r\n                         */\r\n\t\t\t\t\t\tif (self.queueables[self.queue[item].queueable].ready) {\r\n\t\t\t\t\t\t\t/*\r\n                             * Update our state to be running\r\n                             */\r\n\t\t\t\t\t\t\tself.queue[item].state = self.DEFINE.QUEUE_RUNNING;\r\n\t\t\t\t\t\t\t/*\r\n                             * Assign a pid\r\n                             */\r\n\t\t\t\t\t\t\tif (self.queue[item].pid === undefined) {\r\n\t\t\t\t\t\t\t\tself.queue[item].pid = item;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/*\r\n                             * Check if any specific timing is needed\r\n                             */\r\n\t\t\t\t\t\t\tself.queue[item].options.queueTimer = self.queue[item].options.queueTimer || self.defaultTimer;\r\n\r\n\t\t\t\t\t\t\t/*\r\n                             *  Launch the function as a time out (so we get control back)\r\n                             */\r\n\r\n\t\t\t\t\t\t\tif (sync) {\r\n\t\t\t\t\t\t\t\tself.runningPid = item;\r\n\t\t\t\t\t\t\t\tself.queueables[self.queue[item].queueable].start.apply(self.queueables[self.queue[item].queueable], [self.queue[item].pid, self.queue[item].command, self.jsonVars(self.queue[item].json), self]);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t\t\t\t\tself.runningPid = item;\r\n\t\t\t\t\t\t\t\t\tself.queueables[self.queue[item].queueable].start.apply(self.queueables[self.queue[item].queueable], [self.queue[item].pid, self.queue[item].command, self.jsonVars(self.queue[item].json), self]);\r\n\t\t\t\t\t\t\t\t}, self.queue[item].options.queueTimer);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.reportError(\"Can not find queueable [\" + self.queue[item].queueable + \"]\", \"Have you added it to the build?\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Find a queue item by searching for its PID\r\n\t * @param pid\r\n\t * @return {*}\r\n\t */\r\n\tfindQueueByPid(pid) {\r\n\t\tlet self = this;\r\n\t\tfor (let item in self.queue) {\r\n\t\t\tif (self.queue[item].pid === pid) {\r\n\t\t\t\treturn self.queue[item];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Called by queueables to add something to our memory stack\r\n\t * @param name\r\n\t * @param value\r\n\t * @param pid\r\n\t */\r\n\tmemory(pid, value) {\r\n\t\tlet self = this;\r\n\t\tlet command = this.findQueueByPid(pid);\r\n\t\tif (command) {\r\n\t\t\tlet origin = command.options.memoryName || command.queueable + '.' + command.command;\r\n\t\t\tlet mode = self.DEFINE.MEMORY_GARBAGE;\r\n\t\t\tif (command.options.memoryMode)\r\n\t\t\t\tmode = command.options.memoryMode;\r\n\t\t\tlet memoryDetails = new Memory(pid, mode, origin, value);\r\n\t\t\twindow.memory[origin] = memoryDetails;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tthis.reportError(\"Could not set memory\", \"The memory set for pid [\" + pid + \"] could not be found\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set a queue stack item\r\n\t * @param pid\r\n\t * @param name\r\n\t * @param value\r\n\t * @return {boolean}\r\n\t */\r\n\tsetStack(pid, name, value) {\r\n\t\tlet command = this.findQueueByPid(pid);\r\n\t\tcommand.stack[name] = value;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set memory that is not associated with a running queueable (IE from the templates)\r\n\t * @param name\r\n\t * @param value\r\n\t * @param mode\r\n\t * @return {boolean}\r\n\t */\r\n\tsetMemory(name, value, mode) {\r\n\t\tlet self = this;\r\n\t\tmode = mode || self.DEFINE.MEMORY_GARBAGE;\r\n\t\tlet memoryDetails = new Memory(-1, mode, 'User', value);\r\n\t\twindow.memory[name] = memoryDetails;\r\n\t\t// Are we updating perms? If so we need to sync them\r\n\t\tif (mode == self.DEFINE.MEMORY_PERMANENT)\r\n\t\t\tself._updateMemoryPerms();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Set a register\r\n\t * @param name\r\n\t * @returns {boolean}\r\n\t */\r\n\tsetRegister(name) {\r\n\t\tif (this.registers.indexOf(name) === -1) {\r\n\t\t\tthis.registers.push(name);\r\n\t\t\tconsoleBadge.log({\r\n\t\t\t\tmode: 'shields.io',\r\n\t\t\t\tleftText: 'Register set',\r\n\t\t\t\trightText: name,\r\n\t\t\t\trightBgColor: '#69ddff',\r\n\t\t\t\trightTextColor: '#1a1a1a'\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsoleBadge.log({\r\n\t\t\t\tmode: 'shields.io',\r\n\t\t\t\tleftText: 'Register already set',\r\n\t\t\t\trightText: name,\r\n\t\t\t\trightBgColor: '#69ddff',\r\n\t\t\t\trightTextColor: '#1a1a1a'\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.queueProcess();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * delete a register\r\n\t * @param name\r\n\t * @returns {boolean}\r\n\t */\r\n\tdeleteRegister(name) {\r\n\t\tif (this.registers.indexOf(name) !== -1) {\r\n\t\t\tthis.registers.splice(this.registers.indexOf(name), 1);\r\n\t\t\tconsoleBadge.log({\r\n\t\t\t\tmode: 'shields.io',\r\n\t\t\t\tleftText: 'Register deleted',\r\n\t\t\t\trightText: name,\r\n\t\t\t\trightBgColor: '#ffef6c',\r\n\t\t\t\trightTextColor: '#1a1a1a'\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsoleBadge.log({\r\n\t\t\t\tmode: 'shields.io',\r\n\t\t\t\tleftText: 'Register does not exist for delete',\r\n\t\t\t\trightText: name,\r\n\t\t\t\trightBgColor: '#ff313e',\r\n\t\t\t\trightTextColor: '#1a1a1a'\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.queueProcess();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Delete Memory TODO clean up perms\r\n\t * @param name\r\n\t * @return {boolean}\r\n\t */\r\n\tdeleteMemory(name) {\r\n\t\tdelete window.memory[name];\r\n\t\tthis._updateMemoryPerms();\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Flush any permanent memory to cookies\r\n\t * @private\r\n\t */\r\n\t_updateMemoryPerms() {\r\n\t\tlet self = this;\r\n\t\tlet perms = [];\r\n\t\tlet date = new Date();\r\n\t\tdate.setTime(date.getTime() + (7 * 24 * 60 * 60 * 1000));\r\n\t\tlet expires = \"; expires=\" + date.toUTCString();\r\n\t\tfor (let i in window.memory) {\r\n\t\t\tif (window.memory[i].mode === self.DEFINE.MEMORY_PERMANENT) {\r\n\t\t\t\tself.setCookie('OT_' + i, window.memory[i]._store());\r\n\t\t\t\tperms.push(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\tself.setCookie('OT_INDEX', window.btoa(JSON.stringify(perms)));\r\n\t}\r\n\r\n\t/**\r\n\t * Load perm memory items from cookies\r\n\t * @private\r\n\t */\r\n\t_loadMemoryPerms() {\r\n\t\tlet self = this;\r\n\t\tlet index = self.getCookie(\"OT_INDEX\");\r\n\t\tif (index !== null) {\r\n\t\t\ttry {\r\n\t\t\t\tindex = JSON.parse(window.atob(index));\r\n\t\t\t\tfor (let i in index) {\r\n\t\t\t\t\tlet perm = JSON.parse(window.atob(self.getCookie(\"OT_\" + index[i])));\r\n\t\t\t\t\twindow.memory[index[i]] = new Memory(perm.pid, perm.mode, perm.origin, perm.value);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.error('OT_INDEX seems corrupted');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve a cookie by name\r\n\t * @param name - Cookie name\r\n\t * @returns {*}\r\n\t */\r\n\tgetCookie(name) {\r\n\t\tlet nameEQ = name + \"=\";\r\n\t\tlet ca = document.cookie.split(';');\r\n\t\tfor (let i = 0; i < ca.length; i++) {\r\n\t\t\tlet c = ca[i];\r\n\t\t\twhile (c.charAt(0) == ' ') c = c.substring(1, c.length);\r\n\t\t\tif (c.indexOf(nameEQ) == 0) return decodeURIComponent(c.substring(nameEQ.length, c.length));\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * set a cookie by name and value\r\n\t * @param name - Cookie name\r\n\t * @param value - Value of cookie\r\n\t * @returns {*}\r\n\t */\r\n\tsetCookie(name, value) {\r\n\t\tlet date = new Date();\r\n\t\tdate.setTime(date.getTime() + (7 * 24 * 60 * 60 * 1000));\r\n\t\tconst secure = window.location.href.match(/https\\:\\/\\//i);\r\n\t\tconst cookieString = `${name}=${value};expires=${date.toUTCString()} path=/;${(secure !== null ? 'Secure;' : '')} SameSite=Strict`;\r\n\t\tdocument.cookie = cookieString;\r\n\t}\r\n\r\n\t/**\r\n\t * Called at the end of a queue run to flush any garbage\r\n\t * @param pid\r\n\t */\r\n\tcleanMemory(pid) {\r\n\t\tlet self = this;\r\n\t\tfor (let i in window.memory) {\r\n\t\t\tif (window.memory[i].pid === pid && window.memory[i].mode === self.DEFINE.MEMORY_GARBAGE) {\r\n\t\t\t\twindow.memory[i] = {};\r\n\t\t\t\tdelete window.memory[i];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Is there any work to do in the queue?\r\n\t */\r\n\tisWork() {\r\n\t\tlet self = this;\r\n\t\tlet count = 0;\r\n\t\tfor (let item in self.queue) {\r\n\t\t\tif (self.queue[item].state !== self.DEFINE.QUEUE_FINISHED && self.queue[item].state !== self.DEFINE.QUEUE_ERROR)\r\n\t\t\t\tcount++;\r\n\t\t}\r\n\t\treturn count;\r\n\t}\r\n\r\n\t/**\r\n\t *  Clean up any finished queues\r\n\t */\r\n\tcleanQueue() {\r\n\t\tfor (let item in this.queue) {\r\n\t\t\tif (this.queue[item].state === this.DEFINE.QUEUE_FINISHED) {\r\n\t\t\t\tdelete this.queue[item];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *  Called to flag a queue item as finished\r\n\t *\r\n\t *  Normally hooked down from queueable this is a queue item saying I have finished in mode (see define.js)\r\n\t *\r\n\t * @param pid\r\n\t * @param mode\r\n\t */\r\n\tfinished(pid, mode, error) {\r\n\t\tlet self = this;\r\n\r\n\t\tself.queue[pid].error = error;\r\n\t\tif (self.queue[pid].state === self.DEFINE.QUEUE_RUNNING) {\r\n\t\t\t/*\r\n\t\t\t * Did the command return an error? If so we will stop this queue from further execution\r\n\t\t\t */\r\n\t\t\tif (mode == self.DEFINE.FIN_ERROR) {\r\n\t\t\t\tself.queue[pid].state = self.DEFINE.QUEUE_ERROR;\r\n\t\t\t\tself.reportError(error, 'The queueable [' + pid + '] has errored, queue put on hold');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t * Was there a warning?. This isn't serious so we just mention it to the console\r\n\t\t\t */\r\n\t\t\tif (mode == self.DEFINE.FIN_WARNING) {\r\n\t\t\t\tconsole.log('Warning: ' + error);\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t *\r\n\t\t\t * Check if this queue has commands left\r\n\t\t\t */\r\n\t\t\tif (self.queue[pid].commands !== undefined && self.queue[pid].commands.length > 0) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Move the next item in the queue down\r\n\t\t\t\t */\r\n\t\t\t\tself.queue[pid].command = self.queue[pid].commands[0].command;\r\n\t\t\t\tself.queue[pid].queueable = self.queue[pid].commands[0].queueable;\r\n\t\t\t\tself.queue[pid].json = self.queue[pid].commands[0].json;\r\n\t\t\t\tself.queue[pid].options = self.queue[pid].commands[0].options;\r\n\t\t\t\tself.queue[pid].commands.shift();\r\n\t\t\t\t/*\r\n\t\t\t\t *  Update the pid\r\n\t\t\t\t *  TODO remove this as queues need to maintain their Pid for memory\r\n\t\t\t\t */\r\n\t\t\t\t//self.queue[item].pid=self.pid;\r\n\t\t\t\t//self.pid++;\r\n\t\t\t\tself.queue[pid].state = self.DEFINE.QUEUE_ADDED;\r\n\t\t\t\t/*\r\n\t\t\t\t * Start the queue processor as we just posted a new command\r\n\t\t\t\t */\r\n\t\t\t\tself.queueProcess();\r\n\t\t\t} else {\r\n\t\t\t\tself.queue[pid].state = self.DEFINE.QUEUE_FINISHED;\r\n\t\t\t\tself.cleanMemory(self.queue[pid].pid);\r\n\t\t\t\tself.cleanQueue();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tself.reportError('Cant stop an already stopped process [' + pid + ']', 'Queue is corrupted');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This will take a command string in the format object.command({},{}); and split it down\r\n\t * into it parts as an object\r\n\t *\r\n\t * TODO no concept of the context of the command IE was it from inside a div that need binding?\r\n\t * @param command {string}\r\n\t * @return {object}\r\n\t */\r\n\tcommandParse(command, isParent) {\r\n\t\tlet self = this;\r\n\t\tlet commandObject = {\"ucid\": ++self.ucid};\r\n\t\t// Find the actual command\r\n\t\tlet commandArray = command.match(/(.*?)\\(/)[1].split('.');\r\n\t\tcommandObject.queueable = commandArray[0];\r\n\t\tcommandObject.command = commandArray[1];\r\n\t\t// Strip as we go to make follow up regex easier\r\n\t\tcommand = command.replace(/.*?\\(/, '[');\r\n\t\t// Find first json arg\r\n\r\n\t\tcommand = command.replace(/\\);$/m, ']');\r\n\t\tlet jsonArray = JSON.parse(command);\r\n\t\tif (jsonArray[0]) {\r\n\t\t\tcommandObject.json = jsonArray[0];\r\n\t\t} else {\r\n\t\t\tcommandObject.json = {};\r\n\t\t}\r\n\r\n\t\tif (jsonArray[1]) {\r\n\t\t\tcommandObject.options = jsonArray[1];\r\n\t\t} else {\r\n\t\t\tcommandObject.options = {};\r\n\t\t}\r\n\t\t/*\r\n\t\t * Set our default options if they haven't been set\r\n\t\t *\r\n\t\t * We must always have a queueRun object if its not set (normally by instant) then its either an event in\r\n\t\t * which case it must be a parent or failing then its a sub\r\n\t\t *\r\n \t\t */\r\n\t\tcommandObject.options.queueRun = commandObject.options.queueRun || (isParent ? self.DEFINE.COMMAND_EVENT : self.DEFINE.COMMAND_SUB);\r\n\t\tcommandObject.state = self.DEFINE.QUEUE_ADDED;\r\n\t\treturn commandObject;\r\n\t}\r\n\r\n\t/**\r\n\t * Render some text/html to the dom\r\n\t * @param domObject {object} - The object in the dom to write to\r\n\t * @param text {string} - The text/HTML to write\r\n\t * @param mode {number} - Mode to use while writing see define.js\r\n\t * @return {boolean}\r\n\t */\r\n\trenderToDom(domObject, text, mode) {\r\n\t\tlet self = this;\r\n\t\tmode = mode || self.DEFINE.RENDER_INSERT;\r\n\t\tswitch (mode) {\r\n\t\t\tcase self.DEFINE.RENDER_INSERT:\r\n\t\t\t\tdomObject.innerHTML = text;\r\n\t\t\t\tbreak;\r\n\t\t\tcase self.DEFINE.RENDER_APPEND:\r\n\t\t\t\tdomObject.insertAdjacentHTML('beforeend', text);\r\n\t\t\t\tbreak;\r\n\t\t\tcase self.DEFINE.RENDER_REPLACE:\r\n\t\t\t\tconst html = new DOMParser().parseFromString(text, 'text/html');\r\n\t\t\t\tdomObject.parentNode.replaceChild(html.body.firstChild, domObject);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Finds elements in the dom of an iframe (or current document) using the query selector\r\n\t * @param iframeTarget Iframe or false\r\n\t * @param elementTarget query\r\n\t * @param errorTrap {boolean} Trap any errors?\r\n\t * @return {object|false}\r\n\t */\r\n\tgetIframeElements(iframeTarget, elementTarget, errorTrap = true) {\r\n\t\tlet self = this;\r\n\t\tlet iframe = document.getElementById(iframeTarget);\r\n\t\tif (!iframe)\r\n\t\t\tiframe = document;\r\n\t\telse\r\n\t\t\tiframe = iframe.contentDocument || iframe.contentWindow.document;\r\n\t\tlet element = iframe.querySelectorAll(elementTarget);\r\n\t\t/*\r\n\t\t * IE11 BUG, check for non arrays and attempt to convert\r\n\t\t */\r\n\t\tif (!Array.isArray(element)) {\r\n\t\t\telement = Array.from(element);\r\n\t\t}\r\n\t\tif (element !== null)\r\n\t\t\treturn element;\r\n\t\tif (errorTrap)\r\n\t\t\tself.reportError('Dom Element find failed for [' + elementTarget + '] iframe [' + iframeTarget + ']', 'Follow up calls that rely on this will fail');\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Finds an element in the dom using the jquery formant IE #id .class tag (will only ever return one)\r\n\t * @param elementTarget\r\n\t * @param errorTrap {boolean} Trap any errors?\r\n\t * @return {object|false}\r\n\t */\r\n\tgetElement(elementTarget, errorTrap = true) {\r\n\t\tlet self = this;\r\n\t\tlet element = document.querySelector(elementTarget);\r\n\t\tif (element !== null)\r\n\t\t\treturn element;\r\n\t\tif (errorTrap)\r\n\t\t\tself.reportError('Dom Element find failed for [' + elementTarget + ']', 'Follow up calls that rely on this will fail');\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Finds an element(s) in the dom using the jquery formant IE #id .class tag (can return one or more)\r\n\t * @param elementTarget\r\n\t * @return {object|false}\r\n\t */\r\n\tgetElements(elementTarget) {\r\n\t\tlet self = this;\r\n\t\tlet element = document.querySelectorAll(elementTarget);\r\n\t\t/*\r\n\t\t * IE11 BUG, check for non arrays and attempt to convert\r\n\t\t */\r\n\t\tif (!Array.isArray(element)) {\r\n\t\t\telement = Array.from(element);\r\n\t\t}\r\n\t\tif (element !== null)\r\n\t\t\treturn element;\r\n\t\tself.reportError('Dom Element(s) find failed for [' + elementTarget + ']', 'Follow up calls that rely on this will fail');\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *  Show current queue status in the console DEBUG function\r\n\t */\r\n\tshow() {\r\n\t\tlet self = this;\r\n\t\tif(self.queue.length>0) {\r\n\t\t\tfor (let i in self.queue) {\r\n\t\t\t\tlet indent = 0;\r\n\t\t\t\tself.prettyCommandObject(self.queue[i], indent);\r\n\t\t\t\tfor (let j in self.queue[i].commands) {\r\n\t\t\t\t\tindent++;\r\n\t\t\t\t\tself.prettyCommandObject(self.queue[i].commands[j], indent);\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.log(`Queue is empty, pid is ${self.pid}`);\r\n\t\t}\r\n\t}\r\n\r\n\tconsoleBadge(options) {\r\n\t\tconsoleBadge.log(options);\r\n\t}\r\n\r\n\t/**\r\n\t * Make a pretty version of the currrent commandObject and dump it to the console\r\n\t * @param commandObject\r\n\t * @param indent\r\n\t */\r\n\tprettyCommandObject(commandObject, indent) {\r\n\t\tlet self = this;\r\n\t\tlet string = '';\r\n\t\tfor (var i = 0; i < indent; i++) {\r\n\t\t\tstring += ' ';\r\n\t\t}\r\n\t\tlet color = self.DEFINE.CONSOLE_COL_GREEN;\r\n\t\tswitch (commandObject.state) {\r\n\t\t\tcase self.DEFINE.QUEUE_FINISHED:\r\n\t\t\t\tcolor = self.DEFINE.CONSOLE_COL_AMBER;\r\n\t\t\t\tbreak;\r\n\t\t\tcase self.DEFINE.QUEUE_ERROR:\r\n\t\t\t\tcolor = self.DEFINE.CONSOLE_COL_RED;\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\t\tstring += commandObject.queueable + '.' + commandObject.command + '(' + JSON.stringify(commandObject.json) + ',' + JSON.stringify(commandObject.options) + ');'\r\n\t\tconsole.log('%c ' + string, color);\r\n\t\tif (commandObject.error)\r\n\t\t\tconsole.log('%c  Stopped: ' + commandObject.error, self.DEFINE.CONSOLE_COL_AMBER);\r\n\t}\r\n\r\n\t/**\r\n\t * Report an error to the console, adds various internal stats\r\n\t * @param error\r\n\t * @param message\r\n\t */\r\n\treportError(error, message) {\r\n\t\tconsoleBadge.log({\r\n\t\t\tmode: 'shields.io',\r\n\t\t\tleftText: error,\r\n\t\t\trightText: message,\r\n\t\t\trightBgColor: '#ff0707',\r\n\t\t\trightTextColor: '#1a1a1a'\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Deep copy and object IE remove references\r\n\t * @param inputObject\r\n\t * @return {any}\r\n\t */\r\n\tdeepCopy(inputObject) {\r\n\t\treturn JSON.parse(JSON.stringify(inputObject));\r\n\t}\r\n\r\n\t/**\r\n\t * Map an object with sub objects using a map function\r\n\t * @param obj\r\n\t * @param mapFunction\r\n\t */\r\n\tobjectMap(obj, mapFunction) {\r\n\t\tfor (let i in obj) {\r\n\t\t\tif (typeof obj[i] === 'object') {\r\n\t\t\t\tthis.objectMap(obj[i], mapFunction);\r\n\t\t\t} else {\r\n\t\t\t\tobj[i] = mapFunction(obj[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds classes for browser type to body for use in CSS\r\n\t */\r\n\tbrowserClasses() {\r\n\t\tlet self = this;\r\n\t\tlet bodyElement = self.getElement(\"body\");\r\n\t\tif (!!window.MSInputMethodContext && !!document.documentMode)\r\n\t\t\tbodyElement.classList.add(\"ie11\");\r\n\t\telse\r\n\t\t\tbodyElement.classList.add(\"notie11\");\r\n\t\tif (navigator.vendor.match(/apple/i))\r\n\t\t\tbodyElement.classList.add(\"safari\");\r\n\t\tif (navigator.vendor.match(/google/i))\r\n\t\t\tbodyElement.classList.add(\"chrome\");\r\n\t\tif (navigator.userAgent.indexOf(\"Edge\") > -1)\r\n\t\t\tbodyElement.classList.add(\"edge\");\r\n\t\tif (navigator.userAgent.toLowerCase().indexOf('firefox') > -1)\r\n\t\t\tbodyElement.classList.add(\"firefox\");\r\n\t}\r\n\r\n\t/**\r\n\t * Get any params from the url in json format\r\n\t */\r\n\turlToJson() {\r\n\t\tlet url = location.search;\r\n\t\tlet query = url.substr(1);\r\n\t\tlet result = {};\r\n\t\tquery.split(\"&\").forEach(function (part) {\r\n\t\t\tlet item = part.split(\"=\");\r\n\t\t\tresult[item[0]] = decodeURIComponent(item[1]);\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t *  Work in progress,\r\n\t */\r\n\tmenu() {\r\n\t\tqueue.setMemory('developer', !this.developerMode, \"Permanent\");\r\n\t\talert('DEVELOPER MODE: ' + this.developerMode)\r\n\t\t//document.body.innerHTML+='<div id=\"ourthingsMenu\"><button onclick=\"queue.toggleDebug()\">DEBUG MODE</button></div>';\r\n\t}\r\n\r\n}\r\n\r\nexport default Queue;",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Queue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "class",
    "name": "Queue",
    "memberof": "ourthings/Queue.js",
    "static": true,
    "longname": "ourthings/Queue.js~Queue",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Queue.js",
    "importStyle": "Queue",
    "description": "",
    "examples": [
      "let queue = new Queue();"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\nThe main queue class"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 87,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#constructor",
    "access": "public",
    "description": "Class constructor",
    "lineNumber": 21
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "handleFetchErrors",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#handleFetchErrors",
    "access": "public",
    "description": "Error Handler for fetch calls",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "{object} - Fetch response object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "checkQueueable",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#checkQueueable",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "capitalizeFirstLetter",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#capitalizeFirstLetter",
    "access": "public",
    "description": "Helper function to upcase first letter of string",
    "lineNumber": 217,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "templateLoader",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#templateLoader",
    "access": "public",
    "description": "Loads templates from the template stack. Recursively calls self until stack is empty",
    "lineNumber": 225,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "templateProcessor",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#templateProcessor",
    "access": "public",
    "description": "Template processor\nTakes a template, process it and places into the dom",
    "lineNumber": 345,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "templateId",
        "description": "{string} - ID of the template"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "targetId",
        "description": "{string|false} - Place in the dom the put the result. In the event of false we process without dom"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "string"
      ],
      "spread": false,
      "description": "success status"
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "templateVars",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#templateVars",
    "access": "public",
    "description": "Process the template looking for {{}} instances",
    "lineNumber": 392,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "template",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "jsonVars",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#jsonVars",
    "access": "public",
    "description": "Process a json object and replace {{!}} tags + # tags",
    "lineNumber": 498,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "varsParser",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#varsParser",
    "access": "public",
    "description": "parse a var string\n\nTODO This is massively insecure. If as user can input {{}} into a form and have it displayed\nto other users they can take over. We either clean all input as you would with <script> etc tags or we\nmanually write a parser.",
    "lineNumber": 552,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "parseString",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "templateParse",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#templateParse",
    "access": "public",
    "description": "Takes a template and runs any template commands contained in it to create a HTML template\nready to be put into the dom",
    "lineNumber": 575,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "template",
        "description": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "commandsBind",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#commandsBind",
    "access": "public",
    "description": "Bind the events to the dom based on the command Object",
    "lineNumber": 626,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "commandObj",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "commandsQueue",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#commandsQueue",
    "access": "public",
    "description": "Take the commands array with command objects in it and add them to the queue *if* they are\nmarked as instant. IE ready to execute",
    "lineNumber": 683,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "commandObj",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "execute",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#execute",
    "access": "public",
    "description": "Execute a queue that is loaded into prepare",
    "lineNumber": 735,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "prepareName",
        "description": "{string} Name of the prepared queue"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "{object}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "silentFail",
        "description": "{boolean}"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "queueProcess",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#queueProcess",
    "access": "public",
    "description": "Force a queue processing\n\nThis launches the actual objects using a timeout",
    "lineNumber": 763,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "sync",
        "description": "{boolean} - Send true to force sync mode (Really only for test mode)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "findQueueByPid",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#findQueueByPid",
    "access": "public",
    "description": "Find a queue item by searching for its PID",
    "lineNumber": 832,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "memory",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#memory",
    "access": "public",
    "description": "Called by queueables to add something to our memory stack",
    "lineNumber": 848,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "setStack",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#setStack",
    "access": "public",
    "description": "Set a queue stack item",
    "lineNumber": 872,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "setMemory",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#setMemory",
    "access": "public",
    "description": "Set memory that is not associated with a running queueable (IE from the templates)",
    "lineNumber": 885,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "setRegister",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#setRegister",
    "access": "public",
    "description": "Set a register",
    "lineNumber": 901,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "deleteRegister",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#deleteRegister",
    "access": "public",
    "description": "delete a register",
    "lineNumber": 929,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "deleteMemory",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#deleteMemory",
    "access": "public",
    "description": "Delete Memory TODO clean up perms",
    "lineNumber": 957,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "_updateMemoryPerms",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#_updateMemoryPerms",
    "access": "private",
    "description": "Flush any permanent memory to cookies",
    "lineNumber": 967,
    "params": [],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "_loadMemoryPerms",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#_loadMemoryPerms",
    "access": "private",
    "description": "Load perm memory items from cookies",
    "lineNumber": 986,
    "params": [],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "getCookie",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#getCookie",
    "access": "public",
    "description": "Retrieve a cookie by name",
    "lineNumber": 1008,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Cookie name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "setCookie",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#setCookie",
    "access": "public",
    "description": "set a cookie by name and value",
    "lineNumber": 1025,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Cookie name"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Value of cookie"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "cleanMemory",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#cleanMemory",
    "access": "public",
    "description": "Called at the end of a queue run to flush any garbage",
    "lineNumber": 1037,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "isWork",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#isWork",
    "access": "public",
    "description": "Is there any work to do in the queue?",
    "lineNumber": 1052,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "cleanQueue",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#cleanQueue",
    "access": "public",
    "description": " Clean up any finished queues",
    "lineNumber": 1065,
    "params": [],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "finished",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#finished",
    "access": "public",
    "description": " Called to flag a queue item as finished\n\n Normally hooked down from queueable this is a queue item saying I have finished in mode (see define.js)",
    "lineNumber": 1081,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "commandParse",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#commandParse",
    "access": "public",
    "description": "This will take a command string in the format object.command({},{}); and split it down\ninto it parts as an object\n\nTODO no concept of the context of the command IE was it from inside a div that need binding?",
    "lineNumber": 1145,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "renderToDom",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#renderToDom",
    "access": "public",
    "description": "Render some text/html to the dom",
    "lineNumber": 1188,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "domObject",
        "description": "{object} - The object in the dom to write to"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "{string} - The text/HTML to write"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "{number} - Mode to use while writing see define.js"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "getIframeElements",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#getIframeElements",
    "access": "public",
    "description": "Finds elements in the dom of an iframe (or current document) using the query selector",
    "lineNumber": 1213,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "iframeTarget",
        "description": "Iframe or false"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "elementTarget",
        "description": "query"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "errorTrap",
        "description": "{boolean} Trap any errors?"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object",
        "false"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "getElement",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#getElement",
    "access": "public",
    "description": "Finds an element in the dom using the jquery formant IE #id .class tag (will only ever return one)",
    "lineNumber": 1240,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "elementTarget",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "errorTrap",
        "description": "{boolean} Trap any errors?"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object",
        "false"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "getElements",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#getElements",
    "access": "public",
    "description": "Finds an element(s) in the dom using the jquery formant IE #id .class tag (can return one or more)",
    "lineNumber": 1255,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "elementTarget",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object",
        "false"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "show",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#show",
    "access": "public",
    "description": " Show current queue status in the console DEBUG function",
    "lineNumber": 1274,
    "params": [],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "consoleBadge",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#consoleBadge",
    "access": "public",
    "description": null,
    "lineNumber": 1291,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "prettyCommandObject",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#prettyCommandObject",
    "access": "public",
    "description": "Make a pretty version of the currrent commandObject and dump it to the console",
    "lineNumber": 1300,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "commandObject",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "indent",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "reportError",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#reportError",
    "access": "public",
    "description": "Report an error to the console, adds various internal stats",
    "lineNumber": 1327,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "deepCopy",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#deepCopy",
    "access": "public",
    "description": "Deep copy and object IE remove references",
    "lineNumber": 1342,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inputObject",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "objectMap",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#objectMap",
    "access": "public",
    "description": "Map an object with sub objects using a map function",
    "lineNumber": 1351,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "mapFunction",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "browserClasses",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#browserClasses",
    "access": "public",
    "description": "Adds classes for browser type to body for use in CSS",
    "lineNumber": 1364,
    "params": [],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "urlToJson",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#urlToJson",
    "access": "public",
    "description": "Get any params from the url in json format",
    "lineNumber": 1384,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "menu",
    "memberof": "ourthings/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queue.js~Queue#menu",
    "access": "public",
    "description": " Work in progress,",
    "lineNumber": 1398,
    "params": [],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "ourthings/Queueable/Api.js",
    "content": "/** @module Api */\r\nimport Queueable from \"../Queueable\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * API connection methods\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * //\r\n *\r\n */\r\n\r\nconst MAX_BYTES = 50000;\r\n\r\nexport default class Api extends Queueable {\r\n\r\n\t/**\r\n\t * Make a GET request\r\n\t *\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.url - URL to make GET request to\r\n\t * @param {string} json.contentType=application/json - Content type to request\r\n\t * @param {string} json.header - header object to send (note Content-Type is overwritten by above setting)\r\n\t * @param {string} json.name - name of error queue to use\r\n\t */\r\n\tget(pid,json) {\r\n\t\tlet self=this;\r\n\t\tjson.contentType=json.contentType||'application/json';\r\n\t\tjson.name=json.name||'apiError';\r\n\t\tlet headers=json.headers||{};\r\n\t\theaders['Content-Type']=json.contentType||'application/json';\r\n\t\tfetch(json.url, {\r\n\t\t\theaders: headers,\r\n\t\t})\r\n\t\t\t.then(function(response) {\r\n\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\tself.queue.setMemory('apiErrorDetail',{\"json\":json,\"error\":response},self.queue.DEFINE.MEMORY_SESSION);\r\n\t\t\t\t\tself.queue.execute(json.name);\r\n\t\t\t\t}\r\n\t\t\t\tself.queue.handleFetchErrors(response);\r\n\t\t\t\treturn response;\r\n\t\t\t})\r\n\t\t\t.then(function(response) {\r\n\t\t\t\tswitch(json.contentType) {\r\n\t\t\t\t\tcase 'application/json':\r\n\t\t\t\t\t\treturn response.json();\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn response.text();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then(function (response) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Convert the response to json and start the loader\r\n\t\t\t\t */\r\n\t\t\t\tself.set(pid,response);\r\n\t\t\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\r\n\t\t\t})\r\n\t\t\t.catch(function (error) {\r\n\t\t\t\tself.queue.setMemory('apiErrorDetail',{\"json\":json,\"error\":error},self.queue.DEFINE.MEMORY_SESSION);\r\n\t\t\t\tself.queue.execute(json.name);\r\n\t\t\t\tconsole.info(self.queue.DEFINE.CONSOLE_LINE);\r\n\t\t\t\tconsole.error('Error:', error);\r\n\t\t\t\tconsole.info(\"api.get Warning this error is probably fatal\");\r\n\t\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Make a POST request\r\n\t *\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.url - URL to make GET request to\r\n\t * @param {string} json.contentType=application/json - Content type to request\r\n\t * @param {string} json.header - header object to send (note Content-Type is overwritten by above setting)\r\n\t * @param {string} json.body - object to send JSON.stringify is applies to this\r\n\t * @param {string} json.name - name of error queue to use\r\n\t */\r\n\tpost(pid,json) {\r\n\t\tlet self=this;\r\n\t\tjson.contentType=json.contentType||'application/json';\r\n\t\tjson.name=json.name||'apiError';\r\n\t\tlet headers=json.headers||{};\r\n\t\theaders['Content-Type']=json.contentType||'application/json';\r\n\t\tfetch(json.url, {\r\n\t\t\theaders: headers,\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: JSON.stringify(json.body)\r\n\t\t})\r\n\t\t\t.then(function(response) {\r\n\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\tself.queue.setMemory('apiErrorDetail',{\"json\":json,\"error\":response},self.queue.DEFINE.MEMORY_SESSION);\r\n\t\t\t\t\tself.queue.execute(json.name);\r\n\t\t\t\t}\r\n\t\t\t\tself.queue.handleFetchErrors(response);\r\n\t\t\t\treturn response;\r\n\t\t\t})\r\n\t\t\t.then(function(response) {\r\n\t\t\t\tswitch(json.contentType) {\r\n\t\t\t\t\tcase 'application/json':\r\n\t\t\t\t\t\treturn response.json();\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn response.text();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then(function (response) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Convert the response to json and start the loader\r\n\t\t\t\t */\r\n\t\t\t\tself.set(pid,response);\r\n\t\t\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\r\n\t\t\t})\r\n\t\t\t.catch(function (error) {\r\n\t\t\t\tself.queue.setMemory('apiErrorDetail',{\"json\":json,\"error\":error},self.queue.DEFINE.MEMORY_SESSION);\r\n\t\t\t\tself.queue.execute(json.name);\r\n\t\t\t\tconsole.info(self.queue.DEFINE.CONSOLE_LINE);\r\n\t\t\t\tconsole.error('Error:', error);\r\n\t\t\t\tconsole.info(\"api.post Warning this error is probably fatal\");\r\n\t\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Make a PUT request\r\n\t *\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.url - URL to make PUT request to\r\n\t * @param {string} json.contentType=application/json - Content type to request\r\n\t * @param {string} json.header - header object to send (note Content-Type is overwritten by above setting)\r\n\t * @param {string} json.body - object to send JSON.stringify is applies to this\r\n\t * @param {string} json.name - name of error queue to use\r\n\t */\r\n\tput(pid,json) {\r\n\t\tlet self=this;\r\n\t\tjson.contentType=json.contentType||'image/png';\r\n\t\tjson.name=json.name||'apiError';\r\n\t\tlet headers=json.headers||{};\r\n\t\theaders['Content-Type']=json.contentType;\r\n\t\tfetch(json.url, {\r\n\t\t\theaders: headers,\r\n\t\t\tmethod: 'PUT',\r\n\t\t\tbody: window.atob(json.body)\r\n\t\t})\r\n\t\t\t.then(function(response) {\r\n\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\tself.queue.setMemory('apiErrorDetail',{\"json\":json,\"error\":response},self.queue.DEFINE.MEMORY_SESSION);\r\n\t\t\t\t\tself.queue.execute(json.name);\r\n\t\t\t\t}\r\n\t\t\t\tself.queue.handleFetchErrors(response);\r\n\t\t\t\treturn response;\r\n\t\t\t})\r\n\t\t\t.then(function(response) {\r\n\t\t\t\tswitch(json.contentType) {\r\n\t\t\t\t\tcase 'application/json':\r\n\t\t\t\t\t\treturn response.json();\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn response.text();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then(function (response) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Convert the response to json and start the loader\r\n\t\t\t\t */\r\n\t\t\t\tself.set(pid,response);\r\n\t\t\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\r\n\t\t\t})\r\n\t\t\t.catch(function (error) {\r\n\t\t\t\tself.queue.setMemory('apiErrorDetail',{\"json\":json,\"error\":error},self.queue.DEFINE.MEMORY_SESSION);\r\n\t\t\t\tself.queue.execute(json.name);\r\n\t\t\t\tconsole.info(self.queue.DEFINE.CONSOLE_LINE);\r\n\t\t\t\tconsole.error('Error:', error);\r\n\t\t\t\tconsole.info(\"api.put Warning this error is probably fatal\");\r\n\t\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new websocket\r\n\t *\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.url - URL to connect websocket too\r\n\t * @param {string} json.action - What json param will contain the 'action' router\r\n\t * @param {string} json.queues - Array of {action:\"action\", queue:\"queue\" }\r\n\r\n\t */\r\n\twebsocketInit(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet options=Object.assign({\r\n\t\t\t\"url\":\"ws://localhost\",\r\n\t\t\t\"queue\":\"queue\",\r\n\t\t\t\"queues\":{}\r\n\t\t},json);\r\n\t\tself.frames={};\r\n\t\tself.bulk=[];\r\n\t\tself.bulkQueue='bulkQueue';\r\n\t\tself.socket = new WebSocket(options.url);\r\n\t\tself.socket.onopen = function(event) {\r\n\t\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t\t};\r\n\t\tself.socket.onmessage = function(event) {\r\n\t\t\tlet stack=[];\r\n\t\t\tlet jsonData=JSON.parse(event.data);\r\n\r\n\t\t\t/*\r\n\t\t\t * Is this part of a multi packet?\r\n\t\t\t *\r\n\t\t\t * For AWS websockets size is limited so we split packets down into frames IE:\r\n\t\t\t *\r\n\t\t\t * { frame: 1, totalFrames: 10, data: \"BASE64\" }\r\n\t\t\t *\r\n\t\t\t * This decodes those frames, you will need to implement the split in your AWS websocket code\r\n\t\t\t */\r\n\t\t\tif(jsonData['frame']) {\r\n\t\t\t\tif(self.frames[jsonData['uuid']]===undefined) {\r\n\t\t\t\t\tself.frames[jsonData['uuid']]={\"total\":0,data:new Array(jsonData['frame']['totalFrames'])};\r\n\t\t\t\t}\r\n\t\t\t\tself.frames[jsonData['uuid']].data[jsonData['frame']]=atob(jsonData['data']);\r\n\t\t\t\tself.frames[jsonData['uuid']].total++;\r\n\t\t\t\tif(self.frames[jsonData['uuid']].total===jsonData['totalFrames']) {\r\n\t\t\t\t\tjsonData=JSON.parse(self.frames[jsonData['uuid']].data.join(''));\r\n\t\t\t\t\tdeployEvent();\r\n\t\t\t\t\tdelete self.frames[jsonData['uuid']];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdeployEvent();\r\n\t\t\t}\r\n\r\n\t\t\tfunction deployEvent() {\r\n\t\t\t\t/*\r\n\t\t\t\t * We push data to the stack for anyone using stack mode\r\n\t\t\t\t */\r\n\t\t\t\tif (memory[`wsStack_${jsonData[options.queue]}`])\r\n\t\t\t\t\tstack = memory[`wsStack_${jsonData[options.queue]}`].value;\r\n\t\t\t\tstack.push(jsonData);\r\n\t\t\t\tself.queue.setMemory(`wsStack_${jsonData[options.queue]}`, stack, self.queue.DEFINE.MEMORY_SESSION);\r\n\t\t\t\t/*\r\n\t\t\t\t * Set our normal memory (not multiple thread safe)\r\n\t\t\t\t */\r\n\t\t\t\tself.queue.setMemory(jsonData[options.queue], jsonData, self.queue.DEFINE.MEMORY_SESSION);\r\n\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * Do we need to trigger event? If we have bulk calls coming in then only if its the last\r\n\t\t\t\t */\r\n\t\t\t\tlet wasBulk=false;\r\n\t\t\t\tfor(let i in self.bulk) {\r\n\t\t\t\t\tif(self.bulk[i][options.queue]===jsonData[options.queue]) {\r\n\t\t\t\t\t\tself.bulk.splice(i, 1);\r\n\t\t\t\t\t\twasBulk=true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(wasBulk===false)\r\n\t\t\t\t\tself.queue.execute(jsonData[options.queue]);\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(wasBulk===true&&self.bulk.length===0) {\r\n\t\t\t\t\t\tself.queue.execute(self.bulkQueue);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tself.socket.onclose = function(event) {\r\n\t\t\tself.queue.setMemory('wsCloseDetails', event, self.queue.DEFINE.MEMORY_SESSION);\r\n\t\t\tself.queue.execute(\"wsClose\");\r\n\t\t};\r\n\r\n\t\tself.socket.onerror = function(event) {\r\n\t\t\tself.queue.setMemory('wsErrorDetails', event, self.queue.DEFINE.MEMORY_SESSION);\r\n\t\t\tself.queue.execute(\"wsError\");\r\n\t\t};\r\n\t}\r\n\r\n\twebsocketPop(pid,json) {\r\n\t\tlet options=Object.assign({\r\n\t\t\t\"prefix\":\"ws://localhost\",\r\n\t\t\t\"queue\":\"queue\",\r\n\t\t\t\"queues\":{}\r\n\t\t},json);\r\n\t\tthis.queue.setStack(pid,options.queue,memory[`wsStack_${json.queue}`].value.pop());\r\n\t\tthis.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Send a json message down the websocket\r\n\t *\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.message - JSON message to send\r\n\t * @param {string} json.bulk - Bulk messages\r\n\t * @param {string} json.bulk - Bulk bulkQueue\r\n\t */\r\n\twebsocketSend(pid,json) {\r\n\t\tlet self=this;\r\n\t\tif(json.debug===true)\r\n\t\t\tconsole.log(json);\r\n\t\tif(json.bulk) {\r\n\t\t\t/*\r\n\t\t\t * Bulk mode, we are sending lots of requests and return triggers only work when we get it all back\r\n\t\t\t */\r\n\t\t\tself.bulk=json.bulk;\r\n\t\t\tself.bulkQueue=json.bulkQueue;\r\n\t\t\tfor(let i in self.bulk) {\r\n\t\t\t\tself._websocketSendActual(self.bulk[i])\r\n\t\t\t\t//self.socket.send(JSON.stringify(self.bulk[i]));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t//self.socket.send(JSON.stringify(json.message));\r\n\t\t\tself._websocketSendActual(json.message);\r\n\t\t}\r\n\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\r\n\t_websocketSendActual(json) {\r\n\t\tlet self=this;\r\n\t\tself.currentPacket = 0;\r\n\t\tself.totalPackets = 0;\r\n\t\tself.packetArray = [];\r\n\t\tself.uuid=uuidv4();\r\n\t\tconst payload=JSON.stringify(json);\r\n\t\tif (payload.length > MAX_BYTES) {\r\n\t\t\tself.totalPackets = Math.ceil(payload.length / MAX_BYTES);\r\n\t\t\tfor (let i = 0; i < self.totalPackets; i++) {\r\n\t\t\t\tlet loc = i * MAX_BYTES;\r\n\t\t\t\tlet sub = payload.slice(loc, MAX_BYTES + loc);\r\n\t\t\t\tself.packetArray.push(sub);\r\n\t\t\t}\r\n\t\t\tself._websocketSendPacket();\r\n\t\t} else {\r\n\t\t\ttry {\r\n\t\t\t\tself.socket.send(payload);\r\n\t\t\t} catch(event) {\r\n\t\t\t\tself.queue.setMemory('wsErrorDetails', event, self.queue.DEFINE.MEMORY_SESSION);\r\n\t\t\t\tself.queue.execute(\"wsError\");\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_websocketSendPacket() {\r\n\t\tlet self=this;\r\n\t\t/*\r\n\t\t * more work?\r\n\t\t */\r\n\t\tif (self.currentPacket < self.totalPackets) {\r\n\t\t\tlet packet = btoa(self.packetArray.shift());\r\n\t\t\tself.currentPacket++;\r\n\t\t\t//console.log(`packet:${self.currentPacket}-${self.totalPackets} Size: ${packet.length}`);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tself.socket.send(JSON.stringify({\r\n\t\t\t\t\t\"frame\": self.currentPacket,\r\n\t\t\t\t\t\"totalFrames\": self.totalPackets,\r\n\t\t\t\t\t\"uuid\": self.uuid,\r\n\t\t\t\t\t\"data\": packet\r\n\t\t\t\t}));\r\n\t\t\t} catch(event) {\r\n\t\t\t\tself.queue.setMemory('wsErrorDetails', event, self.queue.DEFINE.MEMORY_SESSION);\r\n\t\t\t\tself.queue.execute(\"wsError\");\r\n\t\t\t}\r\n\t\t\tsetTimeout(function() {self._websocketSendPacket();},100);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Queueable/Api.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "MAX_BYTES",
    "memberof": "ourthings/Queueable/Api.js",
    "static": true,
    "longname": "ourthings/Queueable/Api.js~MAX_BYTES",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/Api.js",
    "importStyle": null,
    "description": "",
    "examples": [
      "//"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\nAPI connection methods"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "class",
    "name": "Api",
    "memberof": "ourthings/Queueable/Api.js",
    "static": true,
    "longname": "ourthings/Queueable/Api.js~Api",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/Api.js",
    "importStyle": "Api",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "interface": false,
    "extends": [
      "ourthings/Queueable.js~Queueable"
    ]
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "get",
    "memberof": "ourthings/Queueable/Api.js~Api",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Api.js~Api#get",
    "access": "public",
    "description": "Make a GET request",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.url",
        "description": "URL to make GET request to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "application/json",
        "defaultRaw": "application/json",
        "name": "json.contentType",
        "description": "Content type to request"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.header",
        "description": "header object to send (note Content-Type is overwritten by above setting)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "name of error queue to use"
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "post",
    "memberof": "ourthings/Queueable/Api.js~Api",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Api.js~Api#post",
    "access": "public",
    "description": "Make a POST request",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.url",
        "description": "URL to make GET request to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "application/json",
        "defaultRaw": "application/json",
        "name": "json.contentType",
        "description": "Content type to request"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.header",
        "description": "header object to send (note Content-Type is overwritten by above setting)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.body",
        "description": "object to send JSON.stringify is applies to this"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "name of error queue to use"
      }
    ],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "put",
    "memberof": "ourthings/Queueable/Api.js~Api",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Api.js~Api#put",
    "access": "public",
    "description": "Make a PUT request",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.url",
        "description": "URL to make PUT request to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "application/json",
        "defaultRaw": "application/json",
        "name": "json.contentType",
        "description": "Content type to request"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.header",
        "description": "header object to send (note Content-Type is overwritten by above setting)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.body",
        "description": "object to send JSON.stringify is applies to this"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "name of error queue to use"
      }
    ],
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "websocketInit",
    "memberof": "ourthings/Queueable/Api.js~Api",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Api.js~Api#websocketInit",
    "access": "public",
    "description": "Create a new websocket",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.url",
        "description": "URL to connect websocket too"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.action",
        "description": "What json param will contain the 'action' router"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.queues",
        "description": "Array of {action:\"action\", queue:\"queue\" }"
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "websocketPop",
    "memberof": "ourthings/Queueable/Api.js~Api",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Api.js~Api#websocketPop",
    "access": "public",
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "websocketSend",
    "memberof": "ourthings/Queueable/Api.js~Api",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Api.js~Api#websocketSend",
    "access": "public",
    "description": "Send a json message down the websocket",
    "lineNumber": 304,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.message",
        "description": "JSON message to send"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.bulk",
        "description": "Bulk messages"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.bulk",
        "description": "Bulk bulkQueue"
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "_websocketSendActual",
    "memberof": "ourthings/Queueable/Api.js~Api",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Api.js~Api#_websocketSendActual",
    "access": "private",
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "params": [
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "_websocketSendPacket",
    "memberof": "ourthings/Queueable/Api.js~Api",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Api.js~Api#_websocketSendPacket",
    "access": "private",
    "description": null,
    "lineNumber": 352,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "ourthings/Queueable/Browser.js",
    "content": "/** @module ourthings/Queueable/Browser */\r\nimport Queueable from \"../Queueable\";\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Browser Functions\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * //\r\n *\r\n */\r\nexport default class Browser extends Queueable {\r\n\r\n\r\n\t/**\r\n\t * Redirect browser to a new page\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.location - Dom location to direct to\r\n\t */\r\n\tredirect(pid, json) {\r\n\t\twindow.top.location = json.location;\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Start the history monitor.\r\n\t *\r\n\t * Detects when the user navigates via back / forward button and runs queue based on history item\r\n\t * added via addHistory\r\n\t *\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t */\r\n\tinitHistory(pid, json) {\r\n\t\tlet self = this;\r\n\t\tself.lastURL=false;\r\n\r\n\t\tfunction urlChange(e) {\r\n\t\t\tlet baseURL = location.href;\r\n\t\t\t/*\r\n\t\t\t * Do a check to see we are not trying to go to the same url\r\n\t\t\t * In some browsers we will get two events (onpopstate & onhashchange)\r\n\t\t\t */\r\n\t\t\tif(self.lastURL===false||baseURL!==self.lastURL) {\r\n\t\t\t\tself.lastURL=baseURL;\r\n\t\t\t\tlet match = baseURL.match(/\\#([a-zA-Z]+)\\/{0,1}(.*)$/);\r\n\t\t\t\tif (match && match[1]) {\r\n\t\t\t\t\tif (match[2])\r\n\t\t\t\t\t\tself.queue.setMemory('history', match[2].split('/'), \"Session\");\r\n\t\t\t\t\tself.queue.execute('history' + match[1]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.queue.execute('historyRoot');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twindow.onpopstate = urlChange;\r\n\t\t/*\r\n\t\t * IE's *sigh*\r\n\t\t */\r\n\t\twindow.onhashchange = urlChange;\r\n\r\n\t\tif (json.checkURL) {\r\n\t\t\tlet baseURL = location.href;\r\n\t\t\tlet match = baseURL.match(/\\#([a-zA-Z]+)\\/{0,1}(.*)$/);\r\n\t\t\tif (match && match[1]) {\r\n\t\t\t\tif (match[2])\r\n\t\t\t\t\tself.queue.setMemory('history', match[2].split('/'), \"Session\");\r\n\t\t\t\tself.queue.execute('history' + match[1]);\r\n\t\t\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(json.default) {\r\n\t\t\tself.addHistory(-1,{\"history\":json.default});\r\n\t\t}\r\n\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Add a history entry\r\n\t *\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.history - history name to add\r\n\t * @param {string} json.force - force history on same url\r\n\t */\r\n\taddHistory(pid, json) {\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"history\": \"Root\",\r\n\t\t}, json);\r\n\t\tlet baseURL = location.href;\r\n\r\n\t\tif (baseURL.match(/#/))\r\n\t\t\tbaseURL = baseURL.slice(0, location.href.indexOf('#'));\r\n\t\t/*\r\n\t\t * Some browsers 'Looking at you chrome' register a change event even if the URL is the same\r\n\t\t * so we filter any matches out\r\n\t\t */\r\n\t\tconst newURL=baseURL + '#' + options.history;\r\n\t\tif (newURL !== location.href||options.force==true) {\r\n\t\t\tlocation.href = newURL;\r\n\t\t}\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\tbackHistory(pid, json) {\r\n\t\twindow.history.back();\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\tforwardHistory(pid, json) {\r\n\t\twindow.history.forward();\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Add a resize monitor that runs a queue on resize\r\n\t *\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.name - queue to run on resize\r\n\t */\r\n\tresizeMonitor(pid, json) {\r\n\t\tlet self = this;\r\n\t\twindow.onresize = function (event) {\r\n\t\t\tself.queue.execute(json.name);\r\n\t\t};\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggle a close page trap on and off\r\n\t *\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.mode - on|off\r\n\t */\r\n\tcloseEvent(pid,json) {\r\n\r\n\t\tif(json.mode==='off') {\r\n\t\t\twindow.onbeforeunload = function(e) {};\r\n\t\t} else {\r\n\t\t\twindow.onbeforeunload = blockClose;\r\n\t\t}\r\n\r\n\t\tfunction blockClose(e) {\r\n\t\t\te = e || window.event;\r\n\t\t\t// For IE and Firefox prior to version 4\r\n\t\t\tif (e) {\r\n\t\t\t\te.returnValue = 'Sure?';\r\n\t\t\t}\r\n\t\t\t// For Safari\r\n\t\t\treturn 'Sure?';\r\n\t\t}\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Queueable/Browser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "class",
    "name": "Browser",
    "memberof": "ourthings/Queueable/Browser.js",
    "static": true,
    "longname": "ourthings/Queueable/Browser.js~Browser",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/Browser.js",
    "importStyle": "Browser",
    "description": "",
    "examples": [
      "//"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\nBrowser Functions"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "interface": false,
    "extends": [
      "ourthings/Queueable.js~Queueable"
    ]
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "redirect",
    "memberof": "ourthings/Queueable/Browser.js~Browser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Browser.js~Browser#redirect",
    "access": "public",
    "description": "Redirect browser to a new page",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.location",
        "description": "Dom location to direct to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "initHistory",
    "memberof": "ourthings/Queueable/Browser.js~Browser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Browser.js~Browser#initHistory",
    "access": "public",
    "description": "Start the history monitor.\n\nDetects when the user navigates via back / forward button and runs queue based on history item\nadded via addHistory",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      }
    ],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "addHistory",
    "memberof": "ourthings/Queueable/Browser.js~Browser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Browser.js~Browser#addHistory",
    "access": "public",
    "description": "Add a history entry",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.history",
        "description": "history name to add"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.force",
        "description": "force history on same url"
      }
    ],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "backHistory",
    "memberof": "ourthings/Queueable/Browser.js~Browser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Browser.js~Browser#backHistory",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "forwardHistory",
    "memberof": "ourthings/Queueable/Browser.js~Browser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Browser.js~Browser#forwardHistory",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "resizeMonitor",
    "memberof": "ourthings/Queueable/Browser.js~Browser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Browser.js~Browser#resizeMonitor",
    "access": "public",
    "description": "Add a resize monitor that runs a queue on resize",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "queue to run on resize"
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "closeEvent",
    "memberof": "ourthings/Queueable/Browser.js~Browser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Browser.js~Browser#closeEvent",
    "access": "public",
    "description": "Toggle a close page trap on and off",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.mode",
        "description": "on|off"
      }
    ],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "ourthings/Queueable/Elements.js",
    "content": "/** @module ourthings/Queueable/Elements */\r\nimport Queueable from \"../Queueable\";\r\nimport {Validate, ValidateEmail, ValidatePassword, ValidateText} from \"../Validator\";\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Dom Elements manipulations\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * elements.removeClass({\"targetId\":\".leftPanel\",\"class\":\"hidden\"});\r\n *\r\n */\r\nexport default class Elements extends Queueable {\r\n\r\n\t/**\r\n\t * Add a class to a dom element\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.iframeId - iframe target\r\n\t * @param {string} json.targetId - Dom target\r\n\t * @param {string} json.class - Name of class to add\r\n\t *\r\n\t * @example\r\n\t * elements.addClass({\"targetId\":\".leftPanel\",\"class\":\"hidden\"});\r\n\t */\r\n\taddClass(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet elements=self.queue.getIframeElements(json.iframeId,json.targetId);\r\n\t\tself.set(pid,json);\r\n\r\n\t\tif(elements!==false) {\r\n\t\t\telements.forEach(function(element) {\r\n\t\t\t\telement.classList.add(json.class);\r\n\t\t\t});\r\n\t\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t\t} else {\r\n\t\t\tself.finished(pid,self.queue.DEFINE.FIN_WARNING,'Could not add class ['+json.class+'] to ['+json.targetId+']');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set style of a dom element\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.iframeId - iframe target\r\n\t * @param {string} json.targetId - Dom target\r\n\t * @param {array} json.style - style array of elements in format [{\"name\":\"background\",\"value\":\"red\"}]\r\n\t *\r\n\t * @example\r\n\t * elements.setStyle({\"targetId\":\".leftPanel\",\"style\":[{\"name\":\"background\",\"value\":\"red\"}]});\r\n\t */\r\n\tsetStyle(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet elements=self.queue.getIframeElements(json.iframeId,json.targetId);\r\n\t\tself.set(pid,json);\r\n\r\n\t\tif(elements!==false) {\r\n\t\t\telements.forEach(function(element) {\r\n\t\t\t\tfor(let i in json.style)\r\n\t\t\t\telement.style[json.style[i].name]=json.style[i].value;\r\n\t\t\t});\r\n\t\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t\t} else {\r\n\t\t\tself.finished(pid,self.queue.DEFINE.FIN_WARNING,'Could not set style on ['+json.targetId+']');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set attribute of a dom element\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.iframeId - iframe target\r\n\t * @param {string} json.targetId - Dom target\r\n\t * @param {array} json.attribute - Attribute to set\r\n\t * @param {array} json.value - Value to set\r\n\t *\r\n\t * @example\r\n\t * elements.setAttribute({\"targetId\":\".leftPanel\",\"attribute\":\"src\",\"value\":\"http://foo/bar.png\"});\r\n\t */\r\n\tsetAttribute(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet elements=self.queue.getIframeElements(json.iframeId,json.targetId);\r\n\t\tself.set(pid,json);\r\n\r\n\t\tif(elements!==false) {\r\n\t\t\telements.forEach(function(element) {\r\n\t\t\t\t\telement.setAttribute(json.attribute,json.value);\r\n\t\t\t});\r\n\t\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t\t} else {\r\n\t\t\tself.finished(pid,self.queue.DEFINE.FIN_WARNING,'Could not set attribute ['+json.attribute+'] on ['+json.targetId+']');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Remove a class to a dom element\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.iframeId - iframe target\r\n\t * @param {string} json.targetId - Dom target\r\n\t * @param {string} json.class - Name of class to remove\r\n\t *\r\n\t * @example\r\n\t * elements.removeClass({\"targetId\":\".leftPanel\",\"class\":\"hidden\"});\r\n\t */\r\n\tremoveClass(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet elements=self.queue.getIframeElements(json.iframeId,json.targetId);\r\n\t\tself.set(pid,json);\r\n\t\tif(elements!==false) {\r\n\t\t\telements.forEach(function(element) {\r\n\t\t\t\telement.classList.remove(json.class);\r\n\t\t\t});\r\n\t\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t\t} else {\r\n\t\t\tself.finished(pid,self.queue.DEFINE.FIN_WARNING,'Could not remove class ['+json.class+'] to ['+json.targetId+']');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * toggle a class on a dom element\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - Dom target\r\n\t * @param {string} json.class - Name of class to toggle\r\n\t *\r\n\t * @example\r\n\t * elements.toggleClass({\"targetId\":\".leftPanel\",\"class\":\"hidden\"});\r\n\t */\r\n\ttoggleClass(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet elements=self.queue.getIframeElements(json.iframeId,json.targetId);\r\n\t\tself.set(pid,json);\r\n\t\tif(elements!==false) {\r\n\t\t\telements.forEach(function(element) {\r\n\t\t\t\tif (element.classList.contains(json.class))\r\n\t\t\t\t\telement.classList.remove(json.class);\r\n\t\t\t\telse\r\n\t\t\t\t\telement.classList.add(json.class);\r\n\t\t\t});\r\n\t\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t\t} else {\r\n\t\t\tself.finished(pid,self.queue.DEFINE.FIN_WARNING,'Could not remove class ['+json.class+'] to ['+json.targetId+']');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Cut a dom element out and paste it somewhere\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - Dom target\r\n\t * @param {string} json.sourceId - Source dom element\r\n\t *\r\n\t * @example\r\n\t * elements.domCutPaste({\"targetId\":\".leftPanel\",\"sourceId\":\".thing\"});\r\n\t */\r\n\tdomCutPaste(pid, json) {\r\n\t\tlet source=self.queue.getElement(json.sourceId);\r\n\t\tlet target=self.queue.getElement(json.targetId);\r\n\t\ttarget.appendChild(source);\r\n\t\tthis.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n    /**\r\n     * Set the HTML of an element\r\n     * @param {number} pid - Process ID\r\n     * @param {object} json - queue arguments\r\n     * @param {string} json.targetId - Dom target\r\n     * @param {string} json.html - HTML to add\r\n     * @param {string} json.append - Append mode\r\n     *\r\n     * @example\r\n     * elements.innerHTML({\"targetId\":\".leftPanel\",\"html\":\"Hello World\"});\r\n\r\n     */\r\n\tinnerHTML(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet element=self.queue.getElement(json.targetId);\r\n\t\tif(json.append)\r\n\t\t\telement.insertAdjacentHTML('beforeend',json.html);\r\n\t\telse\r\n\t\t\telement.innerHTML=json.html;\r\n\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Set the value of an input field\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - Dom target\r\n\t * @param {string} json.value - value to set\r\n\t *\r\n\t * @example\r\n\t * elements.setInputValue({\"targetId\":\"#username\",\"value\":\"Hello World\"});\r\n\r\n\t */\r\n\tsetInputValue(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet element=self.queue.getElement(json.targetId);\r\n\t\telement.value=json.value;\r\n\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the values from checked input boxes\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - Dom target for check boxes\r\n\t * @param {string} json.mode - array|string\r\n\t * @param {string} json.separator - What seperator to use in string mode\r\n\t * @param {string} json.name - Name of the memory element to set\r\n\t *\r\n\t *\r\n\t * @example\r\n\t * elements.getCheckBoxValues({\"mode\":\"string\",\"targetId\":\".functionGetTypes\"});\r\n\r\n\t */\r\n\tgetCheckBoxValues(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet options=Object.assign({\r\n\t\t\t\"mode\":\"array\",\r\n\t\t\t\"separator\":\",\",\r\n\t\t\t\"name\":\"checkboxes\"\r\n\t\t},json);\r\n\t\tlet results=[];\r\n\t\tlet elements=self.queue.getElements(json.targetId+':checked');\r\n\t\tfor(let element in elements) {\r\n\t\t\tresults.push(elements[element].value);\r\n\t\t}\r\n\t\tif(options.mode!=='array') {\r\n\t\t\tresults=results.join(options.separator);\r\n\t\t}\r\n\t\tself.queue.setMemory(options.name, results, \"Session\");\r\n\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get the computed style for an element\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - Dom target\r\n\t * @param {string} json.styles - value to get\r\n\t * @param {string} json.name - memory name to use\r\n\t *\r\n\t * @example\r\n\t * elements.getComputedStyle({\"targetId\":\"#username\",\"styles\":\"background\"});\r\n\r\n\t */\r\n\tgetComputedStyle(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet options=Object.assign({\r\n\t\t\t\"name\":\"computedStyle\"\r\n\t\t},json);\r\n\t\tlet element=self.queue.getElement(options.targetId);\r\n\t\tlet style=window.getComputedStyle(element).getPropertyValue(options.css);\r\n\t\tself.queue.setMemory(options.name, style, \"Session\");\r\n\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Scroll to a dom target\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - Dom target\r\n\t *\r\n\t * @example\r\n\t * elements.scrollIntoView({\"targetId\":\"#ps_1\"});\r\n\r\n\t */\r\n\tscrollIntoView(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet element=self.queue.getElement(json.targetId);\r\n\t\telement.scrollIntoView();\r\n\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Scroll to bottom of a dom target\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - Dom target\r\n\t *\r\n\t * @example\r\n\t * elements.scrollToBottom({\"targetId\":\"#ps_1\"});\r\n\r\n\t */\r\n\tscrollToBottom(pid,json) {\r\n\t\tlet objDiv = this.queue.getElement(json.targetId);\r\n\t\tobjDiv.scrollTop = objDiv.scrollHeight;\r\n\t\tthis.finished(pid,this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Accessible toggle visible on a target\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - Dom target to scroll to*\r\n\t * @param {string} json.mode - toggle|add|remove\r\n\t * @example\r\n\t * elements.focus({\"targetId\":\"#ps_1\"});\r\n\t */\r\n\tariaHiddenToggle(pid, json) {\r\n\t\tlet self=this;\r\n\t\tlet options=Object.assign({\r\n\t\t\t\"class\":\"hidden\",\r\n\t\t\t\"mode\":\"toggle\"\r\n\t\t},json);\r\n\t\tlet elements=self.queue.getIframeElements(options.iframeId,options.targetId);\r\n\t\tif(elements!==false) {\r\n\t\t\telements.forEach(function(element) {\r\n\t\t\t\tif(options.mode===\"toggle\") {\r\n\t\t\t\t\tif (element.classList.contains(options.class)) {\r\n\t\t\t\t\t\telement.classList.remove(options.class);\r\n\t\t\t\t\t\telement.setAttribute('aria-hidden', 'false');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement.classList.add(options.class);\r\n\t\t\t\t\t\telement.setAttribute('aria-hidden', 'true');\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(options.mode===\"add\") {\r\n\t\t\t\t\t\telement.setAttribute('aria-hidden', 'true');\r\n\t\t\t\t\t\telement.classList.add(options.class);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(options.mode===\"remove\") {\r\n\t\t\t\t\t\telement.setAttribute('aria-hidden', 'false');\r\n\t\t\t\t\t\telement.classList.remove(options.class);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t\t} else {\r\n\t\t\tself.finished(pid,self.queue.DEFINE.FIN_WARNING,'Could not remove class ['+options.class+'] to ['+options.targetId+']');\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Focus on a target\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - Dom target to scroll to*\r\n\t * @example\r\n\t * elements.focus({\"targetId\":\"#ps_1\"});\r\n\t */\r\n\tfocus(pid, json) {\r\n\t\tlet objDiv = this.queue.getElement(json.targetId);\r\n\t\tobjDiv.focus();\r\n\t\tthis.finished(pid,this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Scroll a dom container target to a dom target\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - Dom target to scroll to\r\n\t * @param {string} json.containerId - Dom target container to scroll\r\n\t *\r\n\t * @example\r\n\t * elements.scrollIntoView({\"containerId\":\".map-elements-list\",\"targetId\":\"#ps_1\"});\r\n\t */\r\n\tscrollContainerToElement(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet container = self.queue.getElement(json.containerId);\r\n\t\tlet\telement = self.queue.getElement(json.targetId);\r\n\t\tcontainer.scrollTop = element.offsetTop;\r\n\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Monitor element(s) in a form and add classes on change\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - elements(s) to monitor for change and add modifiedClass to\r\n\t * @param {string} json.buttonId - Element to add modifiedClass to\r\n\t * @param {string} json.modifiedClass - Class to add to modified elements\r\n\t * @param {string} json.modifiedQueue - Prepared queue to run when element modified\r\n\t *\r\n\t * @example\r\n\t * elements.formActivityMonitor({\"targetId\":\".functionMonitor\",\"buttonId\":\".form-save\",\"modifiedClass\":\"modified\"});\r\n\r\n\t */\r\n\tformActivityMonitor(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet elements=this.queue.getElements(json.targetId);\r\n\t\tlet button;\r\n\t\tif(json.buttonId)\r\n\t\t\tbutton=this.queue.getElement(json.buttonId);\r\n\t\telements.forEach(function(element) {\r\n\t\t\telement.addEventListener(\"change\", function () {\r\n\t\t\t\tif(json.modifiedQueue)\r\n\t\t\t\t\tself.queue.execute(json.modifiedQueue,{});\r\n\t\t\t\tif(json.modifiedClass) {\r\n\t\t\t\t\tthis.classList.add(json.modifiedClass);\r\n\t\t\t\t\tif(button)\r\n\t\t\t\t\t\tbutton.classList.add(json.modifiedClass);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\telement.addEventListener(\"keypress\", function () {\r\n\t\t\t\tif(json.modifiedQueue)\r\n\t\t\t\t\tself.queue.execute(json.modifiedQueue,{});\r\n\t\t\t\tif(json.modifiedClass) {\r\n\t\t\t\t\tthis.classList.add(json.modifiedClass);\r\n\t\t\t\t\tif(button)\r\n\t\t\t\t\t\tbutton.classList.add(json.modifiedClass);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t});\r\n\t\tthis.finished(pid,this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Monitor element(s) in a form and validate\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - elements(s) to monitor for change and add modifiedClass to\r\n\t * @param {string} json.buttonId - Element to add modifiedClass to\r\n\t * @param {string} json.focusClass - Class to add to focuses elements\r\n\t * @param {string} json.validClass - Prepared queue to run when element modified\r\n\t * @param {string} json.errorClass - Prepared queue to run when element modified\r\n\t * @param {string} json.timeout - Length of time after user has finished typing to update\r\n\t *\r\n\t * @example\r\n\t * elements.formValidityMonitor({\"targetId\":\".functionMonitor\",\"buttonId\":\".submit-form\",\"validClass\":\"valid\",\"focusClass\":\"focus\",\"errorClass\":\"error\"},{\"queueRun\":\"Instant\"});\r\n\r\n\t */\r\n\tformValidityMonitor(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet elements=this.queue.getElements(json.targetId);\r\n\t\tlet button;\r\n\t\tif(json.buttonId)\r\n\t\t\tbutton=this.queue.getElement(json.buttonId);\r\n\t\tlet modules={};\r\n\t\tlet timerEvent;\r\n\t\tlet timerTimeout=json.timeout||2000;\r\n\t\tmodules['email']=new ValidateEmail();\r\n\t\tmodules['text']=new ValidateText();\r\n\t\tmodules['password']=new ValidatePassword();\r\n\t\telements.forEach(function(element) {\r\n\t\t\t/*\r\n\t\t\t * Focus is new, clear down focused classes and reclass\r\n\t\t\t */\r\n\t\t\telement.addEventListener(\"focus\", function () {\r\n\t\t\t\telements.forEach(function(element) {\r\n\t\t\t\t\telement.classList.remove(json.focusClass);\r\n\t\t\t\t});\r\n\t\t\t\tthis.classList.add(json.focusClass);\r\n\t\t\t});\r\n\r\n\t\t\t/*\r\n\t\t\t * There is a change to the field (normally they exit the field\r\n\t\t\t */\r\n\t\t\telement.addEventListener(\"change\", function () {\r\n\t\t\t\tif (timerEvent)\r\n\t\t\t\t\tclearTimeout(timerEvent);\r\n\t\t\t\tchangeUpdate(element,this);\r\n\t\t\t});\r\n\r\n\t\t\t/*\r\n\t\t\t * Key up so after the user has finishing typing\r\n\t\t\t */\r\n\t\t\telement.addEventListener(\"keyup\", function (e) {\r\n\t\t\t\tif(e.which!==9) {\r\n\t\t\t\t\tif (timerEvent)\r\n\t\t\t\t\t\tclearTimeout(timerEvent);\r\n\t\t\t\t\tlet ptr = this;\r\n\t\t\t\t\ttimerEvent = setTimeout(function () {\r\n\t\t\t\t\t\tchangeUpdate(element, ptr);\r\n\t\t\t\t\t}, timerTimeout);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t});\r\n\r\n\t\t/*\r\n\t\t * Function to actually update the fields\r\n\t\t */\r\n\t\tfunction changeUpdate(element,ptr) {\r\n\t\t\tif(element.getAttribute('data-validation')) {\r\n\t\t\t\tlet moduleName = element.getAttribute('data-validation').toLowerCase();\r\n\t\t\t\tif (modules[moduleName].valid(element.value, {})) {\r\n\t\t\t\t\tptr.classList.remove(json.errorClass);\r\n\t\t\t\t\tptr.classList.add(json.validClass);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tptr.classList.add(json.errorClass);\r\n\t\t\t\t\tptr.classList.remove(json.validClass);\r\n\t\t\t\t}\r\n\t\t\t\tlet needValidations=self.queue.getElements(json.targetId+'[data-validation]');\r\n\t\t\t\tlet isValidated=self.queue.getElements(json.targetId+'[data-validation].'+json.validClass);\r\n\t\t\t\tif(needValidations.length===isValidated.length) {\r\n\t\t\t\t\tbutton.classList.add(json.validClass);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbutton.classList.remove(json.validClass);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.finished(pid,this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\tdragOn(pid, json) {\r\n\t\tlet self=this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"drag\": \"default\",\r\n\t\t}, json);\r\n\r\n\t\tif(this.drags===undefined) {\r\n\t\t\tthis.drags={};\r\n\t\t}\r\n\r\n\t\tlet element = this.queue.getElement(json.targetId);\r\n\r\n\t\tthis.drags[options.drag]={pos:{x:0,y:0,x1:0,y1:0},element:element};\r\n\r\n\t\telement.addEventListener('mousedown',dragMouseDown);\r\n\r\n\r\n\t\tfunction dragMouseDown(e) {\r\n\t\t\te = e || window.event;\r\n\t\t\te.preventDefault();\r\n\t\t\t// get the mouse cursor position at startup:\r\n\t\t\tself.drags[options.drag].pos.x1=e.clientX;\r\n\t\t\tself.drags[options.drag].pos.y1=e.clientY;\r\n\t\t\tdocument.onmouseup = closeDragElement;\r\n\t\t\tdocument.onmousemove = elementDrag;\r\n\t\t}\r\n\r\n\t\tfunction elementDrag(e) {\r\n\t\t\te = e || window.event;\r\n\t\t\te.preventDefault();\r\n\t\t\t// calculate the new cursor position:\r\n\t\t\tself.drags[options.drag].pos.x=self.drags[options.drag].pos.x1 - e.clientX;\r\n\t\t\tself.drags[options.drag].pos.y=self.drags[options.drag].pos.y1 - e.clientY;\r\n\t\t\tself.drags[options.drag].pos.x1=e.clientX;\r\n\t\t\tself.drags[options.drag].pos.y1=e.clientY;\r\n\t\t\t// set the element's new position:\r\n\t\t\telement.style.top = (element.offsetTop - self.drags[options.drag].pos.y) + \"px\";\r\n\t\t\telement.style.left = (element.offsetLeft - self.drags[options.drag].pos.x) + \"px\";\r\n\t\t}\r\n\r\n\t\tfunction closeDragElement() {\r\n\t\t\t/*\r\n\t\t\t * End of drag so get rid of events\r\n\t\t\t */\r\n\t\t\tdocument.onmouseup = null;\r\n\t\t\tdocument.onmousemove = null;\r\n\t\t}\r\n\r\n\t\tthis.finished(pid,this.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Queueable/Elements.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "class",
    "name": "Elements",
    "memberof": "ourthings/Queueable/Elements.js",
    "static": true,
    "longname": "ourthings/Queueable/Elements.js~Elements",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/Elements.js",
    "importStyle": "Elements",
    "description": "",
    "examples": [
      "elements.removeClass({\"targetId\":\".leftPanel\",\"class\":\"hidden\"});"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\nDom Elements manipulations"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "interface": false,
    "extends": [
      "ourthings/Queueable.js~Queueable"
    ]
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "addClass",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#addClass",
    "access": "public",
    "description": "Add a class to a dom element",
    "examples": [
      "elements.addClass({\"targetId\":\".leftPanel\",\"class\":\"hidden\"});"
    ],
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.iframeId",
        "description": "iframe target"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.class",
        "description": "Name of class to add"
      }
    ],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "setStyle",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#setStyle",
    "access": "public",
    "description": "Set style of a dom element",
    "examples": [
      "elements.setStyle({\"targetId\":\".leftPanel\",\"style\":[{\"name\":\"background\",\"value\":\"red\"}]});"
    ],
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.iframeId",
        "description": "iframe target"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.style",
        "description": "style array of elements in format [{\"name\":\"background\",\"value\":\"red\"}]"
      }
    ],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "setAttribute",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#setAttribute",
    "access": "public",
    "description": "Set attribute of a dom element",
    "examples": [
      "elements.setAttribute({\"targetId\":\".leftPanel\",\"attribute\":\"src\",\"value\":\"http://foo/bar.png\"});"
    ],
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.iframeId",
        "description": "iframe target"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.attribute",
        "description": "Attribute to set"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.value",
        "description": "Value to set"
      }
    ],
    "return": null
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "removeClass",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#removeClass",
    "access": "public",
    "description": "Remove a class to a dom element",
    "examples": [
      "elements.removeClass({\"targetId\":\".leftPanel\",\"class\":\"hidden\"});"
    ],
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.iframeId",
        "description": "iframe target"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.class",
        "description": "Name of class to remove"
      }
    ],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "toggleClass",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#toggleClass",
    "access": "public",
    "description": "toggle a class on a dom element",
    "examples": [
      "elements.toggleClass({\"targetId\":\".leftPanel\",\"class\":\"hidden\"});"
    ],
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.class",
        "description": "Name of class to toggle"
      }
    ],
    "return": null
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "domCutPaste",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#domCutPaste",
    "access": "public",
    "description": "Cut a dom element out and paste it somewhere",
    "examples": [
      "elements.domCutPaste({\"targetId\":\".leftPanel\",\"sourceId\":\".thing\"});"
    ],
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.sourceId",
        "description": "Source dom element"
      }
    ],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "innerHTML",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#innerHTML",
    "access": "public",
    "description": "Set the HTML of an element",
    "examples": [
      "elements.innerHTML({\"targetId\":\".leftPanel\",\"html\":\"Hello World\"});"
    ],
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.html",
        "description": "HTML to add"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.append",
        "description": "Append mode"
      }
    ],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "setInputValue",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#setInputValue",
    "access": "public",
    "description": "Set the value of an input field",
    "examples": [
      "elements.setInputValue({\"targetId\":\"#username\",\"value\":\"Hello World\"});"
    ],
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.value",
        "description": "value to set"
      }
    ],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "getCheckBoxValues",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#getCheckBoxValues",
    "access": "public",
    "description": "Get the values from checked input boxes",
    "examples": [
      "elements.getCheckBoxValues({\"mode\":\"string\",\"targetId\":\".functionGetTypes\"});"
    ],
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target for check boxes"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.mode",
        "description": "array|string"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.separator",
        "description": "What seperator to use in string mode"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "Name of the memory element to set"
      }
    ],
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "getComputedStyle",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#getComputedStyle",
    "access": "public",
    "description": "Get the computed style for an element",
    "examples": [
      "elements.getComputedStyle({\"targetId\":\"#username\",\"styles\":\"background\"});"
    ],
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.styles",
        "description": "value to get"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "memory name to use"
      }
    ],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "scrollIntoView",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#scrollIntoView",
    "access": "public",
    "description": "Scroll to a dom target",
    "examples": [
      "elements.scrollIntoView({\"targetId\":\"#ps_1\"});"
    ],
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target"
      }
    ],
    "return": null
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "scrollToBottom",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#scrollToBottom",
    "access": "public",
    "description": "Scroll to bottom of a dom target",
    "examples": [
      "elements.scrollToBottom({\"targetId\":\"#ps_1\"});"
    ],
    "lineNumber": 291,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target"
      }
    ],
    "return": null
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "ariaHiddenToggle",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#ariaHiddenToggle",
    "access": "public",
    "description": "Accessible toggle visible on a target",
    "examples": [
      "elements.focus({\"targetId\":\"#ps_1\"});"
    ],
    "lineNumber": 306,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target to scroll to*"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.mode",
        "description": "toggle|add|remove"
      }
    ],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "focus",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#focus",
    "access": "public",
    "description": "Focus on a target",
    "examples": [
      "elements.focus({\"targetId\":\"#ps_1\"});"
    ],
    "lineNumber": 349,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target to scroll to*"
      }
    ],
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "scrollContainerToElement",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#scrollContainerToElement",
    "access": "public",
    "description": "Scroll a dom container target to a dom target",
    "examples": [
      "elements.scrollIntoView({\"containerId\":\".map-elements-list\",\"targetId\":\"#ps_1\"});"
    ],
    "lineNumber": 365,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target to scroll to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.containerId",
        "description": "Dom target container to scroll"
      }
    ],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "formActivityMonitor",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#formActivityMonitor",
    "access": "public",
    "description": "Monitor element(s) in a form and add classes on change",
    "examples": [
      "elements.formActivityMonitor({\"targetId\":\".functionMonitor\",\"buttonId\":\".form-save\",\"modifiedClass\":\"modified\"});"
    ],
    "lineNumber": 386,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "elements(s) to monitor for change and add modifiedClass to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.buttonId",
        "description": "Element to add modifiedClass to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.modifiedClass",
        "description": "Class to add to modified elements"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.modifiedQueue",
        "description": "Prepared queue to run when element modified"
      }
    ],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "formValidityMonitor",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#formValidityMonitor",
    "access": "public",
    "description": "Monitor element(s) in a form and validate",
    "examples": [
      "elements.formValidityMonitor({\"targetId\":\".functionMonitor\",\"buttonId\":\".submit-form\",\"validClass\":\"valid\",\"focusClass\":\"focus\",\"errorClass\":\"error\"},{\"queueRun\":\"Instant\"});"
    ],
    "lineNumber": 432,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "elements(s) to monitor for change and add modifiedClass to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.buttonId",
        "description": "Element to add modifiedClass to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.focusClass",
        "description": "Class to add to focuses elements"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.validClass",
        "description": "Prepared queue to run when element modified"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.errorClass",
        "description": "Prepared queue to run when element modified"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.timeout",
        "description": "Length of time after user has finished typing to update"
      }
    ],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "dragOn",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#dragOn",
    "access": "public",
    "description": null,
    "lineNumber": 506,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "drags",
    "memberof": "ourthings/Queueable/Elements.js~Elements",
    "static": false,
    "longname": "ourthings/Queueable/Elements.js~Elements#drags",
    "access": "public",
    "description": null,
    "lineNumber": 513,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "ourthings/Queueable/Files.js",
    "content": "/** @module ourthings/Queueable/Files */\r\nimport Queueable from \"../Queueable\";\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * File upload functions\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * //\r\n *\r\n */\r\nexport default class Files extends Queueable {\r\n\r\n\r\n\t/**\r\n\t * Load a file into memory with option to preview\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - Dom location that contains the files input\r\n\t * @param {string} json.previewId - Dom location to put preview\r\n\t * @param {string} json.background - Use background rather than src\r\n\t */\r\n\tclientLoad(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet element = self.queue.getElement(json.targetId);\r\n\t\tlet files = element.files;\r\n\t\tif (files && files[0]) {\r\n\t\t\tlet reader = new FileReader();\r\n\t\t\treader.readAsDataURL(files[0]);\r\n\t\t\treader.onload = function (evt) {\r\n\t\t\t\tif (json.previewId) {\r\n\t\t\t\t\tlet preview = self.queue.getElement(json.previewId);\r\n\t\t\t\t\tif(json.background)\r\n\t\t\t\t\t\tpreview.style['background-image']=evt.target.result;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tpreview.src = evt.target.result;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.set(pid, evt.target.result);\r\n\t\t\t\t}\r\n\t\t\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t\t\t};\r\n\t\t\treader.onerror = function (evt) {\r\n\t\t\t\t// TODO Write me!\r\n\t\t\t\tconsole.log('error');\r\n\t\t\t\tdebugger;\r\n\t\t\t\tself.finished(pid, self.queue.DEFINE.FIN_ERROR);\r\n\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Image preview\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - Dom location that contains the files input\r\n\t * @param {string} json.previewId - Dom location to put preview\r\n\t * @param {string} json.dragTargetId - Dom location to target for the drop zone\r\n\t * @param {string} json.background - Use background rather than src\r\n\r\n\t */\r\n\tfilePreview(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options=Object.assign({\r\n\t\t\t\"prefix\":\"main\"\r\n\t\t},json);\r\n\t\tlet element = self.queue.getElement(json.targetId);\r\n\r\n\t\t/**\r\n\t\t *  Clear down any previous file memory entries\r\n\t\t */\r\n\t\tself.queue.deleteMemory('file');\r\n\r\n\t\t/**\r\n\t\t * Drag drop functions\r\n\t\t * @param e\r\n\t\t */\r\n\t\tfunction onDragEnter(e) {\r\n\t\t\te.stopPropagation();\r\n\t\t\te.preventDefault();\r\n\t\t}\r\n\r\n\t\tfunction onDragOver(e) {\r\n\t\t\te.stopPropagation();\r\n\t\t\te.preventDefault();\r\n\t\t}\r\n\r\n\t\tfunction onDragLeave(e) {\r\n\t\t\te.stopPropagation();\r\n\t\t\te.preventDefault();\r\n\t\t}\r\n\r\n\t\tfunction onDrop(e) {\r\n\t\t\te.stopPropagation();\r\n\t\t\te.preventDefault();\r\n\t\t\tsetFiles(e.dataTransfer.files);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tfunction setFiles(files) {\r\n\t\t\tlet file = files[0];\r\n\t\t\tself.queue.setMemory('file', file, 'Session');\r\n\t\t\tdoPreview(file);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t *  Did we need a drag and drop on this element?\r\n\t\t */\r\n\t\tif (json.dragTargetId) {\r\n\t\t\tlet dragElement = self.queue.getElement(json.dragTargetId);\r\n\t\t\tdragElement.addEventListener('dragenter', onDragEnter, false);\r\n\t\t\tdragElement.addEventListener('dragover', onDragOver, false);\r\n\t\t\tdragElement.addEventListener('dragleave', onDragLeave, false);\r\n\t\t\tdragElement.addEventListener('drop', onDrop, false);\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t *  Event for change (IE the input file box selected a file)\r\n\t\t */\r\n\t\telement.addEventListener('change', function () {\r\n\t\t\tlet file = this.files[0];\r\n\t\t\tself.queue.setMemory('file', file, 'Session');\r\n\t\t\tdoPreview(file);\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * Actual preview function called from both change & drag drop events\r\n\t\t * @param file\r\n\t\t */\r\n\r\n\t\tfunction doPreview(file) {\r\n\t\t\tlet reader = new FileReader();\r\n\t\t\treader.readAsDataURL(file);\r\n\t\t\treader.onload = function (evt) {\r\n\t\t\t\tself.queue.setMemory(\"filePreview\", evt.target.result,\"Session\");\r\n\t\t\t\tself.queue.execute(options.prefix+\"FilePreview\");\r\n\t\t\t};\r\n\t\t\treader.onerror = function (evt) {\r\n\t\t\t\t// TODO Write me!\r\n\t\t\t\tconsole.log('error');\r\n\t\t\t\tdebugger;\r\n\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Upload fiel to S3\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - Dom location that contains the files input\r\n\t * @param {boolean} json.file - use the memory file object set\r\n\t * @param {string} json.contentType - Content type of file\r\n\t * @param {string} json.headers - Additional headers to send\r\n\t * @param {string} json.url - url to upload to\r\n\t */\r\n\tputFileToS3(pid, json) {\r\n\t\tlet self = this;\r\n\t\tjson.contentType = json.contentType || 'image/png';\r\n\t\tlet headers = json.headers || {};\r\n\t\theaders['Content-Type'] = json.contentType;\r\n\t\tlet file;\r\n\t\t/**\r\n\t\t *  The upload can come from an input or via memory\r\n\t\t *  In the case of memory we cleanup the memory\r\n\t\t */\r\n\t\tif (json.file) {\r\n\t\t\tfile=memory.file.value;\r\n\t\t\tself.queue.deleteMemory('file');\r\n\t\t} else {\r\n\t\t\tlet element = self.queue.getElement(json.targetId);\r\n\t\t\tfile = element.files[0];\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t *  Make the call to S3 with the file data\r\n\t\t */\r\n\t\tfetch(json.url, {\r\n\t\t\theaders: headers,\r\n\t\t\tmethod: 'PUT',\r\n\t\t\tbody: file\r\n\t\t})\r\n\t\t\t.then(response => self.queue.handleFetchErrors(response))\r\n\t\t\t.then(function (response) {\r\n\t\t\t\tswitch (json.contentType) {\r\n\t\t\t\t\tcase 'application/json':\r\n\t\t\t\t\t\treturn response.json();\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn response.text();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then(function (response) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Convert the response to json and start the loader\r\n\t\t\t\t */\r\n\t\t\t\tself.set(pid, response);\r\n\t\t\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t\t\t})\r\n\t\t\t.catch(function (error) {\r\n\t\t\t\tconsole.info(self.queue.DEFINE.CONSOLE_LINE);\r\n\t\t\t\tconsole.error('Error:', error);\r\n\t\t\t\tconsole.info(\"Warning this error is probably fatal as I have no templates to load\");\r\n\t\t\t\tself.finished(pid, self.queue.DEFINE.FIN_ERROR, 'S3 upload error');\r\n\r\n\t\t\t});\r\n\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Queueable/Files.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "class",
    "name": "Files",
    "memberof": "ourthings/Queueable/Files.js",
    "static": true,
    "longname": "ourthings/Queueable/Files.js~Files",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/Files.js",
    "importStyle": "Files",
    "description": "",
    "examples": [
      "//"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\nFile upload functions"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "interface": false,
    "extends": [
      "ourthings/Queueable.js~Queueable"
    ]
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "clientLoad",
    "memberof": "ourthings/Queueable/Files.js~Files",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Files.js~Files#clientLoad",
    "access": "public",
    "description": "Load a file into memory with option to preview",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom location that contains the files input"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.previewId",
        "description": "Dom location to put preview"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.background",
        "description": "Use background rather than src"
      }
    ],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "filePreview",
    "memberof": "ourthings/Queueable/Files.js~Files",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Files.js~Files#filePreview",
    "access": "public",
    "description": "Image preview",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom location that contains the files input"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.previewId",
        "description": "Dom location to put preview"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.dragTargetId",
        "description": "Dom location to target for the drop zone"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.background",
        "description": "Use background rather than src"
      }
    ],
    "return": null
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "putFileToS3",
    "memberof": "ourthings/Queueable/Files.js~Files",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Files.js~Files#putFileToS3",
    "access": "public",
    "description": "Upload fiel to S3",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom location that contains the files input"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "json.file",
        "description": "use the memory file object set"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.contentType",
        "description": "Content type of file"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.headers",
        "description": "Additional headers to send"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.url",
        "description": "url to upload to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "ourthings/Queueable/Geojson.js",
    "content": "/** @module ourthings/Queueable/Geojson */\r\nimport Queueable from \"../Queueable\";\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * geojson Functions\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * //\r\n *\r\n */\r\nexport default class Geojson extends Queueable {\r\n\r\n\r\n\t/**\r\n\t * Init the geojson history\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.geojson - starting geojson\r\n\t */\r\n\thistoryInit(pid, json) {\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"index\": \"feature_id\",\r\n\t\t\t\"mode\": \"simple\"\r\n\t\t}, json);\r\n\r\n\t\tlet history = {\"revertPtr\": false, \"mode\": options.mode, \"log\": []};\r\n\t\tthis.index = options.index;\r\n\r\n\t\thistory.log.push({\r\n\t\t\t\"name\": \"Session start\",\r\n\t\t\t\"type\": \"full\",\r\n\t\t\t\"geojson\": this._compressGeojson(\"full\", options.geojson),\r\n\t\t\t\"index\": this._makeHistoryIndex(options.geojson)\r\n\t\t});\r\n\t\tthis.queue.setMemory(\"geojsonHistory\", history, \"Session\");\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Add to the geojson history\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.geojson - starting geojson\r\n\t * @param {string} json.type - Type of entry\r\n\t */\r\n\thistoryAdd(pid, json) {\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"type\": \"incremental\"\r\n\t\t}, json);\r\n\t\tif (memory.geojsonHistory.value.revertPtr!==false&&memory.geojsonHistory.value.mode === \"simple\") {\r\n\t\t\tmemory.geojsonHistory.value.log=memory.geojsonHistory.value.log.splice(0,memory.geojsonHistory.value.revertPtr+1);\r\n\t\t\tmemory.geojsonHistory.value.revertPtr=false;\r\n\t\t}\r\n\r\n\t\tlet entry={\r\n\t\t\t\"name\": options.name,\r\n\t\t\t\"geojson\": this._compressGeojson(options.type, options.geojson),\r\n\t\t\t\"type\": options.type,\r\n\t\t\t\"index\": this._makeHistoryIndex(options.geojson)\r\n\t\t}\r\n\t\tmemory.geojsonHistory.value.log.push(entry);\r\n\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * We need to make a fast access index for history based on our 'index' element for use later to speed up\r\n\t * access and prevent many searches\r\n\t *\r\n\t * @param json\r\n\t * @private\r\n\t */\r\n\t_makeHistoryIndex(json) {\r\n\t\tlet index = {};\r\n\t\tfor (let i in json.features) {\r\n\t\t\tindex[json.features[i].properties[this.index]] = {\"position\": i};\r\n\t\t}\r\n\t\treturn index;\r\n\t}\r\n\r\n\t_compressGeojson(type, json) {\r\n\t\tif (type === 'full' || type === 'incremental')\r\n\t\t\treturn json;\r\n\t\tif (type === 'geometry') {\r\n\t\t\t/*\r\n\t\t\t * This edit was geometry only so we nuke properties (but not index as we need that)\r\n\t\t\t */\r\n\t\t\tfor (let i in json.features) {\r\n\t\t\t\tfor (let p in json.features[i].properties) {\r\n\t\t\t\t\tif (p !== this.index)\r\n\t\t\t\t\t\tdelete json.features[i].properties[p];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn json;\r\n\t}\r\n\r\n\thistoryRevert(pid, json) {\r\n\t\t/**\r\n\t\t * Add to the geojson history\r\n\t\t * @param {number} pid - Process ID\r\n\t\t * @param {object} json - queue arguments\r\n\t\t * @param {string} json.id - history id\r\n\t\t * @param {string} json.name - memory name to use\r\n\t\t */\r\n\t\tlet currentPtr = parseInt(json.id);\r\n\t\tlet historyCut = [];\r\n\t\tlet geojsonBuild;\r\n\t\tlet fastIndex;\r\n\t\tmemory.geojsonHistory.value.revertPtr = currentPtr;\r\n\t\t/*\r\n\t\t * Cut out history from our end id to the first full geojson\r\n\t\t */\r\n\t\tfor (let i = currentPtr; i >= 0; i--) {\r\n\t\t\tif (memory.geojsonHistory.value.log[i].type === \"full\") {\r\n\t\t\t\tgeojsonBuild = this.queue.deepCopy(memory.geojsonHistory.value.log[i].geojson);\r\n\t\t\t\tfastIndex = this.queue.deepCopy(memory.geojsonHistory.value.log[i].index);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\thistoryCut.unshift(memory.geojsonHistory.value.log[i]);\r\n\t\t}\r\n\t\t/*\r\n\t\t * geojsonBuild now contains the last full backup & historyCut is the array of changes needed to be applies\r\n\t\t * in order to achieve the point in history. fastIndex is the index to access geojsonBuild and needs updating as\r\n\t\t * we move down the history *if* additions / subtactions are made\r\n\t\t */\r\n\t\tlet len = historyCut.length;\r\n\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\tfor (let f = 0; f < historyCut[i].geojson.features.length; f++) {\r\n\t\t\t\tswitch (historyCut[i].type) {\r\n\t\t\t\t\tcase 'geometry':\r\n\t\t\t\t\t\tgeojsonBuild.features[fastIndex[historyCut[i].geojson.features[f].properties[this.index]].position].geometry = this.queue.deepCopy(historyCut[i].geojson.features[f].geometry);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tgeojsonBuild.features[fastIndex[historyCut[i].geojson.features[f].properties[this.index]].position] = this.queue.deepCopy(historyCut[i].geojson.features[f]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tself.queue.setMemory(json.name, geojsonBuild, \"Session\");\r\n\t\tif (memory.geojsonHistory.value.mode !== \"simple\") {\r\n\t\t\tmemory.geojsonHistory.value.log.push({\r\n\t\t\t\t\"name\": \"Revert point\",\r\n\t\t\t\t\"geojson\": geojsonBuild,\r\n\t\t\t\t\"type\": \"full\",\r\n\t\t\t\t\"index\": this._makeHistoryIndex(geojsonBuild)\r\n\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\thistoryCompare(pid,json) {\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"index\": \"feature_id\"\r\n\t\t}, json);\r\n\t\tconst index1=this._makeHistoryIndex(options.geojson1);\r\n\t\tconst index2=this._makeHistoryIndex(options.geojson2);\r\n\r\n\t\tlet deletes=[];\r\n\r\n\t\t//TODO iterate to find deletes\r\n\r\n\t\tthis.queue.setMemory(\"historyCompare\", {\"updates\":options.geojson2,\"deletes\":deletes}, \"Session\");\r\n\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Queueable/Geojson.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "class",
    "name": "Geojson",
    "memberof": "ourthings/Queueable/Geojson.js",
    "static": true,
    "longname": "ourthings/Queueable/Geojson.js~Geojson",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/Geojson.js",
    "importStyle": "Geojson",
    "description": "",
    "examples": [
      "//"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\ngeojson Functions"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "interface": false,
    "extends": [
      "ourthings/Queueable.js~Queueable"
    ]
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "historyInit",
    "memberof": "ourthings/Queueable/Geojson.js~Geojson",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Geojson.js~Geojson#historyInit",
    "access": "public",
    "description": "Init the geojson history",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.geojson",
        "description": "starting geojson"
      }
    ],
    "return": null
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "index",
    "memberof": "ourthings/Queueable/Geojson.js~Geojson",
    "static": false,
    "longname": "ourthings/Queueable/Geojson.js~Geojson#index",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "historyAdd",
    "memberof": "ourthings/Queueable/Geojson.js~Geojson",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Geojson.js~Geojson#historyAdd",
    "access": "public",
    "description": "Add to the geojson history",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.geojson",
        "description": "starting geojson"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.type",
        "description": "Type of entry"
      }
    ],
    "return": null
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "_makeHistoryIndex",
    "memberof": "ourthings/Queueable/Geojson.js~Geojson",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Geojson.js~Geojson#_makeHistoryIndex",
    "access": "private",
    "description": "We need to make a fast access index for history based on our 'index' element for use later to speed up\naccess and prevent many searches",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "_compressGeojson",
    "memberof": "ourthings/Queueable/Geojson.js~Geojson",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Geojson.js~Geojson#_compressGeojson",
    "access": "private",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "historyRevert",
    "memberof": "ourthings/Queueable/Geojson.js~Geojson",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Geojson.js~Geojson#historyRevert",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "historyCompare",
    "memberof": "ourthings/Queueable/Geojson.js~Geojson",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Geojson.js~Geojson#historyCompare",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "ourthings/Queueable/Internals.js",
    "content": "/** @module ourthings/Queueable/Internals */\r\nimport Queueable from \"../Queueable\";\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Internal queue functions exposed to queueables\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n *\r\n */\r\nexport default class Internals extends Queueable {\r\n\r\n\t/**\r\n\t * Execute a prepared queue\r\n\t * @param {int} pid - process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.name - prepared queue to call\r\n\t * @param {boolean} json.silentFail - fail the queue silently?\r\n\t * @param {object} [json.json] - New arguments to send to queue\r\n\t * @example\r\n\t * internals.execute({\"name\":\"myQueue\"});\r\n\t */\r\n\texecute(pid,json) {\r\n\t\tlet self=this;\r\n\t\tself.queue.execute(json.name,json.json,json.silentFail);\r\n\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Check a statement and run prepared queue if its true\r\n\t * @param {int} pid - process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.statement - statement to check\r\n\t * @param {string} json.name - prepared queue to call\r\n\t * @param {string} json.else - prepared queue to call on else\r\n\t * @param {object} [json.json] - New arguments to send to queue\r\n\t * @example\r\n\t * internals.ifqueue({\"statement\":\"memory.loginAPI.value.token\",\"name\":\"loggedIn\"});\r\n\t */\r\n\tifqueue(pid,json) {\r\n\t\tlet self=this;\r\n\t\tif(eval(json.statement)) {\r\n\t\t\tself.queue.execute(json.name,json.json);\r\n\t\t} else {\r\n\t\t\tif(json.else)\r\n\t\t\t\tself.queue.execute(json.else,json.json);\r\n\r\n\t\t}\r\n\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Set a memory value\r\n\t *\r\n\t * @param {int} pid - process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.name - name of memory item\r\n\t * @param {*} json.value - value to set (can be any type)\r\n\t * @param {string} [json.mode] - [Garbage|Session|Permanent] Memory mode\r\n\t * @example\r\n\t * internals.setMemory({\"name\":\"test\",\"mode\":\"Session\",\"value\":\"Test String\"});\r\n\t * internals.setMemory({\"name\":\"test\",\"mode\":\"Session\",\"value\":{\"trueFalse\":[true,false],\"objects\":[{\"ElementOne\":\"Result One\"},{\"ElementTwo\":\"Result Two\"}]}});\r\n\t */\r\n\tsetMemory(pid,json) {\r\n\t\tlet self=this;\r\n\t\tself.queue.setMemory(json.name,json.value,json.mode);\r\n\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * push a value to an array memory value\r\n\t *\r\n\t * @param {int} pid - process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.name - name of memory item\r\n\t * @param {*} json.value - value to set (can be any type)\r\n\t * @param {string} [json.mode] - [Garbage|Session|Permanent] Memory mode\r\n\t * @example\r\n\t * internals.pushMemory({\"name\":\"test\",\"mode\":\"Session\",\"value\":\"Test String\"});\r\n\t * internals.pushMemory({\"name\":\"test\",\"mode\":\"Session\",\"value\":{\"trueFalse\":[true,false],\"objects\":[{\"ElementOne\":\"Result One\"},{\"ElementTwo\":\"Result Two\"}]}});\r\n\t */\r\n\tpushMemory(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet modArray=[];\r\n\t\tif(memory[json.name])\r\n\t\t\tmodArray=memory[json.name].value;\r\n\t\tmodArray.push(json.value)\r\n\t\tself.queue.setMemory(json.name,modArray,json.mode);\r\n\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n    /**\r\n     * Set a register\r\n     * @param {int} pid - process ID\r\n     * @param {object} json - queue arguments\r\n     * @param {string} json.name - name of register\r\n     * @example\r\n     * internals.setRegister({\"name\":\"test\"});\r\n     */\r\n\tsetRegister(pid,json) {\r\n        let self=this;\r\n        self.queue.setRegister(json.name);\r\n        self.finished(pid,self.queue.DEFINE.FIN_OK);\r\n    }\r\n\r\n\r\n\t/**\r\n\t * delete a register\r\n\t * @param {int} pid - process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.name - name of register\r\n\t * @example\r\n\t * internals.deleteRegister({\"name\":\"test\"});\r\n\t */\r\n\tdeleteRegister(pid,json) {\r\n\t\tlet self=this;\r\n\t\tself.queue.deleteRegister(json.name);\r\n\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Delete a memory value\r\n\t *\r\n\t * @param {int} pid - process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.name - name of memory item\r\n\t * @param {*} json.value - value to set (can be any type)\r\n\t * @param {string} [json.mode] - [Garbage|Session|Permanent] Memory mode\r\n\t * @example\r\n\t * internals.setMemory({\"name\":\"test\",\"mode\":\"Session\",\"value\":\"Test String\"});\r\n\t * internals.setMemory({\"name\":\"test\",\"mode\":\"Session\",\"value\":{\"trueFalse\":[true,false],\"objects\":[{\"ElementOne\":\"Result One\"},{\"ElementTwo\":\"Result Two\"}]}});\r\n\t */\r\n\tdeleteMemory(pid,json) {\r\n\t\tthis.queue.deleteMemory(json.name);\r\n\t\tthis.finished(pid,this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * NOP - No operation\r\n\t *\r\n\t * @param {int} pid - process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @example\r\n\t * internals.nop();\r\n\t */\r\n\tnop(pid,json) {\r\n\t\tthis.finished(pid,this.queue.DEFINE.FIN_OK);\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Queueable/Internals.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "class",
    "name": "Internals",
    "memberof": "ourthings/Queueable/Internals.js",
    "static": true,
    "longname": "ourthings/Queueable/Internals.js~Internals",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/Internals.js",
    "importStyle": "Internals",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\nInternal queue functions exposed to queueables"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "interface": false,
    "extends": [
      "ourthings/Queueable.js~Queueable"
    ]
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "execute",
    "memberof": "ourthings/Queueable/Internals.js~Internals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Internals.js~Internals#execute",
    "access": "public",
    "description": "Execute a prepared queue",
    "examples": [
      "internals.execute({\"name\":\"myQueue\"});"
    ],
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "prepared queue to call"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "json.silentFail",
        "description": "fail the queue silently?"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "json.json",
        "description": "New arguments to send to queue"
      }
    ],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "ifqueue",
    "memberof": "ourthings/Queueable/Internals.js~Internals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Internals.js~Internals#ifqueue",
    "access": "public",
    "description": "Check a statement and run prepared queue if its true",
    "examples": [
      "internals.ifqueue({\"statement\":\"memory.loginAPI.value.token\",\"name\":\"loggedIn\"});"
    ],
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.statement",
        "description": "statement to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "prepared queue to call"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.else",
        "description": "prepared queue to call on else"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "json.json",
        "description": "New arguments to send to queue"
      }
    ],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "setMemory",
    "memberof": "ourthings/Queueable/Internals.js~Internals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Internals.js~Internals#setMemory",
    "access": "public",
    "description": "Set a memory value",
    "examples": [
      "internals.setMemory({\"name\":\"test\",\"mode\":\"Session\",\"value\":\"Test String\"});\ninternals.setMemory({\"name\":\"test\",\"mode\":\"Session\",\"value\":{\"trueFalse\":[true,false],\"objects\":[{\"ElementOne\":\"Result One\"},{\"ElementTwo\":\"Result Two\"}]}});"
    ],
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "name of memory item"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json.value",
        "description": "value to set (can be any type)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "json.mode",
        "description": "[Garbage|Session|Permanent] Memory mode"
      }
    ],
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "pushMemory",
    "memberof": "ourthings/Queueable/Internals.js~Internals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Internals.js~Internals#pushMemory",
    "access": "public",
    "description": "push a value to an array memory value",
    "examples": [
      "internals.pushMemory({\"name\":\"test\",\"mode\":\"Session\",\"value\":\"Test String\"});\ninternals.pushMemory({\"name\":\"test\",\"mode\":\"Session\",\"value\":{\"trueFalse\":[true,false],\"objects\":[{\"ElementOne\":\"Result One\"},{\"ElementTwo\":\"Result Two\"}]}});"
    ],
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "name of memory item"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json.value",
        "description": "value to set (can be any type)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "json.mode",
        "description": "[Garbage|Session|Permanent] Memory mode"
      }
    ],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "setRegister",
    "memberof": "ourthings/Queueable/Internals.js~Internals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Internals.js~Internals#setRegister",
    "access": "public",
    "description": "Set a register",
    "examples": [
      "internals.setRegister({\"name\":\"test\"});"
    ],
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "name of register"
      }
    ],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "deleteRegister",
    "memberof": "ourthings/Queueable/Internals.js~Internals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Internals.js~Internals#deleteRegister",
    "access": "public",
    "description": "delete a register",
    "examples": [
      "internals.deleteRegister({\"name\":\"test\"});"
    ],
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "name of register"
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "deleteMemory",
    "memberof": "ourthings/Queueable/Internals.js~Internals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Internals.js~Internals#deleteMemory",
    "access": "public",
    "description": "Delete a memory value",
    "examples": [
      "internals.setMemory({\"name\":\"test\",\"mode\":\"Session\",\"value\":\"Test String\"});\ninternals.setMemory({\"name\":\"test\",\"mode\":\"Session\",\"value\":{\"trueFalse\":[true,false],\"objects\":[{\"ElementOne\":\"Result One\"},{\"ElementTwo\":\"Result Two\"}]}});"
    ],
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "name of memory item"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json.value",
        "description": "value to set (can be any type)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "json.mode",
        "description": "[Garbage|Session|Permanent] Memory mode"
      }
    ],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "nop",
    "memberof": "ourthings/Queueable/Internals.js~Internals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Internals.js~Internals#nop",
    "access": "public",
    "description": "NOP - No operation",
    "examples": [
      "internals.nop();"
    ],
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      }
    ],
    "return": null
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "ourthings/Queueable/Mapbox.js",
    "content": "import Queueable from \"../Queueable\";\r\nimport MapboxGL from 'mapbox-gl';\r\nimport centroid from '@turf/centroid';\r\nimport bbox from '@turf/bbox';\r\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\r\nimport MapboxEdit from 'mapbox-gl-edit';\r\n\r\nexport default class Mapbox extends Queueable {\r\n\r\n\tinit(queue) {\r\n\t\tthis.queue = queue;\r\n\t\tthis.maps = {};\r\n\t\tthis.overlays = {};\r\n\t\tthis.ready = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new mapbox gl map\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - name for the map (used to reference)\r\n\t * @param {string} json.target - id of element in the page to target\r\n\t * @param {string} json.style - mapbox style for the map\r\n\t * @param {int} json.zoom - Set the initial zoom of the map\r\n\t * @param {int} json.maxZoom - Set the max zoom for the map (default 34)\r\n\t * @param {array} json.center - Center on\r\n\t * @example\r\n\t * mapbox.addMap({\"map\": \"testMap\", \"target\":\"mapboxMap\", \"style\": \"mapbox://styles/mapbox/streets-v11\", \"zoom\": 8, \"center\": [-70, 41.2]});\r\n\t */\r\n\taddMap(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tzoom: 0,\r\n\t\t\tcenter: [-74.5, 40],\r\n\t\t\tstyle: 'mapbox://styles/mapbox/streets-v11',\r\n\t\t\ttarget: 'map',\r\n\t\t\ttoken: 'fail',\r\n\t\t\tpitch: 0,\r\n\t\t\tmapZoom: 24\r\n\t\t}, json);\r\n\r\n\t\tMapboxGL.accessToken = options.token;\r\n\t\tconst map = new MapboxGL.Map({\r\n\t\t\tcontainer: options.target, // container id\r\n\t\t\tstyle: options.style, // stylesheet location\r\n\t\t\tcenter: options.center, // starting position [lng, lat]\r\n\t\t\tzoom: options.zoom, // starting zoom\r\n\t\t\tpitch: options.pitch,\r\n\t\t\tmaxZoom: options.maxZoom\r\n\t\t});\r\n\r\n\t\tthis.maps[options.map] = {map, layers: {}};\r\n\t\tthis.maps[options.map].sources = {};\r\n\t\tthis.maps[options.map].controls = {};\r\n\r\n\t\tmap.on('load', () => {\r\n\t\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t\t});\r\n\r\n\t\t/*\r\n\t\t * On idle run a queue (this is needed for blocking access to data before its loaded). We delay the start of this\r\n\t\t * monitor to allow time for setup commands to run\r\n\t\t */\r\n\t\t/*\r\n\t\t\t\tsetTimeout(function () {\r\n\t\t*/\r\n\t\tmap.on('idle', function () {\r\n\t\t\tself.queue.setRegister(options.map + 'Idle');\r\n\t\t\t//self.queue.execute(options.map+'Idle');\r\n\t\t});\r\n\t\tmap.on('dataloading', function (data) {\r\n\t\t\tif (data.isSourceLoaded)\r\n\t\t\t\tself.queue.setRegister(options.map + 'DataLoaded');\r\n\t\t\t//self.queue.execute(options.map+'Idle');\r\n\t\t})\r\n\t\t/*\r\n\t\t\t\t}, 5000);\r\n\t\t*/\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Add a new source and layer to the map\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - name for the map (used to reference)\r\n\t * @param {string} json.name - Name for the layer/source\r\n\t * @param {string} json.type - The type of feature for the layer one of ['Point', 'Line', 'Polygon', 'MultiLineString']\r\n\t * @param {string} json.filter - The layer filter\r\n\t * @param {string|object} json.data - Set the data of the source, this could also be a url for the data\r\n\t * @example\r\n\t * mapbox.addSource({\"map\": \"testMap\", \"name\": \"newLayer\", \"featureType\": \"Point\", \"data\": \"https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_ports.geojson\"});\r\n\t */\r\n\taddSource(pid, json) {\r\n\r\n\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tdata: {\r\n\t\t\t\ttype: 'FeatureCollection',\r\n\t\t\t\tfeatures: [],\r\n\t\t\t},\r\n\t\t\tname: 'default'\r\n\t\t}, json);\r\n\t\tthis.queue.deleteRegister(options.map + 'Idle');\r\n\r\n\t\tthis.maps[options.map].map.addSource(options.name, {\r\n\t\t\ttype: 'geojson',\r\n\t\t\tdata: options.data,\r\n\t\t});\r\n\r\n\t\t//this._addLayer(options);\r\n\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Add the layer to the map once a source has been created.\r\n\t * @param {object} options\r\n\t * @param {string} options.type - The type of feature that the layer is.\r\n\t * @param {string} options.name - The name for the layer\r\n\t * @param {object} options.paint - The paint styling for the layer\r\n\t * @param {object} options.layout - The layout styling for the layer\r\n\t * @private\r\n\t */\r\n\taddLayer(pid, json) {\r\n\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\ttype: 'point',\r\n\t\t\tsource: 'default',\r\n\t\t\tpaint: {},\r\n\t\t}, json);\r\n\r\n\t\tlet mapOptions = {\r\n\t\t\tid: options.name,\r\n\t\t\ttype: options.type,\r\n\t\t\tsource: options.source,\r\n\t\t\tpaint: options.paint\r\n\t\t};\r\n\r\n\t\tif (options.layout) {\r\n\t\t\tif (typeof options.layout !== 'object')\r\n\t\t\t\toptions.layout = window[options.layout];\r\n\t\t\tmapOptions.layout = options.layout;\r\n\t\t}\r\n\r\n\t\tif (json.filter)\r\n\t\t\tmapOptions.filter = options.filter;\r\n\r\n\t\tthis.maps[options.map].map.addLayer(mapOptions);\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Load images for use as icons (needs to be run prior to layer addition)\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - name for the map (used to reference)\r\n\t * @param {object} json.images - array of images to load in format [{\"url\":\"url to image \",\"id\":\"id to use\"}]\r\n\t */\r\n\taddImages(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\timages: []\r\n\t\t}, json);\r\n\t\tlet self = this;\r\n\t\tPromise.all(\r\n\t\t\toptions.images.map(img => new Promise((resolve, reject) => {\r\n\t\t\t\tself.maps[options.map].map.loadImage(img.url, function (error, res) {\r\n\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\tconsole.error('IMAGE: ' + img.url + ' - ' + img.id);\r\n\t\t\t\t\t\tthrow error;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.maps[options.map].map.addImage(img.id, res);\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t})\r\n\t\t\t}))\r\n\t\t).then(function () {\r\n\t\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Add a select control to a layer\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - name for the map (used to reference)\r\n\t * @param {string} json.layers - name for the map layers in []\r\n\t * @param {object} json.queue - queue to call upon select\r\n\t * @param {object} json.unselectQueue - queue to call upon unselect\r\n\t */\r\n\taddSelect(pid, json) {\r\n\t\tlet self = this;\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tqueue: \"select\",\r\n\t\t\tunselectQueue: \"unselect\"\r\n\t\t}, json);\r\n\r\n\t\tself.maps[options.map].map.on('click', function (e) {\r\n\t\t\tlet f = self.maps[options.map].map.queryRenderedFeatures(e.point, {layers: options.layers});\r\n\t\t\t//debugger;\r\n\t\t\t//mapbox converts multi depth objects to strings. Deserialize this\r\n\t\t\tif (f.length >= 1) {\r\n\r\n\t\t\t\tfor (let i in f[0].properties) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tf[0].properties[i] = JSON.parse(f[0].properties[i]);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t//do nothing (this was not a multi depth)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tconst selectDetails = {\r\n\t\t\t\t\tcoordinates: f[0].geometry.coordinates.slice(),\r\n\t\t\t\t\tcentroid: centroid(f[0].geometry).geometry.coordinates,\r\n\t\t\t\t\tproperties: f[0].properties,\r\n\t\t\t\t\tfeatureJSON: f[0].toJSON()\r\n\t\t\t\t};\r\n\r\n\t\t\t\tself.queue.setMemory(\"select\", selectDetails, \"Session\");\r\n\r\n\t\t\t\tself.queue.execute(options.queue, selectDetails);\r\n\t\t\t} else {\r\n\t\t\t\tself.queue.setMemory(\"select\", {}, \"Session\");\r\n\t\t\t\tself.queue.execute(options.queue);\r\n\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\t/**\r\n\t * Set filter on a layer\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - name for the map (used to reference)\r\n\t * @param {string} json.layer - name for the map layer\r\n\t * @param {array} json.filter - new filter\r\n\t */\r\n\tsetFilter(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tlayer: 'default',\r\n\t\t\tfilter: []\r\n\t\t}, json);\r\n\t\tthis.maps[options.map].map.setFilter(options.layer, options.filter);\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Await the source to be valid on a layer because mapbox has no event for this *WARNING SHIT HACK*\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - name for the map (used to reference)\r\n\t * @param {string} json.layer - name for the map layer\r\n\t */\r\n\tawaitSourceFeatures(pid, json) {\r\n\t\tlet self = this;\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tlayer: 'default'\r\n\t\t}, json);\r\n\t\tconst features = this.maps[options.map].map.querySourceFeatures(options.layer);\r\n\t\tif (features.length > 0) {\r\n\t\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t\t} else {\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tself.awaitSourceFeatures(pid, json);\r\n\t\t\t}, 500);\r\n\t\t}\r\n\t}\r\n\r\n\tmanualSelect(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tlayer: 'default',\r\n\t\t\tqueue: \"select\",\r\n\t\t\tfilter: []\r\n\t\t}, json);\r\n\t\tlet selectDetails = {};\r\n\t\t//const features = this.maps[options.map].map.querySourceFeatures(options.layer);\r\n\t\tconst features = this.maps[options.map].sources[options.layer];\r\n\t\tfeatures.forEach(function (feature) {\r\n\t\t\tlet res = eval(feature.properties[options.filter[1]] + ' ' + options.filter[0] + ' ' + options.filter[2]);\r\n\t\t\tif (res) {\r\n\t\t\t\tselectDetails.properties = feature.properties;\r\n\t\t\t\tselectDetails.coordinates = feature.geometry.coordinates.slice();\r\n\t\t\t\tselectDetails.centroid = centroid(feature.geometry).geometry.coordinates;\r\n\t\t\t\tselectDetails.featureJSON = JSON.stringify(feature);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tself.queue.setMemory(\"select\", selectDetails, \"Session\");\r\n\t\tself.queue.execute(options.queue, selectDetails);\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\taddClick(pid, json) {\r\n\t\tlet self = this;\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tqueue: 'clicked'\r\n\t\t}, json);\r\n\t\tthis.maps[options.map].map.on('click', function (e) {\r\n\t\t\tlet data = {location: e.lngLat};\r\n\t\t\tself.queue.setMemory(\"click\", data, \"Session\");\r\n\t\t\tself.queue.execute(options.queue, data);\r\n\t\t});\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\tremoveClick(pid, json) {\r\n\t\tlet self = this;\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default'\r\n\t\t}, json);\r\n\t\tthis.maps[options.map].map.off('click', function (e) {\r\n\t\t});\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Set the data for a layer\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - The name of the map that the layer is on\r\n\t * @param {string} json.source - The name of the source that the data will be set on\r\n\t * @param {object|string} json.data - The data to set the layer to (this will override old data)\r\n\t */\r\n\tsetData(pid, json) {\r\n\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tsource: 'default',\r\n\t\t\tdata: {\r\n\t\t\t\ttype: 'FeatureCollection',\r\n\t\t\t\tfeatures: [],\r\n\t\t\t},\r\n\t\t\tmode: 'clear',\r\n\t\t\tindex: 'id'\r\n\t\t}, json);\r\n\t\tthis.queue.deleteRegister(options.map + 'Idle');\r\n\t\tif(options.mode==='append') {\r\n\t\t\tfor(let i in this.maps[options.map].sources[options.source]) {\r\n\t\t\t\toptions.data.features.push(this.maps[options.map].sources[options.source][i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet newFeatures=[];\r\n\t\tif(options.mode==='delete') {\r\n\t\t\tfor(let i in this.maps[options.map].sources[options.source]) {\r\n\t\t\t\tlet fdelete=false;\r\n\t\t\t\tfor(let j in options.data.features) {\r\n\t\t\t\t\tif(options.data.features[j].properties[options.index]===this.maps[options.map].sources[options.source][i].properties[options.index]) {\r\n\t\t\t\t\t\tfdelete=true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(fdelete===false)\r\n\t\t\t\t\tnewFeatures.push(this.maps[options.map].sources[options.source][i]);\r\n\t\t\t}\r\n\t\t\toptions.data.features=newFeatures;\r\n\t\t}\r\n\r\n\t\tthis.maps[options.map].map.getSource(options.source).setData(options.data);\r\n\t\t// Make a copy of the source data because the internal call is not reliable\r\n\t\tthis.maps[options.map].sources[options.source] = options.data.features;\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\tsetPaintProperty(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tlayer: 'default'\r\n\t\t}, json);\r\n\t\tthis.maps[options.map].map.setPaintProperty(options.layer, options.property, options.value);\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\tsetLayoutProperty(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tlayer: 'default'\r\n\t\t}, json);\r\n\t\tthis.maps[options.map].map.setLayoutProperty(options.layer, options.property, options.value);\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Set the data for a layer\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - The name of the map that the layer is on\r\n\t * @param {string} json.name - The name of the layer to clear\r\n\t */\r\n\tclearLayer(pid, json) {\r\n\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tlayer: 'default'\r\n\t\t}, json);\r\n\t\tthis.queue.deleteRegister(options.map + 'Idle');\r\n\r\n\t\tthis.maps[options.map].map.getSource(options.layer).setData({\r\n\t\t\ttype: 'FeatureCollection',\r\n\t\t\tfeatures: []\r\n\t\t});\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Zoom to the bounds of a layer\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - Name of the map the layer is within\r\n\t * @param {string} json.source - Name of the layer to zoom in to\r\n\t * @param {int} json.options - options as per: https://docs.mapbox.com/mapbox-gl-js/api/#map#fitbounds\r\n\t */\r\n\tzoomToBounds(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tsource: 'default',\r\n\t\t\toptions: {}\r\n\t\t}, json);\r\n\r\n\t\tlet bounds = new MapboxGL.LngLatBounds();\r\n\r\n\t\tthis.maps[options.map].sources[options.source].forEach(function (feature) {\r\n\t\t\tlet fbbox = bbox(feature.geometry);\r\n\t\t\tbounds.extend([fbbox[0], fbbox[1]], [fbbox[2], fbbox[3]]);\r\n\t\t});\r\n\t\tif(bounds._ne)\r\n\t\t\tthis.maps[options.map].map.fitBounds(bounds, options.options);\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * move to a feature\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - The map that the querying layer is on\r\n\t * @param {string} json.name - The name of the layer to query\r\n\t * @param {string} json.property - The property key to check against\r\n\t * @param {string} json.value - The value of the property that we'll be looking for\r\n\t */\r\n\tmoveToFeature(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tlayer: 'default',\r\n\t\t\tproperty: '',\r\n\t\t\tvalue: ''\r\n\t\t}, json);\r\n\r\n\t\tlet features = this.maps[options.map].map.getSource(options.layer)._data.features;\r\n\t\tlet pointGeom = null;\r\n\r\n\t\tfor (const feature of features) {\r\n\t\t\tif (feature.properties.hasOwnProperty(options.property))\r\n\t\t\t\t/* Note the == match, this is lose on purpose, due to int/string casting\r\n\t\t\t\t */\r\n\t\t\t\tif (feature.properties[options.property] == options.value) {\r\n\t\t\t\t\tpointGeom = feature;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t}\r\n\t\tif (pointGeom !== null) {\r\n\t\t\tthis.maps[options.map].map.flyTo({\r\n\t\t\t\tcenter: centroid(pointGeom.geometry).geometry.coordinates\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Zoom /MapboxGL move to a feature\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - The map that the querying layer is on\r\n\t * @param {string} json.name - The name of the layer to query\r\n\t * @param {string} json.property - The property key to check against\r\n\t * @param {string} json.value - The value of the property that we'll be looking for\r\n\t * @param {int} json.zoom - The final zoom level for viewing the point\r\n\t * @param {int} json.minZoom - The furthest out the map will zoom whilst flying to the point\r\n\t */\r\n\tzoomToFeature(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tlayer: 'default',\r\n\t\t\tproperty: '',\r\n\t\t\tvalue: ''\r\n\t\t}, json);\r\n\r\n\t\tlet features = this.maps[options.map].map.getSource(options.layer)._data.features;\r\n\t\tlet pointGeom = null;\r\n\r\n\t\tfor (const feature of features) {\r\n\t\t\tif (feature.properties.hasOwnProperty(options.property))\r\n\t\t\t\t/* Note the == match, this is lose on purpose, due to int/string casting\r\n\t\t\t\t */\r\n\t\t\t\tif (feature.properties[options.property] == options.value) {\r\n\t\t\t\t\tpointGeom = feature;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t}\r\n\t\tif (pointGeom !== null) {\r\n\t\t\tthis.maps[options.map].map.flyTo({\r\n\t\t\t\tcenter: centroid(pointGeom.geometry).geometry.coordinates,\r\n\t\t\t\tzoom: options.zoom,\r\n\t\t\t\tminZoom: options.minZoom,\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Move to a lat long\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - The map that the querying layer is on\r\n\t * @param {string} json.coordinates - lat long in array format\r\n\t */\r\n\tmoveToLocation(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default'\r\n\t\t}, json);\r\n\r\n\t\tthis.maps[options.map].map.flyTo({\r\n\t\t\tcenter: options.coordinates\r\n\t\t});\r\n\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Resize the visible map\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - The map that the querying layer is on\r\n\t */\r\n\tresize(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default'\r\n\t\t}, json);\r\n\t\tthis.maps[options.map].map.resize();\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Set pitch of the visible map\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - The map that the querying layer is on\r\n\t * @param {int} json.pitch - The map pitch\r\n\t */\r\n\tsetPitch(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tpitch: 0\r\n\t\t}, json);\r\n\t\tthis.maps[options.map].map.setPitch(options.pitch);\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Set a memory mapDetails to have current info on the state of the map\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - The map that the querying layer is on\r\n\t */\r\n\tgetMapDetails(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default'\r\n\t\t}, json);\r\n\t\tlet data = {\r\n\t\t\tcenter: this.maps[options.map].map.getCenter(),\r\n\t\t\tzoom: this.maps[options.map].map.getZoom()\r\n\t\t};\r\n\t\tself.queue.setMemory(\"mapDetails\", data, \"Session\");\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Zoom in the map\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - The map that the querying layer is on\r\n\t */\r\n\tzoomIn(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default'\r\n\t\t}, json);\r\n\t\tthis.maps[options.map].map.zoomIn();\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Zoom the map\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - The map that the querying layer is on\r\n\t */\r\n\tzoomTo(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tzoom: 1\r\n\t\t}, json);\r\n\t\tthis.maps[options.map].map.zoomTo(parseInt(options.zoom));\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Zoom out the map\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - The map that the querying layer is on\r\n\t */\r\n\tzoomOut(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default'\r\n\t\t}, json);\r\n\t\tthis.maps[options.map].map.zoomOut();\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Add a popup to the map\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - The map that the querying layer is on\r\n\t * @param {array} json.lngLat - The long Lat to place the popup at\r\n\t * @param {string} json.template - The template to use\r\n\t */\r\n\taddPopup(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tlngLat: [-96, 37.8],\r\n\t\t\toptions:{closeOnClick: false}\r\n\t\t}, json);\r\n\r\n\t\tif (this.popup !== undefined)\r\n\t\t\tthis.popup.remove();\r\n\t\tthis.popup = new MapboxGL.Popup(options.options)\r\n\t\t\t.setLngLat(options.lngLat)\r\n\t\t\t.setHTML(`<div id=\"pu_${pid}\"></div>`)\r\n\t\t\t.addTo(this.maps[options.map].map);\r\n\t\tthis.queue.templateProcessor(options.template, `#pu_${pid}`, this.queue.DEFINE.RENDER_REPLACE);\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Remove a popup from the map\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - The map that the querying layer is on\r\n\t */\r\n\tremovePopup(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default'\r\n\t\t}, json);\r\n\r\n\t\tif (this.popup !== undefined)\r\n\t\t\tthis.popup.remove();\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Query and highlight feature depending on the paint features\r\n\t * @param {int} pid\r\n\t * @param {object} json\r\n\t * @param {string} json.map - The map that the querying layer is on\r\n\t * @param {string} json.name - The name of the layer to query\r\n\t * @param {object} json.paint - The pain object for querying ans styling\r\n\t * @param {string} json.paint.type - The styling type that will be changed for highlighting\r\n\t * @param {array} json.paint.value - The list of paint styles for querying e.g. [[\"get\", \"feature_name\"], \"test_name\", \"#333399\"] This will be appended to the current style\r\n\t */\r\n\tpaintQueryFeatures(pid, json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tname: '',\r\n\t\t\tpaint: {},\r\n\t\t}, json);\r\n\r\n\t\tlet paint = JSON.parse(JSON.stringify(this.maps[options.map].layers[options.name])).defaultStyle[options.paint.type];\r\n\t\tlet final = null;\r\n\t\tif (typeof paint === 'object') {\r\n\t\t\tfinal = paint.splice([paint.length - 1], 1);\r\n\t\t\tfor (let value of options.paint.value) {\r\n\t\t\t\tfor (let i = 0; i < paint.length; i += 2) {\r\n\t\t\t\t\tif (value === paint[i]) {\r\n\t\t\t\t\t\tpaint.splice(i, 2);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Edge doesn't support ... notation ffs. Don't want to bable edge so changed for now\r\n\t\t\t// Untested\r\n\t\t\t//paint = [...paint, ...options.paint.value];\r\n\t\t\tpaint.push(options.paint.value)\r\n\t\t\tpaint.push(final[0]);\r\n\t\t} else {\r\n\t\t\tpaint = options.paint.value;\r\n\t\t}\r\n\r\n\t\tthis.maps[options.map].map.setPaintProperty(options.name, options.paint.type, paint);\r\n\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\taddDrawTools(pid,json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default'\r\n\t\t}, json);\r\n\t\tlet Draw = new MapboxDraw();\r\n\t\tthis.maps[options.map].map.addControl(Draw, 'top-left');\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\taddEditTools(pid,json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default',\r\n\t\t\tsource: 'default'\r\n\t\t}, json);\r\n\t\tthis.maps[options.map].controls['Edit']= new MapboxEdit(options);\r\n\t\tthis.maps[options.map].map.addControl(this.maps[options.map].controls['Edit']);\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\tremoveEditTools(pid,json) {\r\n\t\tconst options = Object.assign({\r\n\t\t\tmap: 'default'\r\n\t\t}, json);\r\n\t\tthis.maps[options.map].map.removeControl(this.maps[options.map].controls['Edit']);\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n}",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Queueable/Mapbox.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "class",
    "name": "Mapbox",
    "memberof": "ourthings/Queueable/Mapbox.js",
    "static": true,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/Mapbox.js",
    "importStyle": "Mapbox",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "ourthings/Queueable.js~Queueable"
    ]
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "init",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#init",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "queue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "queue",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#queue",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "maps",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#maps",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "overlays",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#overlays",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "ready",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#ready",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "addMap",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#addMap",
    "access": "public",
    "description": "Create a new mapbox gl map",
    "examples": [
      "mapbox.addMap({\"map\": \"testMap\", \"target\":\"mapboxMap\", \"style\": \"mapbox://styles/mapbox/streets-v11\", \"zoom\": 8, \"center\": [-70, 41.2]});"
    ],
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "name for the map (used to reference)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.target",
        "description": "id of element in the page to target"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.style",
        "description": "mapbox style for the map"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "json.zoom",
        "description": "Set the initial zoom of the map"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "json.maxZoom",
        "description": "Set the max zoom for the map (default 34)"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.center",
        "description": "Center on"
      }
    ],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "addSource",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#addSource",
    "access": "public",
    "description": "Add a new source and layer to the map",
    "examples": [
      "mapbox.addSource({\"map\": \"testMap\", \"name\": \"newLayer\", \"featureType\": \"Point\", \"data\": \"https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_ports.geojson\"});"
    ],
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "name for the map (used to reference)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "Name for the layer/source"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.type",
        "description": "The type of feature for the layer one of ['Point', 'Line', 'Polygon', 'MultiLineString']"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.filter",
        "description": "The layer filter"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json.data",
        "description": "Set the data of the source, this could also be a url for the data"
      }
    ],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "addLayer",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#addLayer",
    "access": "private",
    "description": "Add the layer to the map once a source has been created.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.type",
        "description": "The type of feature that the layer is."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.name",
        "description": "The name for the layer"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.paint",
        "description": "The paint styling for the layer"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.layout",
        "description": "The layout styling for the layer"
      }
    ],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "addImages",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#addImages",
    "access": "public",
    "description": "Load images for use as icons (needs to be run prior to layer addition)",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "name for the map (used to reference)"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json.images",
        "description": "array of images to load in format [{\"url\":\"url to image \",\"id\":\"id to use\"}]"
      }
    ],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "addSelect",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#addSelect",
    "access": "public",
    "description": "Add a select control to a layer",
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "name for the map (used to reference)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layers",
        "description": "name for the map layers in []"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json.queue",
        "description": "queue to call upon select"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json.unselectQueue",
        "description": "queue to call upon unselect"
      }
    ],
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "setFilter",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#setFilter",
    "access": "public",
    "description": "Set filter on a layer",
    "lineNumber": 243,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "name for the map (used to reference)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "name for the map layer"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.filter",
        "description": "new filter"
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "awaitSourceFeatures",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#awaitSourceFeatures",
    "access": "public",
    "description": "Await the source to be valid on a layer because mapbox has no event for this *WARNING SHIT HACK*",
    "lineNumber": 261,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "name for the map (used to reference)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "name for the map layer"
      }
    ],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "manualSelect",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#manualSelect",
    "access": "public",
    "description": null,
    "lineNumber": 277,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "addClick",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#addClick",
    "access": "public",
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "removeClick",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#removeClick",
    "access": "public",
    "description": null,
    "lineNumber": 317,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "setData",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#setData",
    "access": "public",
    "description": "Set the data for a layer",
    "lineNumber": 335,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "The name of the map that the layer is on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.source",
        "description": "The name of the source that the data will be set on"
      },
      {
        "nullable": null,
        "types": [
          "object",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.data",
        "description": "The data to set the layer to (this will override old data)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "setPaintProperty",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#setPaintProperty",
    "access": "public",
    "description": null,
    "lineNumber": 375,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "setLayoutProperty",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#setLayoutProperty",
    "access": "public",
    "description": null,
    "lineNumber": 384,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "clearLayer",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#clearLayer",
    "access": "public",
    "description": "Set the data for a layer",
    "lineNumber": 400,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "The name of the map that the layer is on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "The name of the layer to clear"
      }
    ],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "zoomToBounds",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#zoomToBounds",
    "access": "public",
    "description": "Zoom to the bounds of a layer",
    "lineNumber": 423,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Name of the map the layer is within"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.source",
        "description": "Name of the layer to zoom in to"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "json.options",
        "description": "options as per: https://docs.mapbox.com/mapbox-gl-js/api/#map#fitbounds"
      }
    ],
    "return": null
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "moveToFeature",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#moveToFeature",
    "access": "public",
    "description": "move to a feature",
    "lineNumber": 450,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "The map that the querying layer is on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "The name of the layer to query"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.property",
        "description": "The property key to check against"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.value",
        "description": "The value of the property that we'll be looking for"
      }
    ],
    "return": null
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "zoomToFeature",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#zoomToFeature",
    "access": "public",
    "description": "Zoom /MapboxGL move to a feature",
    "lineNumber": 490,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "The map that the querying layer is on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "The name of the layer to query"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.property",
        "description": "The property key to check against"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.value",
        "description": "The value of the property that we'll be looking for"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "json.zoom",
        "description": "The final zoom level for viewing the point"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "json.minZoom",
        "description": "The furthest out the map will zoom whilst flying to the point"
      }
    ],
    "return": null
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "moveToLocation",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#moveToLocation",
    "access": "public",
    "description": "Move to a lat long",
    "lineNumber": 528,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "The map that the querying layer is on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.coordinates",
        "description": "lat long in array format"
      }
    ],
    "return": null
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "resize",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#resize",
    "access": "public",
    "description": "Resize the visible map",
    "lineNumber": 546,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "The map that the querying layer is on"
      }
    ],
    "return": null
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "setPitch",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#setPitch",
    "access": "public",
    "description": "Set pitch of the visible map",
    "lineNumber": 561,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "The map that the querying layer is on"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "json.pitch",
        "description": "The map pitch"
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "getMapDetails",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#getMapDetails",
    "access": "public",
    "description": "Set a memory mapDetails to have current info on the state of the map",
    "lineNumber": 576,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "The map that the querying layer is on"
      }
    ],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "zoomIn",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#zoomIn",
    "access": "public",
    "description": "Zoom in the map",
    "lineNumber": 594,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "The map that the querying layer is on"
      }
    ],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "zoomTo",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#zoomTo",
    "access": "public",
    "description": "Zoom the map",
    "lineNumber": 608,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "The map that the querying layer is on"
      }
    ],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "zoomOut",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#zoomOut",
    "access": "public",
    "description": "Zoom out the map",
    "lineNumber": 623,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "The map that the querying layer is on"
      }
    ],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "addPopup",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#addPopup",
    "access": "public",
    "description": "Add a popup to the map",
    "lineNumber": 639,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "The map that the querying layer is on"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.lngLat",
        "description": "The long Lat to place the popup at"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.template",
        "description": "The template to use"
      }
    ],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "popup",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#popup",
    "access": "public",
    "description": null,
    "lineNumber": 648,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "removePopup",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#removePopup",
    "access": "public",
    "description": "Remove a popup from the map",
    "lineNumber": 663,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "The map that the querying layer is on"
      }
    ],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "paintQueryFeatures",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#paintQueryFeatures",
    "access": "public",
    "description": "Query and highlight feature depending on the paint features",
    "lineNumber": 684,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "The map that the querying layer is on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "The name of the layer to query"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json.paint",
        "description": "The pain object for querying ans styling"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.paint.type",
        "description": "The styling type that will be changed for highlighting"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.paint.value",
        "description": "The list of paint styles for querying e.g. [[\"get\", \"feature_name\"], \"test_name\", \"#333399\"] This will be appended to the current style"
      }
    ],
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "addDrawTools",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#addDrawTools",
    "access": "public",
    "description": null,
    "lineNumber": 716,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "addEditTools",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#addEditTools",
    "access": "public",
    "description": null,
    "lineNumber": 726,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "removeEditTools",
    "memberof": "ourthings/Queueable/Mapbox.js~Mapbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Mapbox.js~Mapbox#removeEditTools",
    "access": "public",
    "description": null,
    "lineNumber": 736,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 233,
    "kind": "file",
    "name": "ourthings/Queueable/Markdown.js",
    "content": "/** @module ourthings/Queueable/Markdown */\r\nimport Queueable from \"../Queueable\";\r\nimport showdown from \"Showdown\"\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Markdown Functions\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * //\r\n *\r\n */\r\nexport default class Markdown extends Queueable {\r\n\r\n\r\n\t/**\r\n\t * Convert MD to HTML to display\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.md - Markdown string\r\n\t * @param {string} json.name - memory name to set with the html\r\n\t * @param {string} json.options - Options to pass to showdown see: https://github.com/showdownjs/showdown/wiki/Showdown-options\r\n\t * @example markdown.makeHtml({\"md\":\"{{!memory.select.value.properties.description}}\",\"options\":{\"openLinksInNewWindow\":true}});\r\n\r\n\t */\r\n\tmakeHtml(pid,json) {\r\n\t\tlet options=Object.assign({\r\n\t\t\t\"name\":\"html\",\r\n\t\t\t\"options\":{}\r\n\t\t},json);\r\n\r\n\t\tconst converter = new showdown.Converter(options.options);\r\n\t\tlet html=converter.makeHtml(json.md);\r\n\t\tthis.queue.setMemory(options.name,html,\"Session\");\r\n\t\tthis.finished(pid,this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Queueable/Markdown.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 234,
    "kind": "class",
    "name": "Markdown",
    "memberof": "ourthings/Queueable/Markdown.js",
    "static": true,
    "longname": "ourthings/Queueable/Markdown.js~Markdown",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/Markdown.js",
    "importStyle": "Markdown",
    "description": "",
    "examples": [
      "//"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\nMarkdown Functions"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "interface": false,
    "extends": [
      "ourthings/Queueable.js~Queueable"
    ]
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "makeHtml",
    "memberof": "ourthings/Queueable/Markdown.js~Markdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Markdown.js~Markdown#makeHtml",
    "access": "public",
    "description": "Convert MD to HTML to display",
    "examples": [
      "markdown.makeHtml({\"md\":\"{{!memory.select.value.properties.description}}\",\"options\":{\"openLinksInNewWindow\":true}});"
    ],
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.md",
        "description": "Markdown string"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "memory name to set with the html"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.options",
        "description": "Options to pass to showdown see: https://github.com/showdownjs/showdown/wiki/Showdown-options"
      }
    ],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "ourthings/Queueable/Menu.js",
    "content": "/** @module ourthings/Queueable/Menu */\r\nimport Queueable from \"../Queueable\";\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Menu\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * menu.initMenu({\"targetId\":\"menu1\"});\r\n *\r\n */\r\nclass Menu extends Queueable {\r\n\r\n\t/**\r\n\t * Render a template into the dom using the queues templateProcessor\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - dom id of menu\r\n\t * @example\r\n\t * menu.initMenu({\"targetId\":\"menu1\"});\r\n\t */\r\n\tinitMenu(pid,json) {\r\n\t\tlet self=this;\r\n\t\tconst options = Object.assign({\r\n\t\t\t\"classModifiers\":[\r\n\t\t\t\t{\"targetId\":\".main-menu\",\"class\":\"open-this-menu\"},\r\n\t\t\t\t{\"targetId\":\".page-header\",\"clas\":\"open-search\"}\r\n\t\t\t],\r\n\t\t\t\"menuTop\":\"#menuTop\"\r\n\t\t}, json);\r\n\t\tconst element=this.queue.getElement(options.targetId);\r\n\r\n\t\tconst menuTop=self.queue.getElement(options.menuTop);\r\n\r\n\t\telement.addEventListener(\"click\", function (e) {\r\n\t\t\tif(menuTop.getAttribute('aria-expanded')==='true') {\r\n\t\t\t\t// Close\r\n\t\t\t\tcloseMenu();\r\n\t\t\t} else {\r\n\t\t\t\t// Open\r\n\t\t\t\tfor (let i in options.classModifiers) {\r\n\t\t\t\t\tconst modElement = self.queue.getElement(options.classModifiers[i].targetId);\r\n\t\t\t\t\tmodElement.classList.add(options.classModifiers[i].class);\r\n\t\t\t\t}\r\n\t\t\t\tmenuTop.setAttribute('aria-expanded','true');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tfunction closeMenu() {\r\n\t\t\tfor (let i in options.classModifiers) {\r\n\t\t\t\tconst modElement = self.queue.getElement(options.classModifiers[i].targetId);\r\n\t\t\t\tmodElement.classList.remove(options.classModifiers[i].class);\r\n\t\t\t}\r\n\t\t\tmenuTop.setAttribute('aria-expanded','false');\r\n\t\t}\r\n\r\n\t\telement.addEventListener(\"blur\", function (e) {\r\n\t\t\tsetTimeout( function() {\r\n\t\t\t\tcloseMenu();\r\n\t\t\t},500);\r\n\t\t});\r\n\r\n\r\n\t\t\t/*\r\n\t\t\t * add the menu children click events\r\n\t\t\t */\r\n\t\tfor(let i=0;i<menuTop.children.length;i++) {\r\n\t\t\tmenuTop.children[i].addEventListener(\"click\", function (e) {\r\n\t\t\t\tfor (let i in options.classModifiers) {\r\n\t\t\t\t\tconst modElement = self.queue.getElement(options.classModifiers[i].targetId);\r\n\t\t\t\t\tmodElement.classList.remove(options.classModifiers[i].class);\r\n\t\t\t\t}\r\n\t\t\t\tmenuTop.setAttribute('aria-expanded','false');\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n}\r\n\r\nexport default Menu;",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Queueable/Menu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "class",
    "name": "Menu",
    "memberof": "ourthings/Queueable/Menu.js",
    "static": true,
    "longname": "ourthings/Queueable/Menu.js~Menu",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/Menu.js",
    "importStyle": "Menu",
    "description": "",
    "examples": [
      "menu.initMenu({\"targetId\":\"menu1\"});"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\nMenu"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "interface": false,
    "extends": [
      "ourthings/Queueable.js~Queueable"
    ]
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "initMenu",
    "memberof": "ourthings/Queueable/Menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Menu.js~Menu#initMenu",
    "access": "public",
    "description": "Render a template into the dom using the queues templateProcessor",
    "examples": [
      "menu.initMenu({\"targetId\":\"menu1\"});"
    ],
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "dom id of menu"
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "file",
    "name": "ourthings/Queueable/Openlayers.js",
    "content": "/** @module Openlayers */\r\nimport Queueable from \"../Queueable\";\r\nimport {Map, View, Feature} from 'ol';\r\nimport {getWidth, getTopLeft} from 'ol/extent.js';\r\n\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport Heatmap from 'ol/layer/Heatmap';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport {Point} from 'ol/geom.js';\r\n\r\nimport Disposable from 'ol/Disposable';\r\nimport OSM from 'ol/source/OSM';\r\nimport WMTS from 'ol/source/WMTS';\r\nimport WMTSTileGrid from 'ol/tilegrid/WMTS';\r\nimport XYZ from 'ol/source/XYZ.js';\r\nimport TileWMS from 'ol/source/TileWMS';\r\n\r\nimport WKT from 'ol/format/WKT';\r\nimport Overlay from 'ol/Overlay';\r\nimport {unByKey} from 'ol/Observable'\r\n\r\n\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport {fromLonLat, units, epsg3857, epsg4326} from 'ol/proj';\r\n\r\nimport Select from 'ol/interaction/Select';\r\nimport Snap from 'ol/interaction/Snap';\r\nimport Modify from 'ol/interaction/Modify';\r\nimport Draw from 'ol/interaction/Draw';\r\n\r\nimport proj4 from \"proj4\";\r\nimport {register} from 'ol/proj/proj4';\r\nimport {get as getProjection} from 'ol/proj'\r\n\r\nimport {transform} from 'ol/proj';\r\n\r\nimport {defaults as defaultInteractions, DragRotateAndZoom} from 'ol/interaction';\r\n\r\nimport {click, pointerMove, altKeyOnly, shiftKeyOnly, singleClick} from 'ol/events/condition';\r\n\r\nimport * as consoleBadge from \"console-badge\";\r\n\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nimport {point, polygon, multiPolygon,featureCollection,lineString} from '@turf/turf';\r\nimport booleanPointInPolygon from '@turf/boolean-point-in-polygon';\r\nimport booleanContains from '@turf/boolean-contains';\r\nimport buffer from '@turf/buffer';\r\nimport kinks from '@turf/kinks';\r\nimport bboxPolygon from '@turf/bbox-polygon';\r\nimport bbox from '@turf/bbox';\r\nimport union from '@turf/union';\r\nimport truncate from '@turf/truncate';\r\nimport clean from '@turf/clean-coords';\r\nimport lineIntersect from '@turf/line-intersect';\r\nimport lineOffset from '@turf/line-offset';\r\nimport convex from '@turf/convex';\r\nimport explode from '@turf/explode';\r\nimport difference from '@turf/difference';\r\nimport lineOverlap from '@turf/line-overlap';\r\n\r\nproj4.defs([\r\n\t[\"EPSG:27700\", \"+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.999601 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894 +datum=OSGB36 +units=m +no_defs\"]\r\n]);\r\n\r\nregister(proj4);\r\n\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Openlayers Hook\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * //\r\n *\r\n * @description You need to add \"ol\": \"^5.3.0\" to your package.json to build with openlayers\r\n *\r\n */\r\nexport default class Openlayers extends Queueable {\r\n\r\n\tinit(queue) {\r\n\t\tthis.queue = queue;\r\n\r\n\t\tthis.maps = {};\r\n\r\n\t\tthis.overlays = {};\r\n\r\n\t\tthis.ready = true;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * Create a new map\r\n\t * @param {int} pid - process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.map - name for the map (used to reference)\r\n\t * @param {string} json.target - id of element in the page to target\r\n\t * @param {int} json.zoom - initial zoom level\r\n\t * @param {int} json.maxZoom - Maximum zoom\r\n\t * @param {array} json.center - Center on\r\n\t * @param {string} json.renderer - Renderers to use\r\n\t * @example\r\n\t * openlayer.addMap();\r\n\t *\r\n\t */\r\n\taddMap(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"maxZoom\": 25,\r\n\t\t\t\"zoom\": 0,\r\n\t\t\t\"renderer\": ['webgl', 'canvas'],\r\n\t\t\t\"target\": \"map\",\r\n\t\t\t\"center\": [0, 0],\r\n\t\t\t\"projection\": \"EPSG:3857\",\r\n\t\t\t\"debug\": false\r\n\t\t}, json);\r\n\t\tlet projection = getProjection(options.projection);\r\n\t\tconst map = new Map({\r\n\t\t\ttarget: options.target,\r\n\t\t\tview: new View({\r\n\t\t\t\tcenter: options.center,\r\n\t\t\t\tzoom: options.zoom,\r\n\t\t\t\tmaxZoom: options.maxZoom,\r\n\t\t\t\trenderer: options.renderer,\r\n\t\t\t\tprojection: projection,\r\n\t\t\t\tresolutions: options.resolutions,\r\n\t\t\t\textent: options.extent,\r\n\t\t\t}),\r\n\t\t\tinteractions: defaultInteractions().extend([\r\n\t\t\t\tnew DragRotateAndZoom()\r\n\t\t\t]),\r\n\t\t\tkeyboardEventTarget: document\r\n\r\n\t\t});\r\n\t\tif (options.debug === true) {\r\n\t\t\tself.queue.consoleBadge({\r\n\t\t\t\tmode: 'shields.io',\r\n\t\t\t\tleftText: 'Map debugger online',\r\n\t\t\t\trightText: options.map,\r\n\t\t\t\trightBgColor: '#7277ff',\r\n\t\t\t\trightTextColor: '#1a1a1a'\r\n\t\t\t});\r\n\t\t\tmap.on('moveend', self._debug);\r\n\t\t}\r\n\t\tself.maps[options.map] = {\"object\": map, \"layers\": {}, zoom: map.getView().getZoom(), \"controls\": {}};\r\n\r\n\t\tmap.getView().on('propertychange', function (e) {\r\n\t\t\tswitch (e.key) {\r\n\t\t\t\tcase 'resolution': {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t *  Check for judder - We only want zoom events that are not a transition\r\n\t\t\t\t\t */\r\n\r\n\t\t\t\t\tlet level = Math.round(map.getView().getZoom());\r\n\t\t\t\t\tlet zoomLevel = self.maps[options.map].zoom;\r\n\r\n\t\t\t\t\tif (zoomLevel !== level || map.getView().getZoom() % 1 === 0) {\r\n\t\t\t\t\t\tself.queue.setMemory(options.map + 'ResolutionChange', {\r\n\t\t\t\t\t\t\t\"zoom\": map.getView().getZoom(),\r\n\t\t\t\t\t\t\t\"resolution\": map.getView().getResolution()\r\n\t\t\t\t\t\t}, \"Session\");\r\n\t\t\t\t\t\t// Silent Fail this as its not critical\r\n\t\t\t\t\t\tself.queue.execute(options.map + \"ResolutionChange\",{},true);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tself.maps[options.map].zoom = zoomLevel;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t_debug(event) {\r\n\t\tlet map = event.map;\r\n\t\tlet extent = map.getView().calculateExtent(map.getSize());\r\n\t\tlet center = map.getView().getCenter();\r\n\t\tself.queue.consoleBadge({\r\n\t\t\tmode: 'shields.io',\r\n\t\t\tleftText: 'Map Extent',\r\n\t\t\trightText: extent,\r\n\t\t\trightBgColor: '#7277ff',\r\n\t\t\trightTextColor: '#1a1a1a'\r\n\t\t});\r\n\t\tself.queue.consoleBadge({\r\n\t\t\tmode: 'shields.io',\r\n\t\t\tleftText: 'Map Center',\r\n\t\t\trightText: center,\r\n\t\t\trightBgColor: '#7277ff',\r\n\t\t\trightTextColor: '#1a1a1a'\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * Add a layer to the map\r\n\t * @param {int} pid - process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.map - name for the map (used to reference)\r\n\t * @param {string} json.name - name for the layer (used to reference)\r\n\t * @param {string} json.typr - Layer type osm,vector\r\n\t * @param {float} json.opacity - layer opacity\r\n\t * @param {boolean} json.transparent - is the layer transparent?\r\n\t * @param {string} json.style - Style object to use\r\n\t * @param {boolean} json.active - Is the layer active\r\n\t * @param {object|string} json.geojson - geojson to add to the layer (vector)\r\n\t * @example\r\n\t * openlayer.addLayer();\r\n\t *\r\n\t */\r\n\r\n\taddLayer(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"name\": \"default\",\r\n\t\t\t\"opacity\": 1,\r\n\t\t\t\"transparent\": false,\r\n\t\t\t\"active\": true\r\n\t\t}, json);\r\n\t\tlet map = self.maps[options.map].object;\r\n\t\tlet olLayer = null;\r\n\r\n\t\t/*\r\n\t\t * If we had a style specified then we need to check if it needs expanding\r\n\t\t */\r\n\t\tif (options.style !== undefined && typeof options.style !== 'object')\r\n\t\t\toptions.style = eval(options.style);\r\n\r\n\t\t/*\r\n\t\t * Find the requested layer type as a function\r\n\t\t */\r\n\t\tlet layerFunction = self[\"_addLayer_\" + options.type];\r\n\t\tif (typeof layerFunction === \"function\") {\r\n\t\t\tolLayer = layerFunction.apply(self, [options]);\r\n\t\t} else {\r\n\t\t\tself.finished(pid, self.queue.DEFINE.FIN_ERROR, \"No add layer function for \" + options.type);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t/*\r\n\t\t * Add the layer and update the the maps object with the new layers\r\n\t\t */\r\n\t\tmap.addLayer(olLayer);\r\n\t\tself.maps[options.map].layers[options.name] = olLayer;\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Add an osm layer\r\n\t * @param options\r\n\t * @return {TileLayer}\r\n\t * @private\r\n\t */\r\n\t_addLayer_osm(options) {\r\n\t\tlet olLayer = new TileLayer({\r\n\t\t\tsource: new OSM()\r\n\t\t});\r\n\t\treturn olLayer;\r\n\t}\r\n\r\n\t/**\r\n\t * Add an wmts layer\r\n\t * @param options\r\n\t * @return {TileLayer}\r\n\t * @private\r\n\t */\r\n\t_addLayer_wmts(options) {\r\n\t\tlet self = this;\r\n\t\tlet map = self.maps[options.map].object;\r\n\t\tlet view = map.getView();\r\n\t\tlet source = new WMTS({\r\n\t\t\turl: options.url,\r\n\t\t\tlayer: options.layer,\r\n\t\t\tmatrixSet: options.matrixSet,\r\n\t\t\tformat: 'image/png',\r\n\t\t\tcrossOrigin: 'anonymous',\r\n\t\t\tprojection: view.getProjection(),\r\n\t\t\ttileGrid: new WMTSTileGrid({\r\n\t\t\t\tresolutions: view.getResolutions(),\r\n\t\t\t\tmatrixIds: options.matrix,\r\n\t\t\t\torigin: options.origin\r\n\r\n\t\t\t})\r\n\t\t});\r\n\t\tlet olLayer = new TileLayer({\r\n\t\t\textent: options.extent,\r\n\t\t\topacity: options.opacity,\r\n\t\t\tvisible: options.active,\r\n\t\t\tname: options.name,\r\n\t\t\tsource: source\r\n\t\t});\r\n\r\n\t\treturn olLayer;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Add a wms layer\r\n\t * @param options\r\n\t * @return {TileLayer}\r\n\t * @private\r\n\t */\r\n\t_addLayer_wms(json) {\r\n\t\tlet options = Object.assign({\r\n\t\t\tserverType: '',\r\n\t\t\tparams: {},\r\n\t\t\tcrossOrigin: null,\r\n\t\t\thidpi: true\r\n\t\t}, json);\r\n\t\tlet source = new TileWMS({\r\n\t\t\turl: options.url,\r\n\t\t\tcrossOrigin: options.crossOrigin,\r\n\t\t\tparams:options.params,\r\n\t\t\tserverType: options.serverType,\r\n\t\t\thidpi: options.hidpi\r\n\t\t});\r\n\t\tlet olLayer = new TileLayer({\r\n\t\t\textent: options.extent,\r\n\t\t\topacity: options.opacity,\r\n\t\t\tvisible: options.active,\r\n\t\t\tname: options.name,\r\n\t\t\tsource: source\r\n\t\t});\r\n\t\treturn olLayer;\r\n\t}\r\n\r\n\t/**\r\n\t * Add an xyz layer\r\n\t * @param options\r\n\t * @return {TileLayer}\r\n\t * @private\r\n\t */\r\n\t_addLayer_xyz(options) {\r\n\t\tlet source = new XYZ({\r\n\t\t\turl: options.url,\r\n\t\t\tcrossOrigin: 'Anonymous'\r\n\t\t});\r\n\t\tlet olLayer = new TileLayer({\r\n\t\t\textent: options.extent,\r\n\t\t\topacity: options.opacity,\r\n\t\t\tvisible: options.active,\r\n\t\t\tname: options.name,\r\n\t\t\tsource: source\r\n\t\t});\r\n\t\treturn olLayer;\r\n\t}\r\n\r\n\t/**\r\n\t * Add a heatmap layer\r\n\t * @param options\r\n\t * @return {VectorLayer}\r\n\t * @private\r\n\t */\r\n\t_addLayer_heatmap(options) {\r\n\t\tlet source = {};\r\n\t\tlet vectorSource;\r\n\t\tif (options.geojson !== undefined) {\r\n\t\t\tsource.features = this._loadGeojson(options.map, options.geojson);\r\n\t\t}\r\n\t\tvectorSource = new VectorSource(source);\r\n\t\tlet olLayer = new Heatmap({\r\n\t\t\tname: options.name,\r\n\t\t\tvisible: options.active,\r\n\t\t\tsource: vectorSource,\r\n\t\t\topacity: options.opacity,\r\n\t\t});\r\n\t\treturn olLayer;\r\n\t}\r\n\r\n\t/**\r\n\t * Add a vector layer\r\n\t * @param options\r\n\t * @return {VectorLayer}\r\n\t * @private\r\n\t */\r\n\t_addLayer_vector(options) {\r\n\t\tlet self = this;\r\n\t\tlet source = {};\r\n\t\tlet vectorSource;\r\n\t\tif (options.geojson !== undefined) {\r\n\t\t\tsource.features = this._loadGeojson(options.map, options.geojson);\r\n\t\t}\r\n\t\tvectorSource = new VectorSource(source);\r\n\t\tlet olLayer = new VectorLayer({\r\n\t\t\tname: options.name,\r\n\t\t\tvisible: options.active,\r\n\t\t\tsource: vectorSource,\r\n\t\t\tstyle: options.style,\r\n\t\t\topacity: options.opacity,\r\n\t\t\tselectable: options.selectable,\r\n\t\t\thover: options.hover\r\n\t\t});\r\n\t\treturn olLayer;\r\n\t}\r\n\r\n\t/**\r\n\t * Make a new control\r\n\t *\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map name\r\n\t * @param {string} json.mode -  on|off\r\n\t * @param {array} json.name - What to call it (used later to reference)\r\n\t * @param {array} json.control - The control function to use\r\n\t *\r\n\t */\r\n\tmakeControl(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"mode\": \"on\",\r\n\t\t\t\"control\": \"simpleSelect\",\r\n\t\t\t\"name\": \"ss\"\r\n\t\t}, json);\r\n\t\tlet map = self.maps[options.map].object;\r\n\t\tlet control;\r\n\t\t/*\r\n\t\t * Find the requested control type as a function\r\n\t\t */\r\n\t\tlet controlFunction = self[\"_control_\" + options.control];\r\n\t\tif (typeof controlFunction === \"function\") {\r\n\t\t\tcontrol = controlFunction.apply(self, [options]);\r\n\t\t} else {\r\n\t\t\tself.finished(pid, self.queue.DEFINE.FIN_ERROR, \"No control function for \" + options.control);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tself.maps[options.map].controls[options.name] =\r\n\t\t\t{\r\n\t\t\t\tstate: options.mode,\r\n\t\t\t\tobj: control\r\n\t\t\t};\r\n\r\n\t\tif (options.mode === \"on\")\r\n\t\t\tmap.addInteraction(control);\r\n\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Set a controls(s) to the requested mode and set others to opposit state\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map name\r\n\t * @param {string} json.mode -  on|off\r\n\t * @param {array} json.name - control to set\r\n\t *\r\n\t */\r\n\tcontrolSet(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"names\": [\"ss\"]\r\n\t\t}, json);\r\n\t\tlet map = self.maps[options.map].object;\r\n\t\tlet controls = self.maps[options.map].controls;\r\n\r\n\t\t/*\r\n\t\t * Toggle out all controls. We do this rather than be selective\r\n\t\t * due to snap always needing to be the last added\r\n\t\t */\r\n\t\tfor (let i in controls) {\r\n\t\t\tthis._toggleControl(map, controls[i],'off');\r\n\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Toggle in the ones we do need (in order this is important for the likes of snap\r\n\t\t */\r\n\t\tfor (let i in options.names) {\r\n\t\t\t\t\tthis._toggleControl(map, controls[options.names[i]],'on');\r\n\t\t}\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggle a control between on/off\r\n\t * @param map\r\n\t * @param control\r\n\t * @private\r\n\t */\r\n\t_toggleControl(map, control,mode) {\r\n\t\tif (control.state === 'on'&&mode==='off') {\r\n\t\t\tmap.removeInteraction(control.obj);\r\n\t\t\tcontrol.state = 'off';\r\n\t\t}\r\n\t\tif (control.state === 'off'&&mode==='on') {\r\n\t\t\tmap.addInteraction(control.obj);\r\n\t\t\tcontrol.state = 'on';\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t *   CONTROLS\r\n\t *\r\n\t *\r\n\t */\r\n\r\n\r\n\t/**\r\n\t * Use the standard openlayers select control\r\n\t * @param json\r\n\t * @param {string} json.map - Map name\r\n\t * @param {string} json.mode -  on|off\r\n\t * @param {string} json.perfix - prefix to use\r\n\t * @param {array} json.layers - layers to use\r\n\t *\r\n\t * @description This select control uses the default openlayers model. Useful for applications with no overlapping features. It does not support selecting hidden features\r\n\t */\r\n\t_control_simpleSelect(json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"mode\": \"on\",\r\n\t\t\t\"prefix\": \"\",\r\n\t\t\t\"style\":\"\"\r\n\t\t}, json);\r\n\t\tif (options.layers) {\r\n\t\t\tfor (let i in options.layers) {\r\n\t\t\t\toptions.layers[i] = self.maps[options.map].layers[options.layers[i]];\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet map = self.maps[options.map].object;\r\n\r\n\t\tlet control = new Select({\"layers\": options.layers,\"style\":options.style});\r\n\t\tcontrol.on('select', selectFunction);\r\n\r\n\t\tfunction selectFunction(e) {\r\n\t\t\tself.queue.setMemory(options.prefix + 'simpleSelect', e, \"Session\");\r\n\t\t\tself.queue.setMemory(options.map + 'selectedFeatures', e.selected, \"Session\");\r\n\r\n\t\t\tif (e.deselected.length > 0 && e.selected.length === 0)\r\n\t\t\t\tself.queue.execute(options.prefix + \"simpleDeselect\");\r\n\t\t\tif (e.selected.length > 0)\r\n\t\t\t\tself.queue.execute(options.prefix + \"simpleSelect\");\r\n\t\t}\r\n\r\n\t\treturn control;\r\n\t}\r\n\r\n\t/**\r\n\t * MultiEdit tool\r\n\t * @param json\r\n\t * @param {string} json.map - Map name\r\n\t * @param {array} json.layer - layer to use\r\n\t * @param {object} json.mode - on|off\r\n\t * @param {object} json.projection - properties to set\r\n\t * @param {object} json.inside - JSON with single feature to use\r\n\t * @param {object} json.buffer - buffer in meters around the inside\r\n\t *\r\n\t */\r\n\t_control_multiEdit(json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"prefix\": \"\",\r\n\t\t\t\"layer\": \"default\",\r\n\t\t\t\"projection\": \"EPSG:4326\",\r\n\t\t\t\"inside\": undefined,\r\n\t\t\t\"buffer\": 10\r\n\t\t}, json);\r\n\t\tlet map = self.maps[options.map].object;\r\n\t\tlet view = map.getView();\r\n\t\tlet layer = this.maps[options.map].layers[options.layer];\r\n\t\tlet source = layer.getSource();\r\n\r\n\r\n\t\tlet featureCache = [];\r\n\r\n\t\t/*\r\n\t\t * Modify interaction, does all the hard work\r\n\t\t */\r\n\t\tlet control = new Modify({\r\n\t\t\tsource: source,\r\n\t\t\tpixelTolerance: 10,\r\n\t\t\tdeleteCondition: function (evt) {\r\n\t\t\t\treturn shiftKeyOnly(evt) && singleClick(evt)\r\n\t\t\t}\r\n\t\t});\r\n\t\tlet maskFeature = buffer(options.inside.features[0], options.buffer, {units: \"meters\"});\r\n\t\tlet bufferedMask = polygon(maskFeature.geometry.coordinates);\r\n\r\n\r\n\t\t/*\r\n\t\t * When the user starts moving something we take a copy of it for use\r\n\t\t * encase we need to revert\r\n\t\t */\r\n\t\tcontrol.on('modifystart', function (event) {\r\n\t\t\tlet features = event.features.getArray();\r\n\t\t\tfeatureCache = [];\r\n\t\t\tfor (let i = 0; i < features.length; i++) {\r\n\t\t\t\tfeatureCache.push(features[i].clone());\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t/*\r\n\t\t * When the user has finished the move / action\r\n\t\t */\r\n\t\tcontrol.on('modifyend', function (event) {\r\n\r\n\t\t\t/*\r\n\t\t\t * What point did we move?\r\n\t\t\t */\r\n\t\t\tlet movedPoint = transform(event.mapBrowserEvent.coordinate, view.getProjection().getCode(), \"EPSG:4326\");\r\n\t\t\tlet turfPoint = point(movedPoint);\r\n\t\t\t/*\r\n\t\t\t * Modified features\r\n\t\t\t */\r\n\t\t\tlet modifiedFeatures = [];\r\n\t\t\tmap.forEachFeatureAtPixel(event.mapBrowserEvent.pixel, function (feature, layer) {\r\n\r\n\t\t\t\tif (layer && layer.get('name') === options.layer) {\r\n\t\t\t\t\tmodifiedFeatures.push(feature);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\r\n\t\t\tlet modifiedFeaturesJSON = new GeoJSON({\r\n\t\t\t\t\"dataProjection\": options.projection,\r\n\t\t\t\t\"featureProjection\": view.getProjection().getCode()\r\n\t\t\t}).writeFeaturesObject(modifiedFeatures);\r\n\r\n\t\t\t/*\r\n            * Flag any inside feature valid\r\n            */\r\n\t\t\tfor(let i in modifiedFeaturesJSON.features) {\r\n\t\t\t\tlet polygons=[modifiedFeaturesJSON.features[i]];\r\n\t\t\t\tif(polygons[0].geometry.type===\"MultiPolygon\")\r\n\t\t\t\t\tpolygons=self._multiFeatureToPolygon(modifiedFeaturesJSON.features[i]);\r\n\r\n\t\t\t\tfor(let p in polygons) {\r\n\t\t\t\t\tif (booleanContains(bufferedMask, polygons[p])) {\r\n\t\t\t\t\t\tmodifiedFeatures[i].set('invalid', false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t * All features\r\n\t\t\t */\r\n\t\t\tlet features = new GeoJSON({\r\n\t\t\t\t\"dataProjection\": options.projection,\r\n\t\t\t\t\"featureProjection\": view.getProjection().getCode()\r\n\t\t\t}).writeFeaturesObject(event.features.getArray());\r\n\t\t\t/*\r\n\t\t\t * Check inside\r\n\t\t\t */\r\n\r\n\t\t\tlet isInside = true;\r\n\t\t\tlet isKink = false;\r\n\t\t\tif (options.inside) {\r\n\t\t\t\tisInside = booleanPointInPolygon(turfPoint, bufferedMask);\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * Check for any kinks in the modified features\r\n\t\t\t */\r\n\t\t\tfor (let i in modifiedFeaturesJSON.features) {\r\n\t\t\t\tlet kinkres = kinks(modifiedFeaturesJSON.features[i]);\r\n\t\t\t\tif (kinkres.features.length > 0) {\r\n\t\t\t\t\tisKink = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * Set memory and execute\r\n\t\t\t */\r\n\t\t\tif (isInside === true && isKink === false) {\r\n\t\t\t\tself.queue.setMemory(options.prefix + 'multiEditFeatures', features, \"Session\");\r\n\t\t\t\tself.queue.setMemory(options.prefix + 'multiEditModifiedFeatures', modifiedFeaturesJSON, \"Session\");\r\n\t\t\t\tself.queue.execute(options.prefix + \"multiEdit\");\r\n\t\t\t} else {\r\n\t\t\t\tfor (let i = 0; i < featureCache.length; i++) {\r\n\t\t\t\t\tfor (let j = 0; j < modifiedFeatures.length; j++) {\r\n\t\t\t\t\t\tif (featureCache[i].get('uuid') === modifiedFeatures[j].get('uuid')) {\r\n\t\t\t\t\t\t\tmodifiedFeatures[j].setGeometry(featureCache[i].getGeometry());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tself.queue.execute(options.prefix + \"multiEditOutside\");\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn control;\r\n\r\n\t}\r\n\r\n\t_control_drawFeature( json) {\r\n\t\tlet self=this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"prefix\": \"\",\r\n\t\t\t\"layer\": \"default\",\r\n\t\t\t\"projection\": \"EPSG:4326\",\r\n\t\t\t\"type\": \"Polygon\",\r\n\t\t\t\"buffer\":10\r\n\t\t}, json);\r\n\t\tlet map = self.maps[options.map].object;\r\n\r\n\t\tlet layer = this.maps[options.map].layers[options.layer];\r\n\t\tlet source = layer.getSource();\r\n\t\tlet view = map.getView();\r\n\r\n\t\tlet bufferedMask;\r\n\t\tif (options.inside) {\r\n\t\t\tlet maskFeature = buffer(options.inside.features[0], options.buffer, {units: \"meters\"});\r\n\t\t\tbufferedMask = polygon(maskFeature.geometry.coordinates);\r\n\t\t}\r\n\t\tlet control= new Draw({\r\n\t\t\t\tsource: source,\r\n\t\t\t\ttype: options.type\r\n\t\t\t});\r\n\r\n\t\tcontrol.on('drawend', function (event) {\r\n\t\t\t/*\r\n\t\t\t * Add a uuid\r\n\t\t\t */\r\n\t\t\tself._idFeatures([event.feature]);\r\n\r\n\t\t\tlet features = new GeoJSON({\r\n\t\t\t\t\"dataProjection\": options.projection,\r\n\t\t\t\t\"featureProjection\": view.getProjection().getCode()\r\n\t\t\t}).writeFeaturesObject([event.feature]);\r\n\t\t\tlet isInside = true;\r\n\t\t\tlet isKink = false;\r\n\t\t\tif (options.inside) {\r\n\t\t\t\tisInside = booleanContains(bufferedMask,features.features[0]);\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\tif(!isInside)\r\n\t\t\t\tevent.feature.set('invalid',true);\r\n\r\n\t\t\tself.queue.setMemory(options.prefix + 'drawFeatures', features, \"Session\");\r\n\t\t\tself.queue.execute(options.prefix + \"drawFeature\");\r\n\t\t});\r\n\t\treturn control;\r\n\r\n\t}\r\n\r\n\t_control_snap( json) {\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"layer\": \"default\",\r\n\t\t\t\"pixelTolerance\": 5\r\n\t\t}, json);\r\n\r\n\r\n\t\tlet layer = this.maps[options.map].layers[options.layer];\r\n\t\tlet source = layer.getSource();\r\n\r\n\t\tlet control= new Snap({\r\n\t\t\tsource: source,\r\n\t\t\tpixelTolerance: options.pixelTolerance\r\n\t\t});\r\n\t\treturn control;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t *  END CONTROLS\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Convert a feature of multiPolygon to a featue(s) of Polygons. No properies are copied\r\n\t * @param feature\r\n\t * @returns {[]}\r\n\t * @private\r\n\t */\r\n\t_multiFeatureToPolygon(feature) {\r\n\t\tlet features=[];\r\n\t\t// Ignore non MultiPolygons\r\n\t\tif(feature.geometry.type===\"MultiPolygon\") {\r\n\t\t\tfor (let i in feature.geometry.coordinates) {\r\n\t\t\t\tfeatures.push({\r\n\t\t\t\t\ttype: \"Feature\",\r\n\t\t\t\t\tgeometry: {\r\n\t\t\t\t\t\tcoordinates: feature.geometry.coordinates[i],\r\n\t\t\t\t\t\ttype: \"Polygon\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfeatures.push(feature);\r\n\t\t}\r\n\t\treturn features;\r\n\t}\r\n\r\n\t_makeContiguous(featuresJSON,tolerance) {\r\n\t\tlet collisionLog=[];\r\n\t\t/*\r\n\t\t * make a collision box for each feature\r\n\t\t */\r\n\t\tfor(let i in featuresJSON.features) {\r\n\t\t\t// Make the box and save it for future use\r\n\t\t\tlet featureBbox=bbox(featuresJSON.features[i]);\r\n\t\t\tlet featureBboxPolygon=bboxPolygon(featureBbox);\r\n\t\t\tlet featureBboxPolygonBuffered = buffer(featureBboxPolygon, tolerance, {units: 'meters'});\r\n\t\t\tlet bufferedExtent=bbox(featureBboxPolygonBuffered);\r\n\t\t\tfeaturesJSON.features[i].properties.collisionBox=bufferedExtent;\r\n\t\t\t// Upgrade feature to multiPolygon to make life easier\r\n\t\t\tif(featuresJSON.features[i].geometry.type==='Polygon') {\r\n\t\t\t\tfeaturesJSON.features[i].geometry.type='MultiPolygon';\r\n\t\t\t\tfeaturesJSON.features[i].geometry.coordinates=[featuresJSON.features[i].geometry.coordinates];\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst realTolerance=tolerance/1000000;\r\n\t\t/*\r\n\t\t * Loop our features looking for collisions\r\n\t\t */\r\n\t\tfor(let target in featuresJSON.features) {\r\n\t\t\tfor(let source in featuresJSON.features) {\r\n\t\t\t\t// ignore self and previous reverses;)\r\n\t\t\t\tif(target!==source&&collisionLog.indexOf(`${target}-${source}`)===-1) {\r\n\t\t\t\t\tcollisionLog.push(`${source}-${target}`);\r\n\t\t\t\t\tconst rect1Width = featuresJSON.features[target].properties.collisionBox[2] - featuresJSON.features[target].properties.collisionBox[0];\r\n\t\t\t\t\tconst rect2Width = featuresJSON.features[source].properties.collisionBox[2] - featuresJSON.features[source].properties.collisionBox[0];\r\n\t\t\t\t\tconst rect1Height = featuresJSON.features[target].properties.collisionBox[3] - featuresJSON.features[target].properties.collisionBox[1];\r\n\t\t\t\t\tconst rect2Height = featuresJSON.features[source].properties.collisionBox[3] - featuresJSON.features[source].properties.collisionBox[1];\r\n\r\n\t\t\t\t\t// Box collision\r\n\t\t\t\t\tif (featuresJSON.features[target].properties.collisionBox[0] < featuresJSON.features[source].properties.collisionBox[0] + rect2Width &&\r\n\t\t\t\t\t\tfeaturesJSON.features[target].properties.collisionBox[0] + rect1Width > featuresJSON.features[source].properties.collisionBox[0] &&\r\n\t\t\t\t\t\tfeaturesJSON.features[target].properties.collisionBox[1] < featuresJSON.features[source].properties.collisionBox[1] + rect2Height &&\r\n\t\t\t\t\t\tfeaturesJSON.features[target].properties.collisionBox[1] + rect1Height > featuresJSON.features[source].properties.collisionBox[1]) {\r\n\t\t\t\t\t\t// collision detected!\r\n\t\t\t\t\t\t//console.log(`Collision detected ${target} - ${source}`);\r\n\t\t\t\t\t\t// now we brute force\r\n\t\t\t\t\t\tfor(let targetPolygon in featuresJSON.features[target].geometry.coordinates[0]) {\r\n\t\t\t\t\t\t\tfor (let targetPoints in featuresJSON.features[target].geometry.coordinates[0][targetPolygon]) {\r\n\t\t\t\t\t\t\t\tlet targetCircle = {\r\n\t\t\t\t\t\t\t\t\tradius: realTolerance,\r\n\t\t\t\t\t\t\t\t\tx: featuresJSON.features[target].geometry.coordinates[0][targetPolygon][targetPoints][0],\r\n\t\t\t\t\t\t\t\t\ty: featuresJSON.features[target].geometry.coordinates[0][targetPolygon][targetPoints][1]\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\tfor(let sourcePolygon in featuresJSON.features[source].geometry.coordinates[0]) {\r\n\t\t\t\t\t\t\t\t\tfor (let sourcePoints in featuresJSON.features[source].geometry.coordinates[0][sourcePolygon]) {\r\n\t\t\t\t\t\t\t\t\t\tlet sourceCircle = {\r\n\t\t\t\t\t\t\t\t\t\t\tradius: realTolerance,\r\n\t\t\t\t\t\t\t\t\t\t\tx: featuresJSON.features[source].geometry.coordinates[0][sourcePolygon][sourcePoints][0],\r\n\t\t\t\t\t\t\t\t\t\t\ty: featuresJSON.features[source].geometry.coordinates[0][sourcePolygon][sourcePoints][1]\r\n\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t// Circle Collision\r\n\t\t\t\t\t\t\t\t\t\tlet dx = targetCircle.x - sourceCircle.x;\r\n\t\t\t\t\t\t\t\t\t\tlet dy = targetCircle.y - sourceCircle.y;\r\n\t\t\t\t\t\t\t\t\t\tlet distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (distance < targetCircle.radius + sourceCircle.radius) {\r\n\t\t\t\t\t\t\t\t\t\t\t// point collosion so move it\r\n\t\t\t\t\t\t\t\t\t\t\tfeaturesJSON.features[source].geometry.coordinates[0][sourcePolygon][sourcePoints] = featuresJSON.features[target].geometry.coordinates[0][targetPolygon][targetPoints];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tmakeContiguous(pid, json) {\r\n\t\tthis._makeContiguous(json.geojson, json.tolerance);\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\t/**\r\n\t * Use a filter object to locate features on a single layer\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map name\r\n\t * @param {array} json.layer - layer to use\r\n\t * @param {object} json.filter - Filter eg {\"feature_id\":1}\r\n\t *\r\n\t */\r\n\tfindFeatures(pid, json) {\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"layer\": \"default\",\r\n\t\t\t\"filter\": {}\r\n\t\t}, json);\r\n\t\tlet foundFeatures = [];\r\n\t\tlet layer = this.maps[options.map].layers[options.layer];\r\n\t\tlet source = layer.getSource();\r\n\t\tlet features = source.getFeatures();\r\n\t\tfor (let i in features) {\r\n\t\t\tfor (let f in options.filter) {\r\n\t\t\t\tlet check = features[i].get(f);\r\n\t\t\t\t/*\r\n\t\t\t\t * Note there can be differing types here, hence ==\r\n\t\t\t\t */\r\n\t\t\t\tif (check == options.filter[f]) {\r\n\t\t\t\t\tfoundFeatures.push(features[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.queue.setMemory('findFeatures', foundFeatures, \"Session\");\r\n\t\tthis.queue.setMemory(options.map + 'selectedFeatures', foundFeatures, \"Session\");\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t\treturn foundFeatures;\r\n\t}\r\n\r\n\t/**\r\n\t * Set a features properties by id\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map name\r\n\t * @param {array} json.layer - layer to use\r\n\t * @param {object} json.id - Feature id\r\n\t * @param {object} json.properties - properties to set\r\n\t *\r\n\t */\r\n\tsetFeaturePropertyById(pid, json) {\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"layer\": \"default\",\r\n\t\t\t\"id\": \"\",\r\n\t\t\t\"properties\": {}\r\n\t\t}, json);\r\n\t\tlet layer = this.maps[options.map].layers[options.layer];\r\n\t\tlet source = layer.getSource();\r\n\t\tlet feature = source.getFeatureById(options.id);\r\n\t\tfeature.setProperties(options.properties);\r\n\t\tthis.queue.setMemory('updatedFeature', new GeoJSON({\r\n\t\t\t\"dataProjection\": \"EPSG:4326\",\r\n\t\t\t\"featureProjection\": \"EPSG:3857\"\r\n\t\t}).writeFeaturesObject([feature]), \"Session\");\r\n\t\tthis.finished(pid, this.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Use the standard click event\r\n\t * @param pid\r\n\t * @param json\r\n\t *\r\n\t * @description This select control uses the default openlayers model. Useful for applications with no overlapping features. It does not support selecting hidden features\r\n\t */\r\n\tsimpleClick(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"mode\": \"on\",\r\n\t\t\t\"prefix\": \"\"\r\n\t\t}, json);\r\n\t\tlet map = self.maps[options.map].object;\r\n\t\tif (options.mode === \"on\") {\r\n\t\t\tself.maps[options.map].clickTag = map.on('click', clickfunction);\r\n\t\t} else {\r\n\t\t\tunByKey(self.maps[options.map].clickTag);\r\n\t\t}\r\n\r\n\t\tfunction clickfunction(e) {\r\n\t\t\tself.queue.setMemory(options.prefix + 'simpleClick', e, \"Session\");\r\n\t\t\tself.queue.execute(options.prefix + \"simpleClick\");\r\n\t\t}\r\n\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Convert a coordinate to WKT\r\n\t * @param pid\r\n\t * @param json\r\n\t *\r\n\t * @description Convert a coordinate to WKT\r\n\t */\r\n\tcoordinatesToWKT(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t}, json);\r\n\t\tlet olGeom = new Point(options.coordinate);\r\n\t\tlet format = new WKT();\r\n\t\tlet wktRepresenation = format.writeGeometry(olGeom);\r\n\t\tself.set(pid, {\"wkt\": wktRepresenation});\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Add a feature to the Map\r\n\t * TODO: This is old code for getting something working. Needs functionising, not for production\r\n\t * @param pid\r\n\t * @param json\r\n\t */\r\n\taddFeature(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"layer\": \"default\",\r\n\t\t\t\"values\": {}\r\n\t\t}, json);\r\n\r\n\t\tlet map = self.maps[options.map].object;\r\n\t\tlet layer = self.maps[options.map].layers[options.layer];\r\n\t\tlet view = map.getView();\r\n\t\tlet source = layer.getSource();\r\n\r\n\t\tlet projection = \"EPSG:\" + options.geometry.match(/SRID=(.*?);/)[1];\r\n\t\tlet wkt = options.geometry.replace(/SRID=(.*?);/, '');\r\n\r\n\t\tlet format = new WKT();\r\n\t\tlet feature = format.readFeature(wkt);\r\n\t\toptions.values.geometry = feature.getGeometry().transform(projection, view.getProjection().getCode());\r\n\t\tsource.addFeature(new Feature(options.values));\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Delete features from layer by id\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.layer - Layer to get extent from\r\n\t * @param {string} json.id - id of feature\r\n\t */\r\n\tdeleteFeatureById(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"layer\": \"default\",\r\n\t\t\t\"id\": \"\"\r\n\t\t}, json);\r\n\t\tlet layer = self.maps[options.map].layers[options.layer];\r\n\t\tlet source = layer.getSource();\r\n\t\tlet feature = source.getFeatureById(options.id);\r\n\t\tsource.removeFeature(feature);\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Clean and/or default feature properties\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.layer - Layer to get features from\r\n\t * @param {array} json.delete - Array of properties to delete\r\n\t * @param {array} json.default - Array of objects {name:...,value:...} to default\r\n\t */\r\n\tpropertiesClean(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"layer\": \"default\",\r\n\t\t\t\"delete\": [],\r\n\t\t\t\"default\": []\r\n\t\t}, json);\r\n\t\tlet layer = self.maps[options.map].layers[options.layer];\r\n\t\tlet source = layer.getSource();\r\n\t\tlet features = source.getFeatures();\r\n\t\tfor(let f in features) {\r\n\t\t\tfor(let d in options.delete) {\r\n\t\t\t\tif(features[f].get(d)) {\r\n\t\t\t\t\tfeatures[f].set(d,'');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(let d in options.default) {\r\n\t\t\t\tif(!features[f].get(options.default[d].name)) {\r\n\t\t\t\t\tfeatures[f].set(options.default[d].name,options.default[d].value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * split featues using a line string\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.layer - Layer to get extent from\r\n\t * @param {string} json.id - id of feature\r\n\t */\r\n\tsplitFeatures(pid, json) {\r\n\t\tlet self=this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"layer\": \"default\",\r\n\t\t\t\"lineString\":\"\",\r\n\t\t\t\"prefix\":\"\"\r\n\t\t}, json);\r\n\t\tlet map = self.maps[options.map].object;\r\n\t\tlet view = map.getView();\r\n\t\tlet layer = self.maps[options.map].layers[options.layer];\r\n\t\tlet source = layer.getSource();\r\n\t\tconst line=options.lineString.features[0].geometry;\r\n\t\tif(line.type!=='LineString') {\r\n\t\t\tself.finished(pid, self.queue.DEFINE.FIN_ERROR, \"lineString needs to be a geoJSON containing a linestring feature\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\r\n\t\tconst features=source.getFeatures();\r\n\t\tlet sourceFeaturesJSON=this._featuresToGeojson('EPSG:4326',view.getProjection().getCode(),features);\r\n\r\n\t\tfor(let i in sourceFeaturesJSON.features) {\r\n\t\t\tlet polygons=this._multiFeatureToPolygon(sourceFeaturesJSON.features[i]);\r\n\t\t\tfor(let p in polygons) {\r\n\t\t\t\tlet intersectPoints = lineIntersect(polygons[p], line);\r\n\r\n\t\t\t\t// We only attempt to insersect anything that has 1 || 2 points, anything else is too complex\r\n\t\t\t\tif(intersectPoints.features.length===1||intersectPoints.features.length===2) {\r\n\t\t\t\t\tif(intersectPoints.features.length===1) {\r\n\t\t\t\t\t\t//console.log('Edge piece');\r\n\t\t\t\t\t\t//console.log(polygons[p]);\r\n\t\t\t\t\t\tconst line2=lineString(line.coordinates);\r\n\t\t\t\t\t\t//console.log(line2);\r\n\r\n\t\t\t\t\t\t// Here we need to stitch in verticies\r\n\t\t\t\t\t\tfor(let points=1; points<polygons[p].geometry.coordinates[0].length;points++) {\r\n\t\t\t\t\t\t\t//make a lineString base on the points so we can see if it intersects\r\n\t\t\t\t\t\t\tconst line1=lineString([polygons[p].geometry.coordinates[0][points-1], polygons[p].geometry.coordinates[0][points]]);\r\n\t\t\t\t\t\t\tlet ringIntersect=lineIntersect(line1,line2);\r\n\t\t\t\t\t\t\t//console.log(line1);\r\n\t\t\t\t\t\t\t//console.log(line2);\r\n\t\t\t\t\t\t\tif(ringIntersect.features.length>0) {\r\n\t\t\t\t\t\t\t\t//console.log(`Got overlap at ${points}`);\r\n\t\t\t\t\t\t\t\t//console.log(ringIntersect);\r\n\t\t\t\t\t\t\t\tpolygons[p].geometry.coordinates[0].splice(points,0,intersectPoints.features[0].geometry.coordinates);\r\n\t\t\t\t\t\t\t\tsource.removeFeature(source.getFeatureById(sourceFeaturesJSON.features[i].properties.uuid));\r\n\t\t\t\t\t\t\t\tlet newFeaturesGeoJSON= {\r\n\t\t\t\t\t\t\t\t\ttype: \"FeatureCollection\",\r\n\t\t\t\t\t\t\t\t\tfeatures: [polygons[p]]\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\tlet openlayersFeatures=this._idFeatures(this._loadGeojson(options.map,newFeaturesGeoJSON));\r\n\t\t\t\t\t\t\t\tsource.addFeatures(openlayersFeatures);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Full split\r\n\t\t\t\t\t\t//console.log('Master piece');\r\n\t\t\t\t\t\t//console.log(intersectPoints);\r\n\t\t\t\t\t\tlet offsetLine = lineOffset(line, (0.01 ), {units: 'meters'});\r\n\t\t\t\t\t\tlet thickLineCorners = featureCollection([line, offsetLine]);\r\n\t\t\t\t\t\tlet thickLinePolygon = convex(explode(thickLineCorners));\r\n\t\t\t\t\t\tlet clipped = difference(polygons[p], thickLinePolygon);\r\n\r\n\t\t\t\t\t\tif(clipped.geometry.coordinates.length>1) {\r\n\t\t\t\t\t\t\tlet newPolygons = this._multiFeatureToPolygon(clipped);\r\n\t\t\t\t\t\t\tnewPolygons[0].properties={};\r\n\t\t\t\t\t\t\tnewPolygons[1].properties={};\r\n\t\t\t\t\t\t\tsource.removeFeature(source.getFeatureById(sourceFeaturesJSON.features[i].properties.uuid));\r\n\t\t\t\t\t\t\t//let newFeature = this._loadGeojson(options.map, {type: \"FeatureCollection\",features:[clipped]});\r\n\r\n\t\t\t\t\t\t\tlet newFeaturesGeoJSON= {\r\n\t\t\t\t\t\t\t\ttype: \"FeatureCollection\",\r\n\t\t\t\t\t\t\t\tfeatures: [newPolygons[0],newPolygons[1]]\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tthis._makeContiguous(newFeaturesGeoJSON,100);\r\n\t\t\t\t\t\t\t//console.log(newFeaturesGeoJSON);\r\n\t\t\t\t\t\t\tlet openlayersFeatures=this._idFeatures(this._loadGeojson(options.map,newFeaturesGeoJSON));\r\n\t\t\t\t\t\t\tsource.addFeatures(openlayersFeatures);\r\n\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tself.queue.setMemory(options.prefix + 'splitFeatures', `Split geometry failed`, \"Session\");\r\n\t\t\t\t\t\t\tself.queue.execute(options.prefix + \"splitFeatures\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(intersectPoints.features.length!==0) {\r\n\t\t\t\t\t\tself.queue.setMemory(options.prefix + 'splitFeatures', `Can not intersect complex [${intersectPoints.features.length}] points`, \"Session\");\r\n\t\t\t\t\t\tself.queue.execute(options.prefix + \"splitFeatures\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * merge features from layer by id\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.layer - Layer to get extent from\r\n\t * @param {string} json.ids - ids of features to merge\r\n\t */\r\n\tmergeFeaturesById(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"layer\": \"default\",\r\n\t\t\t\"ids\": []\r\n\t\t}, json);\r\n\t\tlet map = self.maps[options.map].object;\r\n\t\tlet view = map.getView();\r\n\t\tlet layer = self.maps[options.map].layers[options.layer];\r\n\t\tlet source = layer.getSource();\r\n\t\tlet sourceFeatures=[];\r\n\r\n\t\t/*\r\n\t\t * Build up the features into an array and purge them from the layer\r\n\t\t */\r\n\t\tfor(let i=0;i<options.ids.length;i++) {\r\n\t\t\tconst feature=source.getFeatureById(options.ids[i]);\r\n\t\t\tsourceFeatures.push(feature);\r\n\t\t\tsource.removeFeature(feature);\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Convert to JSON for turf\r\n\t\t */\r\n\t\tlet sourceFeaturesJSON=this._featuresToGeojson('EPSG:4326',view.getProjection().getCode(),sourceFeatures);\r\n\r\n\t\t/*\r\n\t\t * Our first feature is the one we will merge all the others to, keep it properties.\r\n\t\t */\r\n\t\tlet targetFeaturePolygon=multiPolygon(sourceFeaturesJSON.features[0].geometry.coordinates);\r\n\t\tlet targetFeatureProperties=sourceFeaturesJSON.features[0].properties;\r\n\t\t/*\r\n\t\t * Merge them\r\n\t\t */\r\n\t\tfor(let i=1;i<sourceFeatures.length;i++) {\r\n\t\t\ttargetFeaturePolygon = union(targetFeaturePolygon, multiPolygon(sourceFeaturesJSON.features[i].geometry.coordinates));\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * Cleanup any duplicate points\r\n\t\t */\r\n\t\t//targetFeaturePolygon=truncate(targetFeaturePolygon,{precision: 3, coordinates: 2});\r\n\t\ttargetFeaturePolygon=clean(targetFeaturePolygon);\r\n\t\t/*\r\n\t\t * Convert to a multi-polygon if polygon because if its a polygon and we replay a merge its not supported\r\n\t\t */\r\n\t\tif(targetFeaturePolygon.geometry.type==='Polygon')\r\n\t\t\ttargetFeaturePolygon=multiPolygon([targetFeaturePolygon.geometry.coordinates]);\r\n\t\t/*\r\n\t\t * Rebuild properties then add the feature back to the map\r\n\t\t */\r\n\t\ttargetFeaturePolygon.properties=targetFeatureProperties;\r\n\t\tlet features = this._loadGeojson(options.map, {type: \"FeatureCollection\",features:[targetFeaturePolygon]});\r\n\t\tsource.addFeatures(this._idFeatures(features));\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Add geojson features to a layer\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.layer - Layer to get extent from\r\n\t * @param {string} json.gejson - geojson\r\n\t */\r\n\taddGeojson(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"layer\": \"default\",\r\n\t\t\t\"geojson\": {}\r\n\t\t}, json);\r\n\t\tlet layer = self.maps[options.map].layers[options.layer];\r\n\t\tlet source = layer.getSource();\r\n\r\n\t\tlet features = this._loadGeojson(options.map, options.geojson);\r\n\t\tsource.addFeatures(this._idFeatures(features));\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Openlayers doesn't ID features by default. This will apply a unique id to all features passed to it\r\n\t * @param features\r\n\t * @private\r\n\t */\r\n\t_idFeatures(features) {\r\n\t\tfor (let i in features) {\r\n\t\t\tif (features[i].get('uuid') === undefined) {\r\n\t\t\t\tlet uuid = uuidv4();\r\n\t\t\t\tfeatures[i].setId(uuid);\r\n\t\t\t\tfeatures[i].set('uuid', uuid);\r\n\t\t\t} else {\r\n\t\t\t\tfeatures[i].setId(features[i].get('uuid'));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn features;\r\n\t}\r\n\r\n\t/**\r\n\t * gets geojson features to a layer\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.layer - Layer to get extent from\r\n\t * @param {string} json.prefix - Prefix for memory\r\n\t * @param {string} json.projection - Projection to use\r\n\t */\r\n\tgetGeojson(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"layer\": \"default\",\r\n\t\t\t\"projection\": \"EPSG:4326\",\r\n\t\t\t\"prefix\": \"\"\r\n\t\t}, json);\r\n\t\tlet map = self.maps[options.map].object;\r\n\t\tlet view = map.getView();\r\n\r\n\t\tlet layer = self.maps[options.map].layers[options.layer];\r\n\t\tlet source = layer.getSource();\r\n\t\tlet features = source.getFeatures();\r\n\t\tlet returnJson = new GeoJSON({\r\n\t\t\t\"dataProjection\": options.projection,\r\n\t\t\t\"featureProjection\": view.getProjection().getCode()\r\n\t\t}).writeFeaturesObject(features);\r\n\r\n\t\tself.queue.setMemory(options.prefix + 'getGeojson', returnJson, \"Session\");\r\n\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Loads geojson from var or object\r\n\t * @param geojson\r\n\t * @private\r\n\t */\r\n\t_loadGeojson(map, geojson) {\r\n\t\tlet self = this;\r\n\t\tif (typeof geojson === 'object') {\r\n\t\t\tif(geojson.features)\r\n\t\t\t\treturn (new GeoJSON({})).readFeatures(geojson, {featureProjection: self.maps[map].object.getView().getProjection()});\r\n\t\t\treturn [];\r\n\t\t} else {\r\n\t\t\treturn (new GeoJSON({})).readFeatures(eval(geojson), {featureProjection: self.maps[map].object.getView().getProjection()});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_featuresToGeojson(toProjection,fromProjection,features) {\r\n\t\tlet returnJson = new GeoJSON({\r\n\t\t\t\"dataProjection\": toProjection,\r\n\t\t\t\"featureProjection\": fromProjection\r\n\t\t}).writeFeaturesObject(features);\r\n\t\treturn returnJson;\r\n\t}\r\n\r\n\t/**\r\n\t * Remove the data from a layer on the map.\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.layer - Layer to clear\r\n\t */\r\n\tclearLayer(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"layer\": \"default\"\r\n\t\t}, json);\r\n\t\tlet layer = self.maps[options.map].layers[options.layer];\r\n\t\tif (layer) {\r\n\t\t\tlet source = layer.getSource();\r\n\t\t\tsource.clear();\r\n\t\t} else {\r\n\t\t\tconsole.warn(`No such layer [${options.layer}]`);\r\n\t\t}\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Flag a layer as changed (cause redraw).\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.layer - Layer to flag\r\n\t */\r\n\tchanged(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"layer\": \"default\"\r\n\t\t}, json);\r\n\t\tlet layer = self.maps[options.map].layers[options.layer];\r\n\t\tlayer.changed();\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggle layer on and off\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.layer - Layer to clear\r\n\t */\r\n\ttoggleLayer(pid, json) {\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"layer\": \"default\"\r\n\t\t}, json);\r\n\t\tlet layer = this.maps[options.map].layers[options.layer];\r\n\t\tlayer.setVisible(!layer.getVisible());\r\n\t\tthis.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t *  Move the map so the cords are at the center\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.coordinate - Coordinate to use\r\n\t * @example\r\n\t * openlayers.centerOnCoordinate({\"coordinate\":\"{{!^JSON.stringify(memory.simpleSelect.value.selected[0].getGeometry().getCoordinates())}}\"});\r\n\t *\r\n\t */\r\n\tcenterOnCoordinate(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t}, json);\r\n\t\t/*\r\n\t\t * Pull all our resources\r\n\t\t */\r\n\t\tlet map = self.maps[options.map].object;\r\n\t\tlet view = map.getView();\r\n\t\tlet size = map.getSize();\r\n\t\tview.centerOn(this._decodeCoords(json.coordinate, view.getProjection().getCode()), size, [size[0] / 2, size[1] / 2]);\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clean up coordinates in any format and reproject\r\n\t * @param cords\r\n\t * @param projection\r\n\t * @returns {number[]}\r\n\t * @private\r\n\t */\r\n\t_decodeCoords(cords,projection) {\r\n\t\tlet returnCords=[];\r\n\t\tconst srid=/^SRID=(.*?);POINT\\((.*?)\\)/;\r\n\t\tif(typeof cords === 'string') {\r\n\t\t\tconst match=cords.match(srid);\r\n\t\t\tif(match) {\r\n\t\t\t\treturnCords=match[2].split(' ');\r\n\t\t\t\treturnCords=returnCords.map(function (str) {\r\n\t\t\t\t\treturn parseFloat(str);\r\n\t\t\t\t})\r\n\t\t\t\treturnCords = transform(returnCords, \"EPSG:\"+match[1],projection);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\treturnCords=cords;\r\n\t\t}\r\n\t\t// Clean up any strings\r\n\t\treturnCords=returnCords.map(function (str) {\r\n\t\t\treturn parseFloat(str);\r\n\t\t})\r\n\t\treturn returnCords;\r\n\t}\r\n\r\n\t/**\r\n\t * Zoom a layer to the extent of its features (needs appropriate zoom levels to work well\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.inc - Increment of he zoom EG 1|-1|2|-2|etc\r\n\t * @param {string} json.delay - Delay period of the zoom in ms\r\n\t * @example\r\n\t * openlayers.animateZoom({\"inc\":\"2});\r\n\t */\r\n\tanimateZoom(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"inc\": +1,\r\n\t\t\t\"delay\": 100\r\n\t\t}, json);\r\n\t\t/*\r\n\t\t * Pull all our resources\r\n\t\t */\r\n\t\tlet map = self.maps[options.map].object;\r\n\t\tlet view = map.getView();\r\n\t\t/*\r\n\t\t * Animate a zoom\r\n\t\t */\r\n\t\tview.animate({zoom: view.getZoom() + options.inc, duration: options.delay});\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zoom a layer to the extent of its features (needs appropriate zoom levels to work well\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.duration - Delay period of the zoom in ms\r\n\t * @param {string} json.coordinate - location to fly to\r\n\t * @param {boolean} json.wait - Wait till end of animation to finish queue item\r\n\t * @example\r\n\t * openlayers.flyTo({\"location\":\"2});\r\n\t */\r\n\tflyTo(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"duration\": 2000,\r\n\t\t\t\"coordinate\": \"\",\r\n\t\t\t\"wait\": false\r\n\t\t}, json);\r\n\t\t/*\r\n\t\t * Pull all our resources\r\n\t\t */\r\n\t\tlet map = self.maps[options.map].object;\r\n\t\tlet view = map.getView();\r\n\r\n\t\tlet zoom = view.getZoom();\r\n\t\tlet parts = 2;\r\n\t\tlet called = false;\r\n\r\n\t\tfunction callback(complete) {\r\n\t\t\t--parts;\r\n\t\t\tif (called) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (parts === 0 || !complete) {\r\n\t\t\t\tcalled = true;\r\n\t\t\t\tif (options.wait === true)\r\n\t\t\t\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tview.animate({\r\n\t\t\tcenter: this._decodeCoords(options.coordinate, view.getProjection().getCode()),\r\n\t\t\tduration: options.duration\r\n\t\t}, callback);\r\n\t\tview.animate({\r\n\t\t\tzoom: zoom - 1,\r\n\t\t\tduration: options.duration / 2\r\n\t\t}, {\r\n\t\t\tzoom: zoom,\r\n\t\t\tduration: options.duration / 2\r\n\t\t}, callback);\r\n\t\tif (options.wait === false)\r\n\t\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zoom a layer to the extent of its features (needs appropriate zoom levels to work well\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.layer - Layer to get extent from\r\n\t * @example\r\n\t * openlayers.zoomToLayerExtent({\"map\":\"map_1\",\"layer\":\"data\"});\r\n\t */\r\n\tzoomToLayerExtent(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"layer\": \"default\",\r\n\t\t\t\"buffer\": 100,\r\n\t\t\t\"unit\" :\"meters\",\r\n\t\t}, json);\r\n\t\t/*\r\n\t\t * Pull all our resources\r\n\t\t */\r\n\t\tlet map = self.maps[options.map].object;\r\n\t\tlet view = map.getView();\r\n\t\tlet layer = self.maps[options.map].layers[options.layer];\r\n\t\tlet source = layer.getSource();\r\n\t\t/*\r\n\t\t * Get the extent of the features and fit them\r\n\t\t */\r\n\r\n\t\tlet featuresGeojson = new GeoJSON({\r\n\t\t\t\"dataProjection\": \"EPSG:4326\",\r\n\t\t\t\"featureProjection\": view.getProjection().getCode()\r\n\t\t}).writeFeaturesObject(source.getFeatures());\r\n\r\n\t\tlet featuresBbox=bbox(featuresGeojson);\r\n\t\tlet extentPolygon=bboxPolygon(featuresBbox);\r\n\t\tlet bufferedFeature = buffer(extentPolygon, options.buffer, {units: options.unit});\r\n\t\tlet bufferedExtent=bbox(bufferedFeature);\r\n\t\tlet transformedExtentP1=transform([bufferedExtent[0],bufferedExtent[1]], \"EPSG:4326\",view.getProjection().getCode());\r\n\t\tlet transformedExtentP2=transform([bufferedExtent[2],bufferedExtent[3]], \"EPSG:4326\",view.getProjection().getCode());\r\n\t\tlet transformedExtent=[transformedExtentP1[0],transformedExtentP1[1],transformedExtentP2[0],transformedExtentP2[1]]\r\n\t\ttry {\r\n\t\t\tview.fit(transformedExtent, map.getSize());\r\n\t\t} catch (e) {\r\n\t\t\t/*\r\n\t\t\t * Fitting when the layer is empty fill cause OL to error\r\n\t\t\t */\r\n\t\t}\r\n\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Update size of map (in the event of resize or rotation this will fix it)\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference can be * and all maps will be targeted\r\n\t * @example\r\n\t * openlayers.updateSize({\"map\":\"map_1\"});\r\n\t */\r\n\tupdateSize(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t}, json);\r\n\t\t/*\r\n\t\t * Pull all our resources\r\n\t\t */\r\n\t\tif (json.map === \"*\") {\r\n\t\t\tfor (let i in self.maps) {\r\n\t\t\t\tlet map = self.maps[i].object;\r\n\t\t\t\tmap.updateSize();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlet map = self.maps[options.map].object;\r\n\t\t\tmap.updateSize();\r\n\t\t}\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Add an overlay to the map\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.overlay - Overlay reference to use\r\n\t * @param {string} json.targetId - Dom element to use\r\n\t * @param {string} json.coordinate - coordinate to place it (Event.coordinate) for clicks\r\n\t * @example\r\n\t * openlayers.addOverlay({\"targetId\":\"#functionOverlay\",\"coordinate\":\"{{!^JSON.stringify(memory.simpleSelect.value.mapBrowserEvent.coordinate)}}\"});\r\n\t */\r\n\taddOverlay(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"overlay\": \"default\",\r\n\t\t}, json);\r\n\r\n\t\t/*\r\n\t\t * Pull all our resources\r\n\t\t */\r\n\t\tlet map = self.maps[options.map].object;\r\n\r\n\t\tif (self.overlays[options.overlay]) {\r\n\t\t\tmap.removeOverlay(self.overlays[options.overlay].object);\r\n\t\t\tdelete self.overlays[options.overlay];\r\n\t\t}\r\n\t\t/*\r\n\t\t * Get the html element from the dom\r\n\t\t */\r\n\t\tlet element = self.queue.getElement(options.targetId);\r\n\t\t/*\r\n\t\t * Make an overlay and add to the map\r\n\t\t */\r\n\t\tlet overlay = new Overlay({\r\n\t\t\telement: element,\r\n\t\t\tposition: options.coordinate\r\n\t\t});\r\n\t\tmap.addOverlay(overlay);\r\n\t\t/*\r\n\t\t * Store the object for later (destroy)\r\n\t\t */\r\n\t\tself.overlays[options.overlay] = {\"object\": overlay};\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t}\r\n\r\n\t/**\r\n\t * Remove an overlay from the map\r\n\t * @param pid\r\n\t * @param json\r\n\t * @param {string} json.map - Map reference\r\n\t * @param {string} json.overlay - Overlay reference to use\r\n\t * @example\r\n\t * openlayers.removeOverlay();\r\n\t */\r\n\tremoveOverlay(pid, json) {\r\n\t\tlet self = this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"map\": \"default\",\r\n\t\t\t\"overlay\": \"default\",\r\n\t\t}, json);\r\n\r\n\t\t/*\r\n\t\t * Pull all our resources\r\n\t\t */\r\n\t\tlet map = self.maps[options.map].object;\r\n\r\n\t\tif (self.overlays[options.overlay]) {\r\n\t\t\tmap.removeOverlay(self.overlays[options.overlay].object);\r\n\t\t\tdelete self.overlays[options.overlay];\r\n\t\t}\r\n\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\r\n\t}\r\n\r\n\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Queueable/Openlayers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 240,
    "kind": "class",
    "name": "Openlayers",
    "memberof": "ourthings/Queueable/Openlayers.js",
    "static": true,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/Openlayers.js",
    "importStyle": "Openlayers",
    "description": "",
    "examples": [
      "//"
    ],
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\nOpenlayers Hook"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      },
      {
        "tagName": "@description",
        "tagValue": "You need to add \"ol\": \"^5.3.0\" to your package.json to build with openlayers"
      }
    ],
    "interface": false,
    "extends": [
      "ourthings/Queueable.js~Queueable"
    ]
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "init",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#init",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "queue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "member",
    "name": "queue",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#queue",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "member",
    "name": "maps",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#maps",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "member",
    "name": "overlays",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#overlays",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "member",
    "name": "ready",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#ready",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "addMap",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#addMap",
    "access": "public",
    "description": "\nCreate a new map",
    "examples": [
      "openlayer.addMap();"
    ],
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "name for the map (used to reference)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.target",
        "description": "id of element in the page to target"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "json.zoom",
        "description": "initial zoom level"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "json.maxZoom",
        "description": "Maximum zoom"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.center",
        "description": "Center on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.renderer",
        "description": "Renderers to use"
      }
    ],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "_debug",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_debug",
    "access": "private",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "addLayer",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#addLayer",
    "access": "public",
    "description": "\nAdd a layer to the map",
    "examples": [
      "openlayer.addLayer();"
    ],
    "lineNumber": 218,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "name for the map (used to reference)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "name for the layer (used to reference)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.typr",
        "description": "Layer type osm,vector"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "json.opacity",
        "description": "layer opacity"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "json.transparent",
        "description": "is the layer transparent?"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.style",
        "description": "Style object to use"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "json.active",
        "description": "Is the layer active"
      },
      {
        "nullable": null,
        "types": [
          "object",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.geojson",
        "description": "geojson to add to the layer (vector)"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "_addLayer_osm",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_addLayer_osm",
    "access": "private",
    "description": "Add an osm layer",
    "lineNumber": 261,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TileLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "_addLayer_wmts",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_addLayer_wmts",
    "access": "private",
    "description": "Add an wmts layer",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TileLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "_addLayer_wms",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_addLayer_wms",
    "access": "private",
    "description": "Add a wms layer",
    "lineNumber": 310,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TileLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "_addLayer_xyz",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_addLayer_xyz",
    "access": "private",
    "description": "Add an xyz layer",
    "lineNumber": 340,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TileLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "_addLayer_heatmap",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_addLayer_heatmap",
    "access": "private",
    "description": "Add a heatmap layer",
    "lineNumber": 361,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VectorLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "_addLayer_vector",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_addLayer_vector",
    "access": "private",
    "description": "Add a vector layer",
    "lineNumber": 383,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VectorLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "makeControl",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#makeControl",
    "access": "public",
    "description": "Make a new control",
    "lineNumber": 414,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.mode",
        "description": "on|off"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "What to call it (used later to reference)"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.control",
        "description": "The control function to use"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "controlSet",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#controlSet",
    "access": "public",
    "description": "Set a controls(s) to the requested mode and set others to opposit state",
    "lineNumber": 456,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.mode",
        "description": "on|off"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.name",
        "description": "control to set"
      }
    ],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "_toggleControl",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_toggleControl",
    "access": "private",
    "description": "Toggle a control between on/off",
    "lineNumber": 489,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "control",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "_control_simpleSelect",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_control_simpleSelect",
    "access": "private",
    "description": "Use the standard openlayers select control",
    "lineNumber": 518,
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "This select control uses the default openlayers model. Useful for applications with no overlapping features. It does not support selecting hidden features"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.mode",
        "description": "on|off"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.perfix",
        "description": "prefix to use"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layers",
        "description": "layers to use"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "_control_multiEdit",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_control_multiEdit",
    "access": "private",
    "description": "MultiEdit tool",
    "lineNumber": 560,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map name"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "layer to use"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json.mode",
        "description": "on|off"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json.projection",
        "description": "properties to set"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json.inside",
        "description": "JSON with single feature to use"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json.buffer",
        "description": "buffer in meters around the inside"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "_control_drawFeature",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_control_drawFeature",
    "access": "private",
    "description": null,
    "lineNumber": 698,
    "undocument": true,
    "params": [
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "_control_snap",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_control_snap",
    "access": "private",
    "description": null,
    "lineNumber": 752,
    "undocument": true,
    "params": [
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "_multiFeatureToPolygon",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_multiFeatureToPolygon",
    "access": "private",
    "description": "Convert a feature of multiPolygon to a featue(s) of Polygons. No properies are copied",
    "lineNumber": 782,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "feature",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "_makeContiguous",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_makeContiguous",
    "access": "private",
    "description": null,
    "lineNumber": 801,
    "undocument": true,
    "params": [
      {
        "name": "featuresJSON",
        "types": [
          "*"
        ]
      },
      {
        "name": "tolerance",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "makeContiguous",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#makeContiguous",
    "access": "public",
    "description": null,
    "lineNumber": 876,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "findFeatures",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#findFeatures",
    "access": "public",
    "description": "Use a filter object to locate features on a single layer",
    "lineNumber": 889,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map name"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "layer to use"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json.filter",
        "description": "Filter eg {\"feature_id\":1}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "setFeaturePropertyById",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#setFeaturePropertyById",
    "access": "public",
    "description": "Set a features properties by id",
    "lineNumber": 926,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map name"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "layer to use"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json.id",
        "description": "Feature id"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json.properties",
        "description": "properties to set"
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "simpleClick",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#simpleClick",
    "access": "public",
    "description": "Use the standard click event",
    "lineNumber": 951,
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "This select control uses the default openlayers model. Useful for applications with no overlapping features. It does not support selecting hidden features"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "coordinatesToWKT",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#coordinatesToWKT",
    "access": "public",
    "description": "Convert a coordinate to WKT",
    "lineNumber": 981,
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "Convert a coordinate to WKT"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "addFeature",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#addFeature",
    "access": "public",
    "description": "Add a feature to the Map\nTODO: This is old code for getting something working. Needs functionising, not for production",
    "lineNumber": 1000,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "deleteFeatureById",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#deleteFeatureById",
    "access": "public",
    "description": "Delete features from layer by id",
    "lineNumber": 1032,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "Layer to get extent from"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.id",
        "description": "id of feature"
      }
    ],
    "return": null
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "propertiesClean",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#propertiesClean",
    "access": "public",
    "description": "Clean and/or default feature properties",
    "lineNumber": 1055,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "Layer to get features from"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.delete",
        "description": "Array of properties to delete"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "json.default",
        "description": "Array of objects {name:...,value:...} to default"
      }
    ],
    "return": null
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "splitFeatures",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#splitFeatures",
    "access": "public",
    "description": "split featues using a line string",
    "lineNumber": 1089,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "Layer to get extent from"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.id",
        "description": "id of feature"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "mergeFeaturesById",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#mergeFeaturesById",
    "access": "public",
    "description": "merge features from layer by id",
    "lineNumber": 1200,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "Layer to get extent from"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.ids",
        "description": "ids of features to merge"
      }
    ],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "addGeojson",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#addGeojson",
    "access": "public",
    "description": "Add geojson features to a layer",
    "lineNumber": 1267,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "Layer to get extent from"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.gejson",
        "description": "geojson"
      }
    ],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "_idFeatures",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_idFeatures",
    "access": "private",
    "description": "Openlayers doesn't ID features by default. This will apply a unique id to all features passed to it",
    "lineNumber": 1288,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "features",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "getGeojson",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#getGeojson",
    "access": "public",
    "description": "gets geojson features to a layer",
    "lineNumber": 1310,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "Layer to get extent from"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.prefix",
        "description": "Prefix for memory"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.projection",
        "description": "Projection to use"
      }
    ],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "_loadGeojson",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_loadGeojson",
    "access": "private",
    "description": "Loads geojson from var or object",
    "lineNumber": 1340,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "geojson",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "_featuresToGeojson",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_featuresToGeojson",
    "access": "private",
    "description": null,
    "lineNumber": 1352,
    "undocument": true,
    "params": [
      {
        "name": "toProjection",
        "types": [
          "*"
        ]
      },
      {
        "name": "fromProjection",
        "types": [
          "*"
        ]
      },
      {
        "name": "features",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "clearLayer",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#clearLayer",
    "access": "public",
    "description": "Remove the data from a layer on the map.",
    "lineNumber": 1367,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "Layer to clear"
      }
    ],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "changed",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#changed",
    "access": "public",
    "description": "Flag a layer as changed (cause redraw).",
    "lineNumber": 1391,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "Layer to flag"
      }
    ],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "toggleLayer",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#toggleLayer",
    "access": "public",
    "description": "Toggle layer on and off",
    "lineNumber": 1409,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "Layer to clear"
      }
    ],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "centerOnCoordinate",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#centerOnCoordinate",
    "access": "public",
    "description": " Move the map so the cords are at the center",
    "examples": [
      "openlayers.centerOnCoordinate({\"coordinate\":\"{{!^JSON.stringify(memory.simpleSelect.value.selected[0].getGeometry().getCoordinates())}}\"});"
    ],
    "lineNumber": 1430,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.coordinate",
        "description": "Coordinate to use"
      }
    ],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "_decodeCoords",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#_decodeCoords",
    "access": "private",
    "description": "Clean up coordinates in any format and reproject",
    "lineNumber": 1453,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cords",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "projection",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "animateZoom",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#animateZoom",
    "access": "public",
    "description": "Zoom a layer to the extent of its features (needs appropriate zoom levels to work well",
    "examples": [
      "openlayers.animateZoom({\"inc\":\"2});"
    ],
    "lineNumber": 1486,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.inc",
        "description": "Increment of he zoom EG 1|-1|2|-2|etc"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.delay",
        "description": "Delay period of the zoom in ms"
      }
    ],
    "return": null
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "flyTo",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#flyTo",
    "access": "public",
    "description": "Zoom a layer to the extent of its features (needs appropriate zoom levels to work well",
    "examples": [
      "openlayers.flyTo({\"location\":\"2});"
    ],
    "lineNumber": 1517,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.duration",
        "description": "Delay period of the zoom in ms"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.coordinate",
        "description": "location to fly to"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "json.wait",
        "description": "Wait till end of animation to finish queue item"
      }
    ],
    "return": null
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "zoomToLayerExtent",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#zoomToLayerExtent",
    "access": "public",
    "description": "Zoom a layer to the extent of its features (needs appropriate zoom levels to work well",
    "examples": [
      "openlayers.zoomToLayerExtent({\"map\":\"map_1\",\"layer\":\"data\"});"
    ],
    "lineNumber": 1573,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.layer",
        "description": "Layer to get extent from"
      }
    ],
    "return": null
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "updateSize",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#updateSize",
    "access": "public",
    "description": "Update size of map (in the event of resize or rotation this will fix it)",
    "examples": [
      "openlayers.updateSize({\"map\":\"map_1\"});"
    ],
    "lineNumber": 1623,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference can be * and all maps will be targeted"
      }
    ],
    "return": null
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "addOverlay",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#addOverlay",
    "access": "public",
    "description": "Add an overlay to the map",
    "examples": [
      "openlayers.addOverlay({\"targetId\":\"#functionOverlay\",\"coordinate\":\"{{!^JSON.stringify(memory.simpleSelect.value.mapBrowserEvent.coordinate)}}\"});"
    ],
    "lineNumber": 1655,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.overlay",
        "description": "Overlay reference to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom element to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.coordinate",
        "description": "coordinate to place it (Event.coordinate) for clicks"
      }
    ],
    "return": null
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "removeOverlay",
    "memberof": "ourthings/Queueable/Openlayers.js~Openlayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Openlayers.js~Openlayers#removeOverlay",
    "access": "public",
    "description": "Remove an overlay from the map",
    "examples": [
      "openlayers.removeOverlay();"
    ],
    "lineNumber": 1699,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.map",
        "description": "Map reference"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.overlay",
        "description": "Overlay reference to use"
      }
    ],
    "return": null
  },
  {
    "__docId__": 290,
    "kind": "file",
    "name": "ourthings/Queueable/Templates.js",
    "content": "/** @module ourthings/Queueable/Templates */\r\nimport Queueable from \"../Queueable\";\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Template manipulations\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * templates.render({\"targetId\":\"content\",\"template\":\"basic\"});\r\n *\r\n */\r\nclass Templates extends Queueable {\r\n\r\n\t/**\r\n\t * Render a template into the dom using the queues templateProcessor\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.template - dom id of template to use\r\n\t * @param {string} [json.target] - dom id of render target\r\n\t * @param {string} [json.mode] - \"insert|append\"\r\n\t * @param {boolean} [json.quiet] - true|false\r\n\t * @example\r\n\t * templates.render({\"targetId\":\"content\",\"template\":\"basic\"});\r\n\t */\r\n\trender(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet options = Object.assign({\r\n\t\t\t\"mode\": \"insert\",\r\n\t\t\t\"scrollTarget\":\".scroll\",\r\n\t\t\t\"scroll\":true\r\n\r\n\t\t}, json);\r\n\t\tself.set(pid,json);\r\n\t\tif(!self.queue.templateProcessor(options.template,options.targetId,options.mode)&&options.quiet!==true) {\r\n\r\n\t\t\tself.finished(pid, self.queue.DEFINE.FIN_ERROR, 'Could not render template');\r\n\t\t} else {\r\n\t\t\tif(options.scroll===true) {\r\n\t\t\t\tlet scrollElement = self.queue.getElement(options.targetId).closest(options.scrollTarget);\r\n\t\t\t\tif(scrollElement)\r\n\t\t\t\t\tscrollElement.scrollTop = 0;\r\n\t\t\t\telse\r\n\t\t\t\t\twindow.scrollTo(0,0);\r\n\t\t\t}\r\n\t\t\tself.finished(pid, self.queue.DEFINE.FIN_OK);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Templates;",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Queueable/Templates.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 291,
    "kind": "class",
    "name": "Templates",
    "memberof": "ourthings/Queueable/Templates.js",
    "static": true,
    "longname": "ourthings/Queueable/Templates.js~Templates",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/Templates.js",
    "importStyle": "Templates",
    "description": "",
    "examples": [
      "templates.render({\"targetId\":\"content\",\"template\":\"basic\"});"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\nTemplate manipulations"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "interface": false,
    "extends": [
      "ourthings/Queueable.js~Queueable"
    ]
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "render",
    "memberof": "ourthings/Queueable/Templates.js~Templates",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/Templates.js~Templates#render",
    "access": "public",
    "description": "Render a template into the dom using the queues templateProcessor",
    "examples": [
      "templates.render({\"targetId\":\"content\",\"template\":\"basic\"});"
    ],
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.template",
        "description": "dom id of template to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "json.target",
        "description": "dom id of render target"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "json.mode",
        "description": "\"insert|append\""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "json.quiet",
        "description": "true|false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 293,
    "kind": "file",
    "name": "ourthings/Queueable/W3Menu.js",
    "content": "/** @module ourthings/Queueable/W3Menu */\r\nimport Queueable from \"../Queueable\";\r\n\r\n/**\r\n * @classdesc W3C Menu implementation\r\n **\r\n * For queue intergration you can add 'data-queue' attribute to cause a menu item to run a prepared queue\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * \tw3menu.initMenu({\"targetId\":\"#menubutton1\"});\r\n *\r\n */\r\nexport default class W3Menu extends Queueable {\r\n\r\n\t/**\r\n\t * Start the menu on assigned targetId\r\n\t *\r\n\t * @description W3C Menu implementation see: https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-actions.html\r\n\t *\r\n\t * @param {number} pid - Process ID\r\n\t * @param {object} json - queue arguments\r\n\t * @param {string} json.targetId - Dom target of the w3c menu html\r\n\t *\r\n\t * @example\r\n\t * w3menu.initMenu({\"targetId\":\"#menubutton1\"});\r\n\t */\r\n\tinitMenu(pid,json) {\r\n\t\tlet self=this;\r\n\t\tlet options=Object.assign({\r\n\t\t\t\"hover\":true\r\n\t\t},json);\r\n\t\tlet element=self.queue.getElement(json.targetId);\r\n\t\telement.setAttribute(\"data-bound\",\"true\");\r\n\t\tlet menubutton = new Menubutton(element);\r\n\t\tmenubutton.init(options);\r\n\t\tself.finished(pid,self.queue.DEFINE.FIN_OK);\r\n\t}\r\n}\r\n\r\n/*\r\n*   This content is licensed according to the W3C Software License at\r\n*   https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\r\n*\r\n*   File:   Menubutton.js\r\n*\r\n*   Desc:   Menubutton widget that implements ARIA Authoring Practices\r\n*/\r\n\r\n/*\r\n*   @constructor MenuButton\r\n*\r\n*   @desc\r\n*       Object that configures menu item elements by setting tabIndex\r\n*       and registering itself to handle pertinent events.\r\n*\r\n*       While menuitem elements handle many keydown events, as well as\r\n*       focus and blur events, they do not maintain any state variables,\r\n*       delegating those responsibilities to its associated menu object.\r\n*\r\n*       Consequently, it is only necessary to create one instance of\r\n*       MenubuttonItem from within the menu object; its configure method\r\n*       can then be called on each menuitem element.\r\n*\r\n*   @param domNode\r\n*       The DOM element node that serves as the menu item container.\r\n*       The menuObj PopupMenu is responsible for checking that it has\r\n*       requisite metadata, e.g. role=\"menuitem\".\r\n*\r\n*\r\n*/\r\nlet Menubutton = function (domNode) {\r\n\r\n\tthis.domNode   = domNode;\r\n\tthis.popupMenu = false;\r\n\r\n\tthis.hasFocus = false;\r\n\tthis.hasHover = false;\r\n\r\n\tthis.keyCode = Object.freeze({\r\n\t\t'TAB': 9,\r\n\t\t'RETURN': 13,\r\n\t\t'ESC': 27,\r\n\t\t'SPACE': 32,\r\n\t\t'PAGEUP': 33,\r\n\t\t'PAGEDOWN': 34,\r\n\t\t'END': 35,\r\n\t\t'HOME': 36,\r\n\t\t'LEFT': 37,\r\n\t\t'UP': 38,\r\n\t\t'RIGHT': 39,\r\n\t\t'DOWN': 40\r\n\t});\r\n};\r\n\r\nMenubutton.prototype.init = function (options) {\r\n\r\n\tthis.class=options.class;\r\n\tthis.domNode.setAttribute('aria-haspopup', 'true');\r\n\r\n\tthis.domNode.addEventListener('keydown', this.handleKeydown.bind(this));\r\n\tthis.domNode.addEventListener('click', this.handleClick.bind(this));\r\n\tthis.domNode.addEventListener('focus', this.handleFocus.bind(this));\r\n\tthis.domNode.addEventListener('blur', this.handleBlur.bind(this));\r\n\tif(options.hover)\r\n\t\tthis.domNode.addEventListener('mouseover', this.handleMouseover.bind(this));\r\n\tif(options.hover)\r\n\t\tthis.domNode.addEventListener('mouseout', this.handleMouseout.bind(this));\r\n\r\n\t// initialize pop up menus\r\n\r\n\tlet popupMenu = document.getElementById(this.domNode.getAttribute('aria-controls'));\r\n\r\n\tif (popupMenu) {\r\n\t\tif (popupMenu.getAttribute('aria-activedescendant')) {\r\n\t\t\tthis.popupMenu = new PopupMenuActionActivedescendant(popupMenu, this);\r\n\t\t\tthis.popupMenu.init();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.popupMenu = new PopupMenuAction(popupMenu, this);\r\n\t\t\tthis.popupMenu.init();\r\n\t\t}\r\n\t}\r\n\r\n};\r\n\r\nMenubutton.prototype.handleKeydown = function (event) {\r\n\tlet flag = false;\r\n\r\n\tswitch (event.keyCode) {\r\n\t\tcase this.keyCode.SPACE:\r\n\t\tcase this.keyCode.RETURN:\r\n\t\tcase this.keyCode.DOWN:\r\n\t\t\tif (this.popupMenu) {\r\n\t\t\t\tthis.popupMenu.open();\r\n\t\t\t\tthis.popupMenu.setFocusToFirstItem();\r\n\t\t\t}\r\n\t\t\tflag = true;\r\n\t\t\tbreak;\r\n\r\n\t\tcase this.keyCode.UP:\r\n\t\t\tif (this.popupMenu) {\r\n\t\t\t\tthis.popupMenu.open();\r\n\t\t\t\tthis.popupMenu.setFocusToLastItem();\r\n\t\t\t\tflag = true;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif (flag) {\r\n\t\tevent.stopPropagation();\r\n\t\tevent.preventDefault();\r\n\t}\r\n};\r\n\r\nMenubutton.prototype.handleClick = function (event) {\r\n\tif (this.domNode.getAttribute('aria-expanded') == 'true') {\r\n\t\tthis.popupMenu.close(true);\r\n\t}\r\n\telse {\r\n\t\tthis.popupMenu.open();\r\n\t\tthis.popupMenu.setFocusToFirstItem();\r\n\t}\r\n};\r\n\r\nMenubutton.prototype.handleFocus = function (event) {\r\n\tthis.popupMenu.hasFocus = true;\r\n};\r\n\r\nMenubutton.prototype.handleBlur = function (event) {\r\n\tthis.popupMenu.hasFocus = false;\r\n\tsetTimeout(this.popupMenu.close.bind(this.popupMenu, false), 300);\r\n\r\n};\r\n\r\nMenubutton.prototype.handleMouseover = function (event) {\r\n\tthis.hasHover = true;\r\n\tthis.popupMenu.open();\r\n};\r\n\r\nMenubutton.prototype.handleMouseout = function (event) {\r\n\tthis.hasHover = false;\r\n\tsetTimeout(this.popupMenu.close.bind(this.popupMenu, false), 300);\r\n};\r\n\r\n/*\r\n*   This content is licensed according to the W3C Software License at\r\n*   https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\r\n*\r\n*   File:   MenuItem.js\r\n*\r\n*   Desc:   Popup Menu Menuitem widget that implements ARIA Authoring Practices\r\n*/\r\n\r\n/*\r\n*   @constructor MenuItem\r\n*\r\n*   @desc\r\n*       Wrapper object for a simple menu item in a popup menu\r\n*\r\n*   @param domNode\r\n*       The DOM element node that serves as the menu item container.\r\n*       The menuObj PopupMenu is responsible for checking that it has\r\n*       requisite metadata, e.g. role=\"menuitem\".\r\n*\r\n*   @param menuObj\r\n*       The object that is a wrapper for the PopupMenu DOM element that\r\n*       contains the menu item DOM element. See PopupMenuAction.js\r\n*/\r\nlet PopupMenuItem = function (domNode, popupMenuObj) {\r\n\r\n\tthis.domNode   = domNode;\r\n\tthis.popupMenu = popupMenuObj;\r\n\r\n\tthis.keyCode = Object.freeze({\r\n\t\t'TAB': 9,\r\n\t\t'RETURN': 13,\r\n\t\t'ESC': 27,\r\n\t\t'SPACE': 32,\r\n\t\t'PAGEUP': 33,\r\n\t\t'PAGEDOWN': 34,\r\n\t\t'END': 35,\r\n\t\t'HOME': 36,\r\n\t\t'LEFT': 37,\r\n\t\t'UP': 38,\r\n\t\t'RIGHT': 39,\r\n\t\t'DOWN': 40\r\n\t});\r\n};\r\n\r\nPopupMenuItem.prototype.init = function () {\r\n\tthis.domNode.tabIndex = -1;\r\n\r\n\tif (!this.domNode.getAttribute('role')) {\r\n\t\tthis.domNode.setAttribute('role', 'menuitem');\r\n\t}\r\n\r\n\tthis.domNode.addEventListener('keydown',    this.handleKeydown.bind(this));\r\n\tthis.domNode.addEventListener('click',      this.handleClick.bind(this));\r\n\tthis.domNode.addEventListener('focus',      this.handleFocus.bind(this));\r\n\tthis.domNode.addEventListener('blur',       this.handleBlur.bind(this));\r\n\tthis.domNode.addEventListener('mouseover',  this.handleMouseover.bind(this));\r\n\tthis.domNode.addEventListener('mouseout',   this.handleMouseout.bind(this));\r\n\r\n};\r\n\r\n/* EVENT HANDLERS */\r\n\r\nPopupMenuItem.prototype.handleKeydown = function (event) {\r\n\tlet flag = false,\r\n\t\tchar = event.key;\r\n\tfunction isPrintableCharacter (str) {\r\n\t\treturn str.length === 1 && str.match(/\\S/);\r\n\t}\r\n\r\n\tif (event.ctrlKey || event.altKey  || event.metaKey) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (event.shiftKey) {\r\n\t\tif (isPrintableCharacter(char)) {\r\n\t\t\tthis.popupMenu.setFocusByFirstCharacter(this, char);\r\n\t\t}\r\n\t}\r\n\telse {\r\n\r\n\t\tswitch (event.keyCode) {\r\n\t\t\tcase this.keyCode.SPACE:\r\n\t\t\t\tflag = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase this.keyCode.RETURN:\r\n\t\t\t\tthis.handleClick(event);\r\n\t\t\t\tflag = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase this.keyCode.ESC:\r\n\t\t\t\tthis.popupMenu.setFocusToController();\r\n\t\t\t\tthis.popupMenu.close(true);\r\n\t\t\t\tflag = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase this.keyCode.UP:\r\n\t\t\t\tthis.popupMenu.setFocusToPreviousItem(this);\r\n\t\t\t\tflag = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase this.keyCode.DOWN:\r\n\t\t\t\tthis.popupMenu.setFocusToNextItem(this);\r\n\t\t\t\tflag = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase this.keyCode.HOME:\r\n\t\t\tcase this.keyCode.PAGEUP:\r\n\t\t\t\tthis.popupMenu.setFocusToFirstItem();\r\n\t\t\t\tflag = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase this.keyCode.END:\r\n\t\t\tcase this.keyCode.PAGEDOWN:\r\n\t\t\t\tthis.popupMenu.setFocusToLastItem();\r\n\t\t\t\tflag = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase this.keyCode.TAB:\r\n\t\t\t\tthis.popupMenu.setFocusToController();\r\n\t\t\t\tthis.popupMenu.close(true);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tif (isPrintableCharacter(char)) {\r\n\t\t\t\t\tthis.popupMenu.setFocusByFirstCharacter(this, char);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tif (flag) {\r\n\t\tevent.stopPropagation();\r\n\t\tevent.preventDefault();\r\n\t}\r\n};\r\n\r\nPopupMenuItem.prototype.handleClick = function (event) {\r\n\tlet attr=event.target.getAttribute('data-queue');\r\n\tif(attr)\r\n\t\tqueue.execute(attr);\r\n\r\n\t/*\r\n\t * Is this a keyboard event? If so and the data-click attr is set we send a click to the element.\r\n\t * This will trigger the ourthings event that is bound to it\r\n\t */\r\n\tlet click=event.target.getAttribute('data-click');\r\n\tif(click===\"true\"&&event.keyCode)\r\n\t\tevent.target.click();\r\n\tthis.popupMenu.setFocusToController();\r\n\tlet noClose=event.target.getAttribute('data-noclose');\r\n\tif(!noClose)\r\n\t\tthis.popupMenu.close(true)\r\n\r\n};\r\n\r\nPopupMenuItem.prototype.handleFocus = function (event) {\r\n\tthis.popupMenu.hasFocus = true;\r\n};\r\n\r\nPopupMenuItem.prototype.handleBlur = function (event) {\r\n\tthis.popupMenu.hasFocus = false;\r\n\tsetTimeout(this.popupMenu.close.bind(this.popupMenu, false), 300);\r\n};\r\n\r\nPopupMenuItem.prototype.handleMouseover = function (event) {\r\n\tthis.popupMenu.hasHover = true;\r\n\tthis.popupMenu.open();\r\n\r\n};\r\n\r\nPopupMenuItem.prototype.handleMouseout = function (event) {\r\n\tthis.popupMenu.hasHover = false;\r\n\tsetTimeout(this.popupMenu.close.bind(this.popupMenu, false), 300);\r\n};\r\n\r\n/*\r\n*   This content is licensed according to the W3C Software License at\r\n*   https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\r\n*\r\n*   File:   PopupMenuAction.js\r\n*\r\n*   Desc:   Popup menu widget that implements ARIA Authoring Practices\r\n*/\r\n\r\n/*\r\n*   @constructor PopupMenuAction\r\n*\r\n*   @desc\r\n*       Wrapper object for a simple popup menu (without nested submenus)\r\n*\r\n*   @param domNode\r\n*       The DOM element node that serves as the popup menu container. Each\r\n*       child element of domNode that represents a menuitem must have a\r\n*       'role' attribute with value 'menuitem'.\r\n*\r\n*   @param controllerObj\r\n*       The object that is a wrapper for the DOM element that controls the\r\n*       menu, e.g. a button element, with an 'aria-controls' attribute that\r\n*       references this menu's domNode. See MenuButton.js\r\n*\r\n*       The controller object is expected to have the following properties:\r\n*       1. domNode: The controller object's DOM element node, needed for\r\n*          retrieving positioning information.\r\n*       2. hasHover: boolean that indicates whether the controller object's\r\n*          domNode has responded to a mouseover event with no subsequent\r\n*          mouseout event having occurred.\r\n*/\r\nlet PopupMenuAction = function (domNode, controllerObj) {\r\n\tlet elementChildren,\r\n\t\tmsgPrefix = 'PopupMenu constructor argument domNode ';\r\n\r\n\t// Check whether domNode is a DOM element\r\n\tif (!domNode instanceof Element) {\r\n\t\tthrow new TypeError(msgPrefix + 'is not a DOM Element.');\r\n\t}\r\n\r\n\t// Check whether domNode has child elements\r\n\tif (domNode.childElementCount === 0) {\r\n\t\tthrow new Error(msgPrefix + 'has no element children.');\r\n\t}\r\n\r\n\t// Check whether domNode child elements are A elements\r\n\tlet childElement = domNode.firstElementChild;\r\n\twhile (childElement) {\r\n\t\tlet menuitem = childElement.firstElementChild;\r\n\t\tif (menuitem && menuitem === 'A') {\r\n\t\t\tthrow new Error(msgPrefix + 'Cannot have descendant elements are A elements.');\r\n\t\t}\r\n\t\tchildElement = childElement.nextElementSibling;\r\n\t}\r\n\r\n\tthis.domNode = domNode;\r\n\tthis.controller = controllerObj;\r\n\r\n\tthis.menuitems  = [];      // see PopupMenu init method\r\n\tthis.firstChars = [];      // see PopupMenu init method\r\n\r\n\tthis.firstItem  = null;    // see PopupMenu init method\r\n\tthis.lastItem   = null;    // see PopupMenu init method\r\n\r\n\tthis.hasFocus   = false;   // see MenuItem handleFocus, handleBlur\r\n\tthis.hasHover   = false;   // see PopupMenu handleMouseover, handleMouseout\r\n};\r\n\r\n/*\r\n*   @method PopupMenuAction.prototype.init\r\n*\r\n*   @desc\r\n*       Add domNode event listeners for mouseover and mouseout. Traverse\r\n*       domNode children to configure each menuitem and populate menuitems\r\n*       array. Initialize firstItem and lastItem properties.\r\n*/\r\nPopupMenuAction.prototype.init = function () {\r\n\tlet childElement, menuElement, firstChildElement, menuItem, textContent, numItems, label;\r\n\r\n\t// Configure the domNode itself\r\n\tthis.domNode.tabIndex = -1;\r\n\r\n\tthis.domNode.setAttribute('role', 'menu');\r\n\r\n\tif (!this.domNode.getAttribute('aria-labelledby') && !this.domNode.getAttribute('aria-label') && !this.domNode.getAttribute('title')) {\r\n\t\tlabel = this.controller.domNode.innerHTML;\r\n\t\tthis.domNode.setAttribute('aria-label', label);\r\n\t}\r\n\r\n\tthis.domNode.addEventListener('mouseover', this.handleMouseover.bind(this));\r\n\tthis.domNode.addEventListener('mouseout',  this.handleMouseout.bind(this));\r\n\r\n\t// Traverse the element children of domNode: configure each with\r\n\t// menuitem role behavior and store reference in menuitems array.\r\n\tlet menuElements = this.domNode.getElementsByTagName('LI');\r\n\r\n\tfor (let i = 0; i < menuElements.length; i++) {\r\n\r\n\t\tmenuElement = menuElements[i];\r\n\r\n\t\tif (!menuElement.firstElementChild && menuElement.getAttribute('role') != 'separator') {\r\n\t\t\tmenuItem = new PopupMenuItem(menuElement, this);\r\n\t\t\tmenuItem.init();\r\n\t\t\tthis.menuitems.push(menuItem);\r\n\t\t\ttextContent = menuElement.textContent.trim();\r\n\t\t\tthis.firstChars.push(textContent.substring(0, 1).toLowerCase());\r\n\t\t}\r\n\t}\r\n\r\n\t// Use populated menuitems array to initialize firstItem and lastItem.\r\n\tnumItems = this.menuitems.length;\r\n\tif (numItems > 0) {\r\n\t\tthis.firstItem = this.menuitems[0];\r\n\t\tthis.lastItem  = this.menuitems[numItems - 1];\r\n\t}\r\n};\r\n\r\n/* EVENT HANDLERS */\r\n\r\nPopupMenuAction.prototype.handleMouseover = function (event) {\r\n\tthis.hasHover = true;\r\n};\r\n\r\nPopupMenuAction.prototype.handleMouseout = function (event) {\r\n\tthis.hasHover = false;\r\n\tsetTimeout(this.close.bind(this, false), 300);\r\n};\r\n\r\n/* FOCUS MANAGEMENT METHODS */\r\n\r\nPopupMenuAction.prototype.setFocusToController = function (command) {\r\n\tif (typeof command !== 'string') {\r\n\t\tcommand = '';\r\n\t}\r\n\r\n\tif (command === 'previous') {\r\n\t\tthis.controller.menubutton.setFocusToPreviousItem(this.controller);\r\n\t}\r\n\telse {\r\n\t\tif (command === 'next') {\r\n\t\t\tthis.controller.menubutton.setFocusToNextItem(this.controller);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.controller.domNode.focus();\r\n\t\t}\r\n\t}\r\n};\r\n\r\nPopupMenuAction.prototype.setFocusToFirstItem = function () {\r\n\tthis.firstItem.domNode.focus();\r\n};\r\n\r\nPopupMenuAction.prototype.setFocusToLastItem = function () {\r\n\tthis.lastItem.domNode.focus();\r\n};\r\n\r\nPopupMenuAction.prototype.setFocusToPreviousItem = function (currentItem) {\r\n\tlet index;\r\n\r\n\tif (currentItem === this.firstItem) {\r\n\t\tthis.lastItem.domNode.focus();\r\n\t}\r\n\telse {\r\n\t\tindex = this.menuitems.indexOf(currentItem);\r\n\t\tthis.menuitems[index - 1].domNode.focus();\r\n\t}\r\n};\r\n\r\nPopupMenuAction.prototype.setFocusToNextItem = function (currentItem) {\r\n\tlet index;\r\n\r\n\tif (currentItem === this.lastItem) {\r\n\t\tthis.firstItem.domNode.focus();\r\n\t}\r\n\telse {\r\n\t\tindex = this.menuitems.indexOf(currentItem);\r\n\t\tthis.menuitems[index + 1].domNode.focus();\r\n\t}\r\n};\r\n\r\nPopupMenuAction.prototype.setFocusByFirstCharacter = function (currentItem, char) {\r\n\tlet start, index;\r\n\tchar = char.toLowerCase();\r\n\r\n\t// Get start index for search based on position of currentItem\r\n\tstart = this.menuitems.indexOf(currentItem) + 1;\r\n\tif (start === this.menuitems.length) {\r\n\t\tstart = 0;\r\n\t}\r\n\r\n\t// Check remaining slots in the menu\r\n\tindex = this.getIndexFirstChars(start, char);\r\n\r\n\t// If not found in remaining slots, check from beginning\r\n\tif (index === -1) {\r\n\t\tindex = this.getIndexFirstChars(0, char);\r\n\t}\r\n\r\n\t// If match was found...\r\n\tif (index > -1) {\r\n\t\tthis.menuitems[index].domNode.focus();\r\n\t}\r\n};\r\n\r\nPopupMenuAction.prototype.getIndexFirstChars = function (startIndex, char) {\r\n\tfor (let i = startIndex; i < this.firstChars.length; i++) {\r\n\t\tif (char === this.firstChars[i]) {\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n};\r\n\r\n/* MENU DISPLAY METHODS */\r\n\r\nPopupMenuAction.prototype.open = function () {\r\n\t// get bounding rectangle of controller object's DOM node\r\n\tlet rect = this.controller.domNode.getBoundingClientRect();\r\n\r\n\t// set CSS properties\r\n\tthis.domNode.style.display = 'block';\r\n\tthis.domNode.style.position = 'absolute';\r\n\t//this.domNode.style.top  = rect.height + 'px';\r\n\t//this.domNode.style.left = '0px';\r\n\r\n\t// set aria-expanded attribute\r\n\tthis.controller.domNode.setAttribute('aria-expanded', 'true');\r\n\tif( this.class) {\r\n\t\tthis.domNode.classList.add(this.class);\r\n\t}\r\n};\r\n\r\nPopupMenuAction.prototype.close = function (force) {\r\n\tif (typeof force !== 'boolean') {\r\n\t\tforce = false;\r\n\t}\r\n\r\n\tif (force || (!this.hasFocus && !this.hasHover && !this.controller.hasHover)) {\r\n\t\tthis.domNode.style.display = 'none';\r\n\t\tthis.controller.domNode.removeAttribute('aria-expanded');\r\n\t\tif( this.class) {\r\n\t\t\tthis.domNode.classList.remove(this.class);\r\n\t\t}\r\n\t}\r\n\r\n\r\n};",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Queueable/W3Menu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 294,
    "kind": "class",
    "name": "W3Menu",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~W3Menu",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": "W3Menu",
    "description": "",
    "examples": [
      "\tw3menu.initMenu({\"targetId\":\"#menubutton1\"});"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "W3C Menu implementation\n*\nFor queue intergration you can add 'data-queue' attribute to cause a menu item to run a prepared queue"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "interface": false,
    "extends": [
      "ourthings/Queueable.js~Queueable"
    ]
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "initMenu",
    "memberof": "ourthings/Queueable/W3Menu.js~W3Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable/W3Menu.js~W3Menu#initMenu",
    "access": "public",
    "description": "Start the menu on assigned targetId",
    "examples": [
      "w3menu.initMenu({\"targetId\":\"#menubutton1\"});"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "W3C Menu implementation see: https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-actions.html"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": "Process ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "queue arguments"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json.targetId",
        "description": "Dom target of the w3c menu html"
      }
    ],
    "return": null
  },
  {
    "__docId__": 296,
    "kind": "function",
    "name": "Menubutton",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~Menubutton",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "domNode",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 297,
    "kind": "function",
    "name": "init",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~init",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 298,
    "kind": "function",
    "name": "handleKeydown",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~handleKeydown",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 299,
    "kind": "function",
    "name": "handleClick",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~handleClick",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 300,
    "kind": "function",
    "name": "handleFocus",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~handleFocus",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "function",
    "name": "handleBlur",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~handleBlur",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 302,
    "kind": "function",
    "name": "handleMouseover",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~handleMouseover",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 303,
    "kind": "function",
    "name": "handleMouseout",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~handleMouseout",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 304,
    "kind": "function",
    "name": "PopupMenuItem",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~PopupMenuItem",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "params": [
      {
        "name": "domNode",
        "types": [
          "*"
        ]
      },
      {
        "name": "popupMenuObj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 305,
    "kind": "function",
    "name": "init",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~init",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 306,
    "kind": "function",
    "name": "handleKeydown",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~handleKeydown",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 253,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 307,
    "kind": "function",
    "name": "handleClick",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~handleClick",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 308,
    "kind": "function",
    "name": "handleFocus",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~handleFocus",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 347,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 309,
    "kind": "function",
    "name": "handleBlur",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~handleBlur",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 351,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 310,
    "kind": "function",
    "name": "handleMouseover",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~handleMouseover",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 356,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 311,
    "kind": "function",
    "name": "handleMouseout",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~handleMouseout",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 362,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 312,
    "kind": "function",
    "name": "PopupMenuAction",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~PopupMenuAction",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 399,
    "undocument": true,
    "params": [
      {
        "name": "domNode",
        "types": [
          "*"
        ]
      },
      {
        "name": "controllerObj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 313,
    "kind": "function",
    "name": "init",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~init",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 444,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 314,
    "kind": "function",
    "name": "handleMouseover",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~handleMouseover",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 487,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 315,
    "kind": "function",
    "name": "handleMouseout",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~handleMouseout",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 491,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 316,
    "kind": "function",
    "name": "setFocusToController",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~setFocusToController",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 498,
    "undocument": true,
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 317,
    "kind": "function",
    "name": "setFocusToFirstItem",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~setFocusToFirstItem",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 516,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 318,
    "kind": "function",
    "name": "setFocusToLastItem",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~setFocusToLastItem",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 520,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 319,
    "kind": "function",
    "name": "setFocusToPreviousItem",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~setFocusToPreviousItem",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 524,
    "undocument": true,
    "params": [
      {
        "name": "currentItem",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 320,
    "kind": "function",
    "name": "setFocusToNextItem",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~setFocusToNextItem",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 536,
    "undocument": true,
    "params": [
      {
        "name": "currentItem",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 321,
    "kind": "function",
    "name": "setFocusByFirstCharacter",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~setFocusByFirstCharacter",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 548,
    "undocument": true,
    "params": [
      {
        "name": "currentItem",
        "types": [
          "*"
        ]
      },
      {
        "name": "char",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 322,
    "kind": "function",
    "name": "getIndexFirstChars",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~getIndexFirstChars",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 572,
    "undocument": true,
    "params": [
      {
        "name": "startIndex",
        "types": [
          "*"
        ]
      },
      {
        "name": "char",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 323,
    "kind": "function",
    "name": "open",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~open",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 583,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 324,
    "kind": "function",
    "name": "close",
    "memberof": "ourthings/Queueable/W3Menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ourthings/Queueable/W3Menu.js~close",
    "access": "public",
    "export": false,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable/W3Menu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 600,
    "undocument": true,
    "params": [
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 325,
    "kind": "file",
    "name": "ourthings/Queueable.js",
    "content": "/** @module ourthings/Queueable */\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * The base class for queueable things\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * // queue = new Queue();\r\n *\r\n */\r\nclass Queueable {\r\n\r\n\t/**\r\n\t * Constructor, Sets our status to be false (flipped on init)\r\n\t *\r\n\t */\r\n\tconstructor() {\r\n\t\tthis.ready=false;\r\n\t}\r\n\r\n\t/**\r\n\t * init, override this for any promise based inits setting\r\n\t * the self.ready=true after the promise\r\n\t *\r\n\t */\r\n\tinit(queue) {\r\n\t\tthis.queue=queue;\r\n\t\tthis.ready=true;\r\n\t}\r\n\r\n\t/**\r\n\t * Called from queue, starts running the actual command\r\n\t * @param pid\r\n\t * @param command\r\n\t * @param json\r\n\t */\r\n\tstart(pid,command,json) {\r\n\t\tlet self=this;\r\n\t\tif(self[command]&&typeof self[command] === 'function') {\r\n\t\t\t/*\r\n\t\t\t * Pass the json through the var processor\r\n\t\t\t */\r\n\t\t\tjson=JSON.parse(self.queue.templateVars(JSON.stringify(json)));\r\n\t\t\t/*\r\n\t\t\t * Process pointers IE *memory.foo.value\r\n\t\t\t */\r\n\t\t\tconst pointerRegex=/^\\*([a-zA-Z0-9\\.\\[\\]]*)$/;\r\n\t\t\tthis.queue.objectMap(json,function(item){\r\n\t\t\t\tlet match;\r\n\t\t\t\tif(match = pointerRegex.exec(item)) {\r\n\t\t\t\t\titem=eval(match[1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn item;\r\n\t\t\t})\r\n\r\n\t\t\t/*\r\n\t\t\t * Execute\r\n\t\t\t */\r\n\t\t\tself[command](pid, json);\r\n\t\t} else {\r\n\t\t\tself.queue.finished(pid,self.queue.DEFINE.FIN_ERROR,'No such command ['+command+']');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Call this method after you command has finished. Failure to do so will result is\r\n\t * a stalled queue\r\n\t * @param pid\r\n\t * @param mode\r\n\t */\r\n\tfinished(pid,mode,error='') {\r\n\t\tlet self=this;\r\n\t\t/*\r\n\t\t * a -1 pid is called via direct run and so not from our queue\r\n\t\t */\r\n\t\tif(pid!==-1)\r\n\t\t\tself.queue.finished(pid,mode,error);\r\n\t}\r\n\r\n\tset(pid,value) {\r\n\t\tlet self=this;\r\n\t\tself.queue.memory(pid,value);\r\n\t}\r\n}\r\n\r\nexport default Queueable;",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/Queueable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 326,
    "kind": "class",
    "name": "Queueable",
    "memberof": "ourthings/Queueable.js",
    "static": true,
    "longname": "ourthings/Queueable.js~Queueable",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/Queueable.js",
    "importStyle": "Queueable",
    "description": "",
    "examples": [
      "// queue = new Queue();"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\nThe base class for queueable things"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 327,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "ourthings/Queueable.js~Queueable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable.js~Queueable#constructor",
    "access": "public",
    "description": "Constructor, Sets our status to be false (flipped on init)",
    "lineNumber": 20
  },
  {
    "__docId__": 328,
    "kind": "member",
    "name": "ready",
    "memberof": "ourthings/Queueable.js~Queueable",
    "static": false,
    "longname": "ourthings/Queueable.js~Queueable#ready",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "init",
    "memberof": "ourthings/Queueable.js~Queueable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable.js~Queueable#init",
    "access": "public",
    "description": "init, override this for any promise based inits setting\nthe self.ready=true after the promise",
    "lineNumber": 29,
    "params": [
      {
        "name": "queue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 330,
    "kind": "member",
    "name": "queue",
    "memberof": "ourthings/Queueable.js~Queueable",
    "static": false,
    "longname": "ourthings/Queueable.js~Queueable#queue",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "start",
    "memberof": "ourthings/Queueable.js~Queueable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable.js~Queueable#start",
    "access": "public",
    "description": "Called from queue, starts running the actual command",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "finished",
    "memberof": "ourthings/Queueable.js~Queueable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable.js~Queueable#finished",
    "access": "public",
    "description": "Call this method after you command has finished. Failure to do so will result is\na stalled queue",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "set",
    "memberof": "ourthings/Queueable.js~Queueable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/Queueable.js~Queueable#set",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "pid",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 335,
    "kind": "file",
    "name": "ourthings/validator.js",
    "content": "/** @module Validate */\r\n\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Our validate class\r\n *\r\n * @author Richard Reynolds richard@nautoguide.com\r\n *\r\n * @example\r\n * // validate = new Validate();\r\n *\r\n */\r\nclass Validate {\r\n\tvalid(item,args) {\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\nclass ValidateEmail extends Validate {\r\n\tvalid(item,args) {\r\n\t\tlet re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\t\treturn re.test(String(item).toLowerCase());\r\n\t}\r\n}\r\n\r\nclass ValidateText extends Validate {\r\n\tvalid(item,args) {\r\n\t\treturn item.length>3;\r\n\t}\r\n}\r\n\r\nclass ValidatePassword extends Validate {\r\n\tvalid(item,args) {\r\n\t\treturn item.length>=8;\r\n\t}\r\n}\r\n\r\nexport {Validate,ValidateEmail,ValidateText,ValidatePassword};\r\n",
    "static": true,
    "longname": "C:/Users/xrout/Dropbox/machine/Work/webstorm/ourthings/src/ourthings/validator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 336,
    "kind": "class",
    "name": "Validate",
    "memberof": "ourthings/validator.js",
    "static": true,
    "longname": "ourthings/validator.js~Validate",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/validator.js",
    "importStyle": "{Validate}",
    "description": "",
    "examples": [
      "// validate = new Validate();"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@classdesc",
        "tagValue": "\nOur validate class"
      },
      {
        "tagName": "@author",
        "tagValue": "Richard Reynolds richard@nautoguide.com"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "valid",
    "memberof": "ourthings/validator.js~Validate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/validator.js~Validate#valid",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "class",
    "name": "ValidateEmail",
    "memberof": "ourthings/validator.js",
    "static": true,
    "longname": "ourthings/validator.js~ValidateEmail",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/validator.js",
    "importStyle": "{ValidateEmail}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "interface": false,
    "extends": [
      "Validate"
    ]
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "valid",
    "memberof": "ourthings/validator.js~ValidateEmail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/validator.js~ValidateEmail#valid",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "class",
    "name": "ValidateText",
    "memberof": "ourthings/validator.js",
    "static": true,
    "longname": "ourthings/validator.js~ValidateText",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/validator.js",
    "importStyle": "{ValidateText}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "interface": false,
    "extends": [
      "Validate"
    ]
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "valid",
    "memberof": "ourthings/validator.js~ValidateText",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/validator.js~ValidateText#valid",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "class",
    "name": "ValidatePassword",
    "memberof": "ourthings/validator.js",
    "static": true,
    "longname": "ourthings/validator.js~ValidatePassword",
    "access": "public",
    "export": true,
    "importPath": "@nautoguide/ourthings/ourthings/validator.js",
    "importStyle": "{ValidatePassword}",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "interface": false,
    "extends": [
      "Validate"
    ]
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "valid",
    "memberof": "ourthings/validator.js~ValidatePassword",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "ourthings/validator.js~ValidatePassword#valid",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# OurThings\r\nQueue based JavaScript framework\r\n\r\n# Intro\r\nOurThings is a queue based javascript framework designed to take the legwork out of AJAX apps. Originally a closed commercial framework, we are rewriting it and giving it to the world.\r\n\r\n# Purpose\r\nAfter creating ajax site after site we realised that we were repeating the same blocks of code, over and over and always ending up in the same code tangle. Do this, then do this, do that, then call this same piece of code but do something slightly different. After boiling down what we did it became obvious that what every app needed was:\r\n- A queue system\r\n- Flexible code blocks that can be reused\r\n- Common method of passing data between code and UI\r\n- Way to stop coders breaking the UI responsiveness\r\n\r\nWe also wanted to detach the framework from a need to use javascript. Our UX designers were spending time either writing bad javascript or having to get coders involved for even the most basic of tasks. Thus we wanted to give HTML/CSS users access to the framework in a language they already understand.\r\n\r\n# Documentation\r\n[Documentation Site](https://nautoguide.github.io/ourthings/)",
    "longname": "C:\\Users\\xrout\\Dropbox\\machine\\Work\\webstorm\\ourthings\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"@nautoguide/ourthings\",\r\n  \"version\": \"0.4.2\",\r\n  \"description\": \"Queue based JavaScript framework\",\r\n  \"scripts\": {\r\n    \"build\": \"webpack --config webpack.config.basic.js\",\r\n    \"buildbabel\": \"webpack\",\r\n    \"apidoc\": \"esdoc\",\r\n    \"testserver\": \"http-server -p 4040 ./\",\r\n    \"test\": \"mocha-headless-chrome -f http://localhost:4040/test/test.html -o test/out.res -v\",\r\n    \"headlesstest\": \"mocha-headless-chrome -f http://localhost:8080/test/test.html -o test/out.res\",\r\n    \"dopublish\": \"node prepublish.js && npm publish src/ourthings && node postpublish.js\",\r\n    \"dopublish-dry\": \"node prepublish.js && npm publish src/ourthings --dry-run && node postpublish.js\",\r\n    \"devmode\": \"node devmode.js\",\r\n    \"clean\": \"node clean.js\"\r\n  },\r\n  \"main\": \"index.js\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git://github.com/nautoguide/ourthings.git\"\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/nautoguide/ourthings/issues\"\r\n  },\r\n  \"license\": \"GPLv3\",\r\n  \"devDependencies\": {\r\n    \"chai\": \"^4.2.0\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"mocha\": \"^5.2.0\",\r\n    \"mocha-headless-chrome\": \"^2.0.1\",\r\n    \"path\": \"^0.12.7\",\r\n    \"webpack\": \"^4.26.1\",\r\n    \"shelljs\": \"^0.8.3\",\r\n    \"webpack-cli\": \"^3.1.2\",\r\n    \"webpack-dev-server\": \"^3.1.9\",\r\n    \"@babel/core\": \"^7.3.4\",\r\n    \"@babel/preset-env\": \"^7.3.4\",\r\n    \"babel-polyfill\": \"^7.0.0-beta.3\",\r\n    \"babel-loader\": \"^8.0.5\",\r\n    \"whatwg-fetch\": \"^3.0.0\",\r\n    \"http-server\": \"^0.11.1\",\r\n    \"@mapbox/mapbox-gl-draw\": \"^1.1.2\",\r\n    \"console-badge\": \"^1.1.0\",\r\n    \"showdown\": \"^1.9.0\"\r\n  },\r\n  \"dependencies\": {\r\n    \"console-badge\": \"^1.1.0\",\r\n    \"ol\": \"^6.2.1\",\r\n    \"proj4\": \"^2.5.0\",\r\n    \"uuid\": \"^7.0.3\",\r\n    \"mapbox-gl\": \"^1.6.0\",\r\n    \"@turf/turf\": \"^5.1.6\"\r\n  },\r\n  \"publishConfig\": {\r\n    \"access\": \"public\"\r\n  }\r\n}\r\n",
    "longname": "C:\\Users\\xrout\\Dropbox\\machine\\Work\\webstorm\\ourthings\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]